
SmartDesk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b8  00800100  0000209e  00002132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000209e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  008002b8  008002b8  000022ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029d7  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f90  00000000  00000000  00004f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017b9  00000000  00000000  00005f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  000076d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086c  00000000  00000000  00007c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ef  00000000  00000000  000084ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000099db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_1>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_11>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	12 e0       	ldi	r17, 0x02	; 2
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	ee e9       	ldi	r30, 0x9E	; 158
      88:	f0 e2       	ldi	r31, 0x20	; 32
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a8 3b       	cpi	r26, 0xB8	; 184
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	22 e0       	ldi	r18, 0x02	; 2
      98:	a8 eb       	ldi	r26, 0xB8	; 184
      9a:	b2 e0       	ldi	r27, 0x02	; 2
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	aa 3d       	cpi	r26, 0xDA	; 218
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 49 08 	call	0x1092	; 0x1092 <main>
      aa:	0c 94 4d 10 	jmp	0x209a	; 0x209a <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <Alarm_Init>:
#include <util/delay.h>

volatile uint8_t alarm_active = 0;  // 1 = Alarm is ringing

void Alarm_Init(void) {
	EICRA |= (1 << ISC01);  // Falling edge triggers INT0
      b2:	e9 e6       	ldi	r30, 0x69	; 105
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   // Enable INT0 interrupt
      bc:	8d b3       	in	r24, 0x1d	; 29
      be:	81 60       	ori	r24, 0x01	; 1
      c0:	8d bb       	out	0x1d, r24	; 29
	sei();  // Enable global interrupts
      c2:	78 94       	sei
      c4:	08 95       	ret

000000c6 <Alarm_Set>:
}

void Alarm_Set(uint8_t hour, uint8_t minute) {
      c6:	0f 93       	push	r16
      c8:	1f 93       	push	r17
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <Alarm_Set+0xa>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <Alarm_Set+0xc>
      d2:	00 d0       	rcall	.+0      	; 0xd4 <Alarm_Set+0xe>
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	18 2f       	mov	r17, r24
      da:	06 2f       	mov	r16, r22
	RTC_SetAlarm(hour, minute);
      dc:	0e 94 8f 09 	call	0x131e	; 0x131e <RTC_SetAlarm>
	LCD_Clear();
      e0:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
	LCD_Print("Alarm Set:");
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
	LCD_SetCursor(0, 1);
      ec:	61 e0       	ldi	r22, 0x01	; 1
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
	char buffer[6];
	sprintf(buffer, "%02d:%02d", hour, minute);
      f4:	1f 92       	push	r1
      f6:	0f 93       	push	r16
      f8:	1f 92       	push	r1
      fa:	1f 93       	push	r17
      fc:	86 e2       	ldi	r24, 0x26	; 38
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	9f 93       	push	r25
     102:	8f 93       	push	r24
     104:	8e 01       	movw	r16, r28
     106:	0f 5f       	subi	r16, 0xFF	; 255
     108:	1f 4f       	sbci	r17, 0xFF	; 255
     10a:	1f 93       	push	r17
     10c:	0f 93       	push	r16
     10e:	0e 94 2f 0a 	call	0x145e	; 0x145e <sprintf>
	LCD_Print(buffer);
     112:	c8 01       	movw	r24, r16
     114:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     118:	2f e3       	ldi	r18, 0x3F	; 63
     11a:	8d e0       	ldi	r24, 0x0D	; 13
     11c:	93 e0       	ldi	r25, 0x03	; 3
     11e:	21 50       	subi	r18, 0x01	; 1
     120:	80 40       	sbci	r24, 0x00	; 0
     122:	90 40       	sbci	r25, 0x00	; 0
     124:	e1 f7       	brne	.-8      	; 0x11e <Alarm_Set+0x58>
     126:	00 c0       	rjmp	.+0      	; 0x128 <Alarm_Set+0x62>
     128:	00 00       	nop
	_delay_ms(1000);  // Fixed: Show confirmation for 1 second
}
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
     134:	26 96       	adiw	r28, 0x06	; 6
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	1f 91       	pop	r17
     146:	0f 91       	pop	r16
     148:	08 95       	ret

0000014a <Buzzer_Init>:

void Buzzer_Init(void) {
	DDRB |= (1 << PB4);  // Set PB4 as an output
     14a:	84 b1       	in	r24, 0x04	; 4
     14c:	80 61       	ori	r24, 0x10	; 16
     14e:	84 b9       	out	0x04, r24	; 4
     150:	08 95       	ret

00000152 <Buzzer_On>:
}

void Buzzer_On(void) {
	PORTB |= (1 << PB4);  // Turn buzzer ON
     152:	85 b1       	in	r24, 0x05	; 5
     154:	80 61       	ori	r24, 0x10	; 16
     156:	85 b9       	out	0x05, r24	; 5
	alarm_active = 1;  // Mark alarm as active
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end>
     15e:	08 95       	ret

00000160 <Buzzer_Off>:
}

void Buzzer_Off(void) {
	PORTB &= ~(1 << PB4);  // Turn buzzer OFF
     160:	85 b1       	in	r24, 0x05	; 5
     162:	8f 7e       	andi	r24, 0xEF	; 239
     164:	85 b9       	out	0x05, r24	; 5
	alarm_active = 0;  // Mark alarm as inactive
     166:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <__data_end>
     16a:	08 95       	ret

0000016c <__vector_1>:
}

// Interrupt Service Routine for INT0 (Alarm Interrupt)
ISR(INT0_vect) {
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	2f 93       	push	r18
     178:	3f 93       	push	r19
     17a:	4f 93       	push	r20
     17c:	5f 93       	push	r21
     17e:	6f 93       	push	r22
     180:	7f 93       	push	r23
     182:	8f 93       	push	r24
     184:	9f 93       	push	r25
     186:	af 93       	push	r26
     188:	bf 93       	push	r27
     18a:	ef 93       	push	r30
     18c:	ff 93       	push	r31
	Buzzer_On();
     18e:	0e 94 a9 00 	call	0x152	; 0x152 <Buzzer_On>
     192:	ff 91       	pop	r31
     194:	ef 91       	pop	r30
     196:	bf 91       	pop	r27
     198:	af 91       	pop	r26
     19a:	9f 91       	pop	r25
     19c:	8f 91       	pop	r24
     19e:	7f 91       	pop	r23
     1a0:	6f 91       	pop	r22
     1a2:	5f 91       	pop	r21
     1a4:	4f 91       	pop	r20
     1a6:	3f 91       	pop	r19
     1a8:	2f 91       	pop	r18
     1aa:	0f 90       	pop	r0
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	0f 90       	pop	r0
     1b0:	1f 90       	pop	r1
     1b2:	18 95       	reti

000001b4 <I2C_Init>:
#include "i2c.h"
#define F_CPU 16000000UL
#define SCL_CLOCK 100000UL  // 100kHz I2C clock

void I2C_Init(void) {
	TWSR = 0x00;  // Prescaler = 1
     1b4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2;
     1b8:	88 e4       	ldi	r24, 0x48	; 72
     1ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN);  // Enable TWI
     1be:	84 e0       	ldi	r24, 0x04	; 4
     1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1c4:	08 95       	ret

000001c6 <I2C_Start>:
}

void I2C_Start(void) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     1c6:	84 ea       	ldi	r24, 0xA4	; 164
     1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     1cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d0:	88 23       	and	r24, r24
     1d2:	e4 f7       	brge	.-8      	; 0x1cc <I2C_Start+0x6>
}
     1d4:	08 95       	ret

000001d6 <I2C_Stop>:

void I2C_Stop(void) {
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
     1d6:	84 e9       	ldi	r24, 0x94	; 148
     1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1dc:	08 95       	ret

000001de <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
     1de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
     1e2:	84 e8       	ldi	r24, 0x84	; 132
     1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     1e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ec:	88 23       	and	r24, r24
     1ee:	e4 f7       	brge	.-8      	; 0x1e8 <I2C_Write+0xa>
}
     1f0:	08 95       	ret

000001f2 <I2C_ReadAck>:

uint8_t I2C_ReadAck(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
     1f2:	84 ec       	ldi	r24, 0xC4	; 196
     1f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     1f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1fc:	88 23       	and	r24, r24
     1fe:	e4 f7       	brge	.-8      	; 0x1f8 <I2C_ReadAck+0x6>
	return TWDR;
     200:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     204:	08 95       	ret

00000206 <I2C_ReadNack>:

uint8_t I2C_ReadNack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
     206:	84 e8       	ldi	r24, 0x84	; 132
     208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     20c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     210:	88 23       	and	r24, r24
     212:	e4 f7       	brge	.-8      	; 0x20c <I2C_ReadNack+0x6>
	return TWDR;
     214:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     218:	08 95       	ret

0000021a <Keypad_Init>:
	{'C', '0', '=', '+'}
};

void Keypad_Init() {
	// Configure Rows (PD4 - PD7) as outputs, initially HIGH
	ROW_DDR |= 0xF0;  // PD4-PD7 as outputs
     21a:	8a b1       	in	r24, 0x0a	; 10
     21c:	80 6f       	ori	r24, 0xF0	; 240
     21e:	8a b9       	out	0x0a, r24	; 10
	ROW_PORT |= 0xF0; // Set to HIGH
     220:	8b b1       	in	r24, 0x0b	; 11
     222:	80 6f       	ori	r24, 0xF0	; 240
     224:	8b b9       	out	0x0b, r24	; 11

	// Configure Columns (PB0 - PB3) as inputs with pull-ups
	COL_DDR &= ~0x0F;  // PB0-PB3 as inputs
     226:	84 b1       	in	r24, 0x04	; 4
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	84 b9       	out	0x04, r24	; 4
	COL_PORT |= 0x0F;  // Enable pull-ups
     22c:	85 b1       	in	r24, 0x05	; 5
     22e:	8f 60       	ori	r24, 0x0F	; 15
     230:	85 b9       	out	0x05, r24	; 5
     232:	08 95       	ret

00000234 <Keypad_GetKey>:
}

char Keypad_GetKey() {
	for (uint8_t row = 0; row < 4; row++) {
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	44 c0       	rjmp	.+136    	; 0x2c0 <Keypad_GetKey+0x8c>
		ROW_PORT &= ~(1 << (row + 4));  // Set row LOW
     238:	8b b1       	in	r24, 0x0b	; 11
     23a:	e3 2f       	mov	r30, r19
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	bf 01       	movw	r22, r30
     240:	6c 5f       	subi	r22, 0xFC	; 252
     242:	7f 4f       	sbci	r23, 0xFF	; 255
     244:	41 e0       	ldi	r20, 0x01	; 1
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <Keypad_GetKey+0x1a>
     24a:	44 0f       	add	r20, r20
     24c:	55 1f       	adc	r21, r21
     24e:	6a 95       	dec	r22
     250:	e2 f7       	brpl	.-8      	; 0x24a <Keypad_GetKey+0x16>
     252:	a4 2f       	mov	r26, r20
     254:	94 2f       	mov	r25, r20
     256:	90 95       	com	r25
     258:	89 23       	and	r24, r25
     25a:	8b b9       	out	0x0b, r24	; 11
     25c:	81 ee       	ldi	r24, 0xE1	; 225
     25e:	94 e0       	ldi	r25, 0x04	; 4
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <Keypad_GetKey+0x2c>
     264:	00 c0       	rjmp	.+0      	; 0x266 <Keypad_GetKey+0x32>
     266:	00 00       	nop
		_delay_ms(5);

		for (uint8_t col = 0; col < 4; col++) {
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	24 c0       	rjmp	.+72     	; 0x2b4 <Keypad_GetKey+0x80>
			if (!(COL_PIN & (1 << col))) {  // If column is LOW, key is pressed
     26c:	83 b1       	in	r24, 0x03	; 3
     26e:	62 2f       	mov	r22, r18
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 2e       	mov	r0, r18
     276:	02 c0       	rjmp	.+4      	; 0x27c <Keypad_GetKey+0x48>
     278:	95 95       	asr	r25
     27a:	87 95       	ror	r24
     27c:	0a 94       	dec	r0
     27e:	e2 f7       	brpl	.-8      	; 0x278 <Keypad_GetKey+0x44>
     280:	80 fd       	sbrc	r24, 0
     282:	17 c0       	rjmp	.+46     	; 0x2b2 <Keypad_GetKey+0x7e>
				while (!(COL_PIN & (1 << col)));  // Wait until key is released
     284:	83 b1       	in	r24, 0x03	; 3
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	06 2e       	mov	r0, r22
     28a:	02 c0       	rjmp	.+4      	; 0x290 <Keypad_GetKey+0x5c>
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	0a 94       	dec	r0
     292:	e2 f7       	brpl	.-8      	; 0x28c <Keypad_GetKey+0x58>
     294:	80 ff       	sbrs	r24, 0
     296:	f6 cf       	rjmp	.-20     	; 0x284 <Keypad_GetKey+0x50>
				ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
     298:	8b b1       	in	r24, 0x0b	; 11
     29a:	a8 2b       	or	r26, r24
     29c:	ab b9       	out	0x0b, r26	; 11
				return keymap[row][col];  // Return key value
     29e:	ee 0f       	add	r30, r30
     2a0:	ff 1f       	adc	r31, r31
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	e5 5f       	subi	r30, 0xF5	; 245
     2a8:	fe 4f       	sbci	r31, 0xFE	; 254
     2aa:	e6 0f       	add	r30, r22
     2ac:	f7 1f       	adc	r31, r23
     2ae:	80 81       	ld	r24, Z
     2b0:	08 95       	ret
char Keypad_GetKey() {
	for (uint8_t row = 0; row < 4; row++) {
		ROW_PORT &= ~(1 << (row + 4));  // Set row LOW
		_delay_ms(5);

		for (uint8_t col = 0; col < 4; col++) {
     2b2:	2f 5f       	subi	r18, 0xFF	; 255
     2b4:	24 30       	cpi	r18, 0x04	; 4
     2b6:	d0 f2       	brcs	.-76     	; 0x26c <Keypad_GetKey+0x38>
				while (!(COL_PIN & (1 << col)));  // Wait until key is released
				ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
				return keymap[row][col];  // Return key value
			}
		}
		ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
     2b8:	8b b1       	in	r24, 0x0b	; 11
     2ba:	48 2b       	or	r20, r24
     2bc:	4b b9       	out	0x0b, r20	; 11
	COL_DDR &= ~0x0F;  // PB0-PB3 as inputs
	COL_PORT |= 0x0F;  // Enable pull-ups
}

char Keypad_GetKey() {
	for (uint8_t row = 0; row < 4; row++) {
     2be:	3f 5f       	subi	r19, 0xFF	; 255
     2c0:	34 30       	cpi	r19, 0x04	; 4
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <Keypad_GetKey+0x92>
     2c4:	b9 cf       	rjmp	.-142    	; 0x238 <Keypad_GetKey+0x4>
				return keymap[row][col];  // Return key value
			}
		}
		ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
	}
	return 0;  // No key pressed
     2c6:	80 e0       	ldi	r24, 0x00	; 0
}
     2c8:	08 95       	ret

000002ca <LCD_Command>:
	LCD_Command(0x01);  // Clear Display
	_delay_ms(2);
}


void LCD_Command(uint8_t cmd) {
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	uint8_t upper_nibble = (cmd & 0xF0);  // Get upper nibble
     2d0:	18 2f       	mov	r17, r24
     2d2:	10 7f       	andi	r17, 0xF0	; 240
	uint8_t lower_nibble = ((cmd << 4) & 0xF0);  // Get lower nibble
     2d4:	90 e1       	ldi	r25, 0x10	; 16
     2d6:	89 9f       	mul	r24, r25
     2d8:	e0 01       	movw	r28, r0
     2da:	11 24       	eor	r1, r1

	I2C_Start();
     2dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
	I2C_Write(LCD_ADDR << 1);
     2e0:	80 e4       	ldi	r24, 0x40	; 64
     2e2:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
	I2C_Write(0x00);  // Command mode
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>

	I2C_Write(upper_nibble | 0x04);  // Enable ON
     2ec:	81 2f       	mov	r24, r17
     2ee:	84 60       	ori	r24, 0x04	; 4
     2f0:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
	I2C_Write(upper_nibble);  // Enable OFF
     2f4:	81 2f       	mov	r24, r17
     2f6:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>

	I2C_Write(lower_nibble | 0x04);  // Enable ON
     2fa:	8c 2f       	mov	r24, r28
     2fc:	84 60       	ori	r24, 0x04	; 4
     2fe:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
	I2C_Write(lower_nibble);  // Enable OFF
     302:	8c 2f       	mov	r24, r28
     304:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>

	I2C_Stop();
     308:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
     30c:	83 ef       	ldi	r24, 0xF3	; 243
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <LCD_Command+0x46>
     314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_Command+0x4c>
     316:	00 00       	nop
	_delay_ms(2);
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	08 95       	ret

00000320 <LCD_Init>:
     320:	83 ed       	ldi	r24, 0xD3	; 211
     322:	90 e3       	ldi	r25, 0x30	; 48
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <LCD_Init+0x4>
     328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_Init+0xa>
     32a:	00 00       	nop
#include <util/delay.h>

void LCD_Init() {
	_delay_ms(50);  // LCD Power-up time

	LCD_Command(0x33);  // Initialize in 4-bit mode
     32c:	83 e3       	ldi	r24, 0x33	; 51
     32e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
	LCD_Command(0x32);  // Set to 4-bit mode
     332:	82 e3       	ldi	r24, 0x32	; 50
     334:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
	LCD_Command(0x28);  // Function Set: 4-bit, 2 lines, 5x7 dots
     338:	88 e2       	ldi	r24, 0x28	; 40
     33a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
	LCD_Command(0x0C);  // Display ON, Cursor OFF
     33e:	8c e0       	ldi	r24, 0x0C	; 12
     340:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
	LCD_Command(0x06);  // Entry mode: Auto Increment
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
	LCD_Command(0x01);  // Clear Display
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
     350:	83 ef       	ldi	r24, 0xF3	; 243
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <LCD_Init+0x34>
     358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_Init+0x3a>
     35a:	00 00       	nop
     35c:	08 95       	ret

0000035e <LCD_Print>:
	I2C_Stop();
	_delay_ms(2);
}


void LCD_Print(char *str) {
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	00 d0       	rcall	.+0      	; 0x368 <LCD_Print+0xa>
     368:	00 d0       	rcall	.+0      	; 0x36a <LCD_Print+0xc>
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	8c 01       	movw	r16, r24
	I2C_Start();
     370:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
	I2C_Write(LCD_ADDR << 1);
     374:	80 e4       	ldi	r24, 0x40	; 64
     376:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
	I2C_Write(0x40);  // Data mode
     37a:	80 e4       	ldi	r24, 0x40	; 64
     37c:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
	while (*str) {
     380:	1c c0       	rjmp	.+56     	; 0x3ba <LCD_Print+0x5c>
		uint8_t upper_nibble = (*str & 0xF0);
     382:	2a 81       	ldd	r18, Y+2	; 0x02
     384:	20 7f       	andi	r18, 0xF0	; 240
     386:	29 83       	std	Y+1, r18	; 0x01
		uint8_t lower_nibble = ((*str << 4) & 0xF0);
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	e0 e1       	ldi	r30, 0x10	; 16
     38c:	8e 9f       	mul	r24, r30
     38e:	c0 01       	movw	r24, r0
     390:	11 24       	eor	r1, r1
     392:	9c 83       	std	Y+4, r25	; 0x04
     394:	8b 83       	std	Y+3, r24	; 0x03

		I2C_Write(upper_nibble | 0x05);  // RS=1, Enable=1
     396:	82 2f       	mov	r24, r18
     398:	85 60       	ori	r24, 0x05	; 5
     39a:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
		I2C_Write(upper_nibble | 0x01);  // RS=1, Enable=0
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>

		I2C_Write(lower_nibble | 0x05);  // RS=1, Enable=1
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	85 60       	ori	r24, 0x05	; 5
     3aa:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
		I2C_Write(lower_nibble | 0x01);  // RS=1, Enable=0
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	81 60       	ori	r24, 0x01	; 1
     3b2:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>

		str++;
     3b6:	0f 5f       	subi	r16, 0xFF	; 255
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255

void LCD_Print(char *str) {
	I2C_Start();
	I2C_Write(LCD_ADDR << 1);
	I2C_Write(0x40);  // Data mode
	while (*str) {
     3ba:	f8 01       	movw	r30, r16
     3bc:	f0 81       	ld	r31, Z
     3be:	fa 83       	std	Y+2, r31	; 0x02
     3c0:	f1 11       	cpse	r31, r1
     3c2:	df cf       	rjmp	.-66     	; 0x382 <LCD_Print+0x24>
		I2C_Write(lower_nibble | 0x05);  // RS=1, Enable=1
		I2C_Write(lower_nibble | 0x01);  // RS=1, Enable=0

		str++;
	}
	I2C_Stop();
     3c4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
}
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <LCD_SetCursor>:


void LCD_SetCursor(uint8_t col, uint8_t row) {
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <LCD_SetCursor+0x6>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <LCD_SetCursor+0x8>
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
     3e6:	19 82       	std	Y+1, r1	; 0x01
     3e8:	90 e4       	ldi	r25, 0x40	; 64
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	94 e1       	ldi	r25, 0x14	; 20
     3ee:	9b 83       	std	Y+3, r25	; 0x03
     3f0:	94 e5       	ldi	r25, 0x54	; 84
     3f2:	9c 83       	std	Y+4, r25	; 0x04
	LCD_Command(0x80 | (col + row_offsets[row]));
     3f4:	e1 e0       	ldi	r30, 0x01	; 1
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	ec 0f       	add	r30, r28
     3fa:	fd 1f       	adc	r31, r29
     3fc:	e6 0f       	add	r30, r22
     3fe:	f1 1d       	adc	r31, r1
     400:	90 81       	ld	r25, Z
     402:	89 0f       	add	r24, r25
     404:	80 68       	ori	r24, 0x80	; 128
     406:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
}
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <LCD_Clear>:

void LCD_Clear() {
	LCD_Command(0x01);  // Clear display command
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Command>
     41e:	83 ef       	ldi	r24, 0xF3	; 243
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <LCD_Clear+0xa>
     426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_Clear+0x10>
     428:	00 00       	nop
     42a:	08 95       	ret

0000042c <Display_Time_And_Date>:
		if (pulseStart > timeout) return 0;  // Return 0 if timed out
		width++;
	}
	
	return width;
}
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	a9 97       	sbiw	r28, 0x29	; 41
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <RTC_GetTime>
     44c:	5c 83       	std	Y+4, r21	; 0x04
     44e:	6d 83       	std	Y+5, r22	; 0x05
     450:	7e 83       	std	Y+6, r23	; 0x06
     452:	8f 83       	std	Y+7, r24	; 0x07
     454:	1f 92       	push	r1
     456:	2f 93       	push	r18
     458:	1f 92       	push	r1
     45a:	3f 93       	push	r19
     45c:	1f 92       	push	r1
     45e:	4f 93       	push	r20
     460:	8b e1       	ldi	r24, 0x1B	; 27
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	9f 93       	push	r25
     466:	8f 93       	push	r24
     468:	7e 01       	movw	r14, r28
     46a:	88 e0       	ldi	r24, 0x08	; 8
     46c:	e8 0e       	add	r14, r24
     46e:	f1 1c       	adc	r15, r1
     470:	ff 92       	push	r15
     472:	ef 92       	push	r14
     474:	0e 94 2f 0a 	call	0x145e	; 0x145e <sprintf>
     478:	9d 81       	ldd	r25, Y+5	; 0x05
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	2f 81       	ldd	r18, Y+7	; 0x07
     47e:	2f 93       	push	r18
     480:	2e 81       	ldd	r18, Y+6	; 0x06
     482:	2f 93       	push	r18
     484:	1f 92       	push	r1
     486:	9f 93       	push	r25
     488:	1f 92       	push	r1
     48a:	8f 93       	push	r24
     48c:	80 e3       	ldi	r24, 0x30	; 48
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	8e 01       	movw	r16, r28
     496:	07 5e       	subi	r16, 0xE7	; 231
     498:	1f 4f       	sbci	r17, 0xFF	; 255
     49a:	1f 93       	push	r17
     49c:	0f 93       	push	r16
     49e:	0e 94 2f 0a 	call	0x145e	; 0x145e <sprintf>
     4a2:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
     4a6:	c7 01       	movw	r24, r14
     4a8:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     4b4:	c8 01       	movw	r24, r16
     4b6:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	a9 96       	adiw	r28, 0x29	; 41
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	08 95       	ret

000004de <Display_Alarm_Setting>:
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	60 97       	sbiw	r28, 0x10	; 16
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
     4fa:	85 e4       	ldi	r24, 0x45	; 69
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     50a:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <alarm_minute>
     50e:	1f 92       	push	r1
     510:	8f 93       	push	r24
     512:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <alarm_hour>
     516:	1f 92       	push	r1
     518:	8f 93       	push	r24
     51a:	86 e2       	ldi	r24, 0x26	; 38
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	8e 01       	movw	r16, r28
     524:	0f 5f       	subi	r16, 0xFF	; 255
     526:	1f 4f       	sbci	r17, 0xFF	; 255
     528:	1f 93       	push	r17
     52a:	0f 93       	push	r16
     52c:	0e 94 2f 0a 	call	0x145e	; 0x145e <sprintf>
     530:	c8 01       	movw	r24, r16
     532:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     53c:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	60 96       	adiw	r28, 0x10	; 16
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <Display_DateTime_Setting>:
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	61 97       	sbiw	r28, 0x11	; 17
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
     57c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <datetime_setting_field>
     580:	83 30       	cpi	r24, 0x03	; 3
     582:	70 f5       	brcc	.+92     	; 0x5e0 <Display_DateTime_Setting+0x80>
     584:	8a e0       	ldi	r24, 0x0A	; 10
     586:	e5 e5       	ldi	r30, 0x55	; 85
     588:	f1 e0       	ldi	r31, 0x01	; 1
     58a:	8e 01       	movw	r16, r28
     58c:	0f 5f       	subi	r16, 0xFF	; 255
     58e:	1f 4f       	sbci	r17, 0xFF	; 255
     590:	d8 01       	movw	r26, r16
     592:	01 90       	ld	r0, Z+
     594:	0d 92       	st	X+, r0
     596:	8a 95       	dec	r24
     598:	e1 f7       	brne	.-8      	; 0x592 <Display_DateTime_Setting+0x32>
     59a:	c8 01       	movw	r24, r16
     59c:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     5a0:	e3 ed       	ldi	r30, 0xD3	; 211
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	20 81       	ld	r18, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	1f 92       	push	r1
     5ac:	2f 93       	push	r18
     5ae:	1f 92       	push	r1
     5b0:	9f 93       	push	r25
     5b2:	1f 92       	push	r1
     5b4:	8f 93       	push	r24
     5b6:	81 e2       	ldi	r24, 0x21	; 33
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	1f 93       	push	r17
     5c0:	0f 93       	push	r16
     5c2:	0e 94 2f 0a 	call	0x145e	; 0x145e <sprintf>
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     5ce:	c8 01       	movw	r24, r16
     5d0:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	2e c0       	rjmp	.+92     	; 0x63c <Display_DateTime_Setting+0xdc>
     5e0:	8a e0       	ldi	r24, 0x0A	; 10
     5e2:	ef e5       	ldi	r30, 0x5F	; 95
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	8e 01       	movw	r16, r28
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	d8 01       	movw	r26, r16
     5ee:	01 90       	ld	r0, Z+
     5f0:	0d 92       	st	X+, r0
     5f2:	8a 95       	dec	r24
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <Display_DateTime_Setting+0x8e>
     5f6:	c8 01       	movw	r24, r16
     5f8:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     5fc:	e3 ed       	ldi	r30, 0xD3	; 211
     5fe:	f2 e0       	ldi	r31, 0x02	; 2
     600:	94 81       	ldd	r25, Z+4	; 0x04
     602:	83 81       	ldd	r24, Z+3	; 0x03
     604:	26 81       	ldd	r18, Z+6	; 0x06
     606:	2f 93       	push	r18
     608:	25 81       	ldd	r18, Z+5	; 0x05
     60a:	2f 93       	push	r18
     60c:	1f 92       	push	r1
     60e:	9f 93       	push	r25
     610:	1f 92       	push	r1
     612:	8f 93       	push	r24
     614:	86 e3       	ldi	r24, 0x36	; 54
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	1f 93       	push	r17
     61e:	0f 93       	push	r16
     620:	0e 94 2f 0a 	call	0x145e	; 0x145e <sprintf>
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     62c:	c8 01       	movw	r24, r16
     62e:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	61 96       	adiw	r28, 0x11	; 17
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	08 95       	ret

00000652 <Blink_Cursor>:
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	27 97       	sbiw	r28, 0x07	; 7
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <RTC_GetTime>
     66a:	29 83       	std	Y+1, r18	; 0x01
     66c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <mode>
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	09 f0       	breq	.+2      	; 0x676 <Blink_Cursor+0x24>
     674:	74 c0       	rjmp	.+232    	; 0x75e <Blink_Cursor+0x10c>
     676:	92 2f       	mov	r25, r18
     678:	91 70       	andi	r25, 0x01	; 1
     67a:	20 fd       	sbrc	r18, 0
     67c:	11 c0       	rjmp	.+34     	; 0x6a0 <Blink_Cursor+0x4e>
     67e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <cursor_blink_state>
     682:	81 11       	cpse	r24, r1
     684:	0d c0       	rjmp	.+26     	; 0x6a0 <Blink_Cursor+0x4e>
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     68c:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     690:	84 eb       	ldi	r24, 0xB4	; 180
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <cursor_blink_state>
     69e:	9a c0       	rjmp	.+308    	; 0x7d4 <Blink_Cursor+0x182>
     6a0:	99 23       	and	r25, r25
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <Blink_Cursor+0x54>
     6a4:	97 c0       	rjmp	.+302    	; 0x7d4 <Blink_Cursor+0x182>
     6a6:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <cursor_blink_state>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <Blink_Cursor+0x5e>
     6ae:	92 c0       	rjmp	.+292    	; 0x7d4 <Blink_Cursor+0x182>
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     6b6:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     6ba:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     6be:	81 11       	cpse	r24, r1
     6c0:	0e c0       	rjmp	.+28     	; 0x6de <Blink_Cursor+0x8c>
     6c2:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <alarm_hour>
     6c6:	9d ec       	ldi	r25, 0xCD	; 205
     6c8:	89 9f       	mul	r24, r25
     6ca:	81 2d       	mov	r24, r1
     6cc:	11 24       	eor	r1, r1
     6ce:	86 95       	lsr	r24
     6d0:	86 95       	lsr	r24
     6d2:	86 95       	lsr	r24
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	c0 96       	adiw	r24, 0x30	; 48
     6d8:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     6dc:	3d c0       	rjmp	.+122    	; 0x758 <Blink_Cursor+0x106>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	a9 f4       	brne	.+42     	; 0x70c <Blink_Cursor+0xba>
     6e2:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <alarm_hour>
     6e6:	8d ec       	ldi	r24, 0xCD	; 205
     6e8:	98 9f       	mul	r25, r24
     6ea:	81 2d       	mov	r24, r1
     6ec:	11 24       	eor	r1, r1
     6ee:	86 95       	lsr	r24
     6f0:	86 95       	lsr	r24
     6f2:	86 95       	lsr	r24
     6f4:	88 0f       	add	r24, r24
     6f6:	28 2f       	mov	r18, r24
     6f8:	22 0f       	add	r18, r18
     6fa:	22 0f       	add	r18, r18
     6fc:	82 0f       	add	r24, r18
     6fe:	98 1b       	sub	r25, r24
     700:	89 2f       	mov	r24, r25
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	c0 96       	adiw	r24, 0x30	; 48
     706:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     70a:	26 c0       	rjmp	.+76     	; 0x758 <Blink_Cursor+0x106>
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	71 f4       	brne	.+28     	; 0x72c <Blink_Cursor+0xda>
     710:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <alarm_minute>
     714:	9d ec       	ldi	r25, 0xCD	; 205
     716:	89 9f       	mul	r24, r25
     718:	81 2d       	mov	r24, r1
     71a:	11 24       	eor	r1, r1
     71c:	86 95       	lsr	r24
     71e:	86 95       	lsr	r24
     720:	86 95       	lsr	r24
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	c0 96       	adiw	r24, 0x30	; 48
     726:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     72a:	16 c0       	rjmp	.+44     	; 0x758 <Blink_Cursor+0x106>
     72c:	84 30       	cpi	r24, 0x04	; 4
     72e:	a1 f4       	brne	.+40     	; 0x758 <Blink_Cursor+0x106>
     730:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <alarm_minute>
     734:	8d ec       	ldi	r24, 0xCD	; 205
     736:	98 9f       	mul	r25, r24
     738:	81 2d       	mov	r24, r1
     73a:	11 24       	eor	r1, r1
     73c:	86 95       	lsr	r24
     73e:	86 95       	lsr	r24
     740:	86 95       	lsr	r24
     742:	88 0f       	add	r24, r24
     744:	28 2f       	mov	r18, r24
     746:	22 0f       	add	r18, r18
     748:	22 0f       	add	r18, r18
     74a:	82 0f       	add	r24, r18
     74c:	98 1b       	sub	r25, r24
     74e:	89 2f       	mov	r24, r25
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	c0 96       	adiw	r24, 0x30	; 48
     754:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     758:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <cursor_blink_state>
     75c:	3b c0       	rjmp	.+118    	; 0x7d4 <Blink_Cursor+0x182>
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	c9 f5       	brne	.+114    	; 0x7d4 <Blink_Cursor+0x182>
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	98 2f       	mov	r25, r24
     766:	91 70       	andi	r25, 0x01	; 1
     768:	80 fd       	sbrc	r24, 0
     76a:	2a c0       	rjmp	.+84     	; 0x7c0 <Blink_Cursor+0x16e>
     76c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <cursor_blink_state>
     770:	81 11       	cpse	r24, r1
     772:	26 c0       	rjmp	.+76     	; 0x7c0 <Blink_Cursor+0x16e>
     774:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <datetime_setting_field>
     778:	88 23       	and	r24, r24
     77a:	61 f0       	breq	.+24     	; 0x794 <Blink_Cursor+0x142>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	61 f0       	breq	.+24     	; 0x798 <Blink_Cursor+0x146>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	61 f0       	breq	.+24     	; 0x79c <Blink_Cursor+0x14a>
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	61 f0       	breq	.+24     	; 0x7a0 <Blink_Cursor+0x14e>
     788:	84 30       	cpi	r24, 0x04	; 4
     78a:	61 f0       	breq	.+24     	; 0x7a4 <Blink_Cursor+0x152>
     78c:	85 30       	cpi	r24, 0x05	; 5
     78e:	61 f0       	breq	.+24     	; 0x7a8 <Blink_Cursor+0x156>
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0b c0       	rjmp	.+22     	; 0x7aa <Blink_Cursor+0x158>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	09 c0       	rjmp	.+18     	; 0x7aa <Blink_Cursor+0x158>
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	07 c0       	rjmp	.+14     	; 0x7aa <Blink_Cursor+0x158>
     79c:	86 e0       	ldi	r24, 0x06	; 6
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <Blink_Cursor+0x158>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <Blink_Cursor+0x158>
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <Blink_Cursor+0x158>
     7a8:	86 e0       	ldi	r24, 0x06	; 6
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     7b0:	83 eb       	ldi	r24, 0xB3	; 179
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <cursor_blink_state>
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <Blink_Cursor+0x182>
     7c0:	99 23       	and	r25, r25
     7c2:	41 f0       	breq	.+16     	; 0x7d4 <Blink_Cursor+0x182>
     7c4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <cursor_blink_state>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	21 f4       	brne	.+8      	; 0x7d4 <Blink_Cursor+0x182>
     7cc:	0e 94 b0 02 	call	0x560	; 0x560 <Display_DateTime_Setting>
     7d0:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <cursor_blink_state>
     7d4:	27 96       	adiw	r28, 0x07	; 7
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <Alarm_Input_Handler>:
     7e6:	90 ed       	ldi	r25, 0xD0	; 208
     7e8:	98 0f       	add	r25, r24
     7ea:	9a 30       	cpi	r25, 0x0A	; 10
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <Alarm_Input_Handler+0xa>
     7ee:	6e c0       	rjmp	.+220    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     7f0:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     7f4:	81 11       	cpse	r24, r1
     7f6:	1b c0       	rjmp	.+54     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     7f8:	93 30       	cpi	r25, 0x03	; 3
     7fa:	08 f0       	brcs	.+2      	; 0x7fe <Alarm_Input_Handler+0x18>
     7fc:	64 c0       	rjmp	.+200    	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     7fe:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <alarm_hour>
     802:	8d ec       	ldi	r24, 0xCD	; 205
     804:	28 9f       	mul	r18, r24
     806:	81 2d       	mov	r24, r1
     808:	11 24       	eor	r1, r1
     80a:	86 95       	lsr	r24
     80c:	86 95       	lsr	r24
     80e:	86 95       	lsr	r24
     810:	88 0f       	add	r24, r24
     812:	38 2f       	mov	r19, r24
     814:	33 0f       	add	r19, r19
     816:	33 0f       	add	r19, r19
     818:	83 0f       	add	r24, r19
     81a:	28 1b       	sub	r18, r24
     81c:	99 0f       	add	r25, r25
     81e:	89 2f       	mov	r24, r25
     820:	88 0f       	add	r24, r24
     822:	88 0f       	add	r24, r24
     824:	98 0f       	add	r25, r24
     826:	92 0f       	add	r25, r18
     828:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <alarm_hour>
     82c:	4c c0       	rjmp	.+152    	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	d9 f4       	brne	.+54     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     832:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <alarm_hour>
     836:	2c ee       	ldi	r18, 0xEC	; 236
     838:	28 0f       	add	r18, r24
     83a:	2a 30       	cpi	r18, 0x0A	; 10
     83c:	10 f4       	brcc	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83e:	94 30       	cpi	r25, 0x04	; 4
     840:	18 f0       	brcs	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     842:	84 31       	cpi	r24, 0x14	; 20
     844:	08 f0       	brcs	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     846:	3f c0       	rjmp	.+126    	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     848:	2d ec       	ldi	r18, 0xCD	; 205
     84a:	82 9f       	mul	r24, r18
     84c:	81 2d       	mov	r24, r1
     84e:	11 24       	eor	r1, r1
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	86 95       	lsr	r24
     856:	88 0f       	add	r24, r24
     858:	28 2f       	mov	r18, r24
     85a:	22 0f       	add	r18, r18
     85c:	22 0f       	add	r18, r18
     85e:	82 0f       	add	r24, r18
     860:	98 0f       	add	r25, r24
     862:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <alarm_hour>
     866:	2f c0       	rjmp	.+94     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     868:	83 30       	cpi	r24, 0x03	; 3
     86a:	d1 f4       	brne	.+52     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     86c:	96 30       	cpi	r25, 0x06	; 6
     86e:	58 f5       	brcc	.+86     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     870:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <alarm_minute>
     874:	8d ec       	ldi	r24, 0xCD	; 205
     876:	28 9f       	mul	r18, r24
     878:	81 2d       	mov	r24, r1
     87a:	11 24       	eor	r1, r1
     87c:	86 95       	lsr	r24
     87e:	86 95       	lsr	r24
     880:	86 95       	lsr	r24
     882:	88 0f       	add	r24, r24
     884:	38 2f       	mov	r19, r24
     886:	33 0f       	add	r19, r19
     888:	33 0f       	add	r19, r19
     88a:	83 0f       	add	r24, r19
     88c:	28 1b       	sub	r18, r24
     88e:	99 0f       	add	r25, r25
     890:	89 2f       	mov	r24, r25
     892:	88 0f       	add	r24, r24
     894:	88 0f       	add	r24, r24
     896:	98 0f       	add	r25, r24
     898:	92 0f       	add	r25, r18
     89a:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <alarm_minute>
     89e:	13 c0       	rjmp	.+38     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	89 f4       	brne	.+34     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     8a4:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <alarm_minute>
     8a8:	2d ec       	ldi	r18, 0xCD	; 205
     8aa:	82 9f       	mul	r24, r18
     8ac:	81 2d       	mov	r24, r1
     8ae:	11 24       	eor	r1, r1
     8b0:	86 95       	lsr	r24
     8b2:	86 95       	lsr	r24
     8b4:	86 95       	lsr	r24
     8b6:	88 0f       	add	r24, r24
     8b8:	28 2f       	mov	r18, r24
     8ba:	22 0f       	add	r18, r18
     8bc:	22 0f       	add	r18, r18
     8be:	82 0f       	add	r24, r18
     8c0:	98 0f       	add	r25, r24
     8c2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <alarm_minute>
     8c6:	0e 94 6f 02 	call	0x4de	; 0x4de <Display_Alarm_Setting>
     8ca:	08 95       	ret
     8cc:	8d 32       	cpi	r24, 0x2D	; 45
     8ce:	b1 f4       	brne	.+44     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8d0:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     8d4:	88 23       	and	r24, r24
     8d6:	09 f4       	brne	.+2      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8d8:	44 c0       	rjmp	.+136    	; 0x962 <__stack+0x63>
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <cursor_position>
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
     8e6:	81 50       	subi	r24, 0x01	; 1
     8e8:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <cursor_position>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     8f2:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     8f6:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <cursor_blink_state>
     8fa:	08 95       	ret
     8fc:	8b 32       	cpi	r24, 0x2B	; 43
     8fe:	a9 f4       	brne	.+42     	; 0x92a <__stack+0x2b>
     900:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     904:	84 30       	cpi	r24, 0x04	; 4
     906:	68 f5       	brcc	.+90     	; 0x962 <__stack+0x63>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	21 f4       	brne	.+8      	; 0x914 <__stack+0x15>
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <cursor_position>
     912:	03 c0       	rjmp	.+6      	; 0x91a <__stack+0x1b>
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <cursor_position>
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <cursor_position>
     920:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     924:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <cursor_blink_state>
     928:	08 95       	ret
     92a:	8d 33       	cpi	r24, 0x3D	; 61
     92c:	d1 f4       	brne	.+52     	; 0x962 <__stack+0x63>
     92e:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
     932:	88 23       	and	r24, r24
     934:	19 f0       	breq	.+6      	; 0x93c <__stack+0x3d>
     936:	0e 94 b0 00 	call	0x160	; 0x160 <Buzzer_Off>
     93a:	08 95       	ret
     93c:	60 91 bf 02 	lds	r22, 0x02BF	; 0x8002bf <alarm_minute>
     940:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <alarm_hour>
     944:	0e 94 63 00 	call	0xc6	; 0xc6 <Alarm_Set>
     948:	2f e7       	ldi	r18, 0x7F	; 127
     94a:	8a e1       	ldi	r24, 0x1A	; 26
     94c:	96 e0       	ldi	r25, 0x06	; 6
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	90 40       	sbci	r25, 0x00	; 0
     954:	e1 f7       	brne	.-8      	; 0x94e <__stack+0x4f>
     956:	00 c0       	rjmp	.+0      	; 0x958 <__stack+0x59>
     958:	00 00       	nop
     95a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <mode>
     95e:	0e 94 16 02 	call	0x42c	; 0x42c <Display_Time_And_Date>
     962:	08 95       	ret

00000964 <DateTime_Input_Handler>:
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	8d 33       	cpi	r24, 0x3D	; 61
     96e:	c1 f4       	brne	.+48     	; 0x9a0 <DateTime_Input_Handler+0x3c>
     970:	83 ed       	ldi	r24, 0xD3	; 211
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 c1 09 	call	0x1382	; 0x1382 <RTC_SetTime>
     978:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
     97c:	89 e6       	ldi	r24, 0x69	; 105
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     984:	2f e7       	ldi	r18, 0x7F	; 127
     986:	8a e1       	ldi	r24, 0x1A	; 26
     988:	96 e0       	ldi	r25, 0x06	; 6
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	90 40       	sbci	r25, 0x00	; 0
     990:	e1 f7       	brne	.-8      	; 0x98a <DateTime_Input_Handler+0x26>
     992:	00 c0       	rjmp	.+0      	; 0x994 <DateTime_Input_Handler+0x30>
     994:	00 00       	nop
     996:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <mode>
     99a:	0e 94 16 02 	call	0x42c	; 0x42c <Display_Time_And_Date>
     99e:	8d c1       	rjmp	.+794    	; 0xcba <DateTime_Input_Handler+0x356>
     9a0:	8b 32       	cpi	r24, 0x2B	; 43
     9a2:	69 f4       	brne	.+26     	; 0x9be <DateTime_Input_Handler+0x5a>
     9a4:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <datetime_setting_field>
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	66 e0       	ldi	r22, 0x06	; 6
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__divmodhi4>
     9b4:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <datetime_setting_field>
     9b8:	0e 94 b0 02 	call	0x560	; 0x560 <Display_DateTime_Setting>
     9bc:	7e c1       	rjmp	.+764    	; 0xcba <DateTime_Input_Handler+0x356>
     9be:	8d 32       	cpi	r24, 0x2D	; 45
     9c0:	71 f4       	brne	.+28     	; 0x9de <DateTime_Input_Handler+0x7a>
     9c2:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <datetime_setting_field>
     9c6:	81 11       	cpse	r24, r1
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <DateTime_Input_Handler+0x6e>
     9ca:	85 e0       	ldi	r24, 0x05	; 5
     9cc:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <datetime_setting_field>
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <DateTime_Input_Handler+0x74>
     9d2:	81 50       	subi	r24, 0x01	; 1
     9d4:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <datetime_setting_field>
     9d8:	0e 94 b0 02 	call	0x560	; 0x560 <Display_DateTime_Setting>
     9dc:	6e c1       	rjmp	.+732    	; 0xcba <DateTime_Input_Handler+0x356>
     9de:	80 53       	subi	r24, 0x30	; 48
     9e0:	8a 30       	cpi	r24, 0x0A	; 10
     9e2:	08 f0       	brcs	.+2      	; 0x9e6 <DateTime_Input_Handler+0x82>
     9e4:	6a c1       	rjmp	.+724    	; 0xcba <DateTime_Input_Handler+0x356>
     9e6:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <datetime_setting_field>
     9ea:	92 30       	cpi	r25, 0x02	; 2
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <DateTime_Input_Handler+0x8c>
     9ee:	7e c0       	rjmp	.+252    	; 0xaec <DateTime_Input_Handler+0x188>
     9f0:	30 f4       	brcc	.+12     	; 0x9fe <DateTime_Input_Handler+0x9a>
     9f2:	99 23       	and	r25, r25
     9f4:	69 f0       	breq	.+26     	; 0xa10 <DateTime_Input_Handler+0xac>
     9f6:	91 30       	cpi	r25, 0x01	; 1
     9f8:	09 f4       	brne	.+2      	; 0x9fc <DateTime_Input_Handler+0x98>
     9fa:	41 c0       	rjmp	.+130    	; 0xa7e <DateTime_Input_Handler+0x11a>
     9fc:	5c c1       	rjmp	.+696    	; 0xcb6 <DateTime_Input_Handler+0x352>
     9fe:	94 30       	cpi	r25, 0x04	; 4
     a00:	09 f4       	brne	.+2      	; 0xa04 <DateTime_Input_Handler+0xa0>
     a02:	e2 c0       	rjmp	.+452    	; 0xbc8 <DateTime_Input_Handler+0x264>
     a04:	08 f4       	brcc	.+2      	; 0xa08 <DateTime_Input_Handler+0xa4>
     a06:	a9 c0       	rjmp	.+338    	; 0xb5a <DateTime_Input_Handler+0x1f6>
     a08:	95 30       	cpi	r25, 0x05	; 5
     a0a:	09 f4       	brne	.+2      	; 0xa0e <DateTime_Input_Handler+0xaa>
     a0c:	14 c1       	rjmp	.+552    	; 0xc36 <DateTime_Input_Handler+0x2d2>
     a0e:	53 c1       	rjmp	.+678    	; 0xcb6 <DateTime_Input_Handler+0x352>
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	e8 f4       	brcc	.+58     	; 0xa4e <DateTime_Input_Handler+0xea>
     a14:	88 0f       	add	r24, r24
     a16:	98 2f       	mov	r25, r24
     a18:	99 0f       	add	r25, r25
     a1a:	99 0f       	add	r25, r25
     a1c:	89 0f       	add	r24, r25
     a1e:	9d ec       	ldi	r25, 0xCD	; 205
     a20:	89 9f       	mul	r24, r25
     a22:	91 2d       	mov	r25, r1
     a24:	11 24       	eor	r1, r1
     a26:	96 95       	lsr	r25
     a28:	96 95       	lsr	r25
     a2a:	96 95       	lsr	r25
     a2c:	99 0f       	add	r25, r25
     a2e:	29 2f       	mov	r18, r25
     a30:	22 0f       	add	r18, r18
     a32:	22 0f       	add	r18, r18
     a34:	92 0f       	add	r25, r18
     a36:	28 2f       	mov	r18, r24
     a38:	29 1b       	sub	r18, r25
     a3a:	82 0f       	add	r24, r18
     a3c:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <new_time+0x2>
     a40:	88 31       	cpi	r24, 0x18	; 24
     a42:	08 f4       	brcc	.+2      	; 0xa46 <DateTime_Input_Handler+0xe2>
     a44:	38 c1       	rjmp	.+624    	; 0xcb6 <DateTime_Input_Handler+0x352>
     a46:	87 e1       	ldi	r24, 0x17	; 23
     a48:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <new_time+0x2>
     a4c:	34 c1       	rjmp	.+616    	; 0xcb6 <DateTime_Input_Handler+0x352>
     a4e:	e3 ed       	ldi	r30, 0xD3	; 211
     a50:	f2 e0       	ldi	r31, 0x02	; 2
     a52:	92 81       	ldd	r25, Z+2	; 0x02
     a54:	2d ec       	ldi	r18, 0xCD	; 205
     a56:	92 9f       	mul	r25, r18
     a58:	91 2d       	mov	r25, r1
     a5a:	11 24       	eor	r1, r1
     a5c:	96 95       	lsr	r25
     a5e:	96 95       	lsr	r25
     a60:	96 95       	lsr	r25
     a62:	99 0f       	add	r25, r25
     a64:	29 2f       	mov	r18, r25
     a66:	22 0f       	add	r18, r18
     a68:	22 0f       	add	r18, r18
     a6a:	92 0f       	add	r25, r18
     a6c:	89 0f       	add	r24, r25
     a6e:	82 83       	std	Z+2, r24	; 0x02
     a70:	88 31       	cpi	r24, 0x18	; 24
     a72:	08 f4       	brcc	.+2      	; 0xa76 <DateTime_Input_Handler+0x112>
     a74:	20 c1       	rjmp	.+576    	; 0xcb6 <DateTime_Input_Handler+0x352>
     a76:	87 e1       	ldi	r24, 0x17	; 23
     a78:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <new_time+0x2>
     a7c:	1c c1       	rjmp	.+568    	; 0xcb6 <DateTime_Input_Handler+0x352>
     a7e:	86 30       	cpi	r24, 0x06	; 6
     a80:	e8 f4       	brcc	.+58     	; 0xabc <DateTime_Input_Handler+0x158>
     a82:	88 0f       	add	r24, r24
     a84:	98 2f       	mov	r25, r24
     a86:	99 0f       	add	r25, r25
     a88:	99 0f       	add	r25, r25
     a8a:	89 0f       	add	r24, r25
     a8c:	9d ec       	ldi	r25, 0xCD	; 205
     a8e:	89 9f       	mul	r24, r25
     a90:	91 2d       	mov	r25, r1
     a92:	11 24       	eor	r1, r1
     a94:	96 95       	lsr	r25
     a96:	96 95       	lsr	r25
     a98:	96 95       	lsr	r25
     a9a:	99 0f       	add	r25, r25
     a9c:	29 2f       	mov	r18, r25
     a9e:	22 0f       	add	r18, r18
     aa0:	22 0f       	add	r18, r18
     aa2:	92 0f       	add	r25, r18
     aa4:	28 2f       	mov	r18, r24
     aa6:	29 1b       	sub	r18, r25
     aa8:	82 0f       	add	r24, r18
     aaa:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <new_time+0x1>
     aae:	8c 33       	cpi	r24, 0x3C	; 60
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <DateTime_Input_Handler+0x150>
     ab2:	01 c1       	rjmp	.+514    	; 0xcb6 <DateTime_Input_Handler+0x352>
     ab4:	8b e3       	ldi	r24, 0x3B	; 59
     ab6:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <new_time+0x1>
     aba:	fd c0       	rjmp	.+506    	; 0xcb6 <DateTime_Input_Handler+0x352>
     abc:	e3 ed       	ldi	r30, 0xD3	; 211
     abe:	f2 e0       	ldi	r31, 0x02	; 2
     ac0:	91 81       	ldd	r25, Z+1	; 0x01
     ac2:	2d ec       	ldi	r18, 0xCD	; 205
     ac4:	92 9f       	mul	r25, r18
     ac6:	91 2d       	mov	r25, r1
     ac8:	11 24       	eor	r1, r1
     aca:	96 95       	lsr	r25
     acc:	96 95       	lsr	r25
     ace:	96 95       	lsr	r25
     ad0:	99 0f       	add	r25, r25
     ad2:	29 2f       	mov	r18, r25
     ad4:	22 0f       	add	r18, r18
     ad6:	22 0f       	add	r18, r18
     ad8:	92 0f       	add	r25, r18
     ada:	89 0f       	add	r24, r25
     adc:	81 83       	std	Z+1, r24	; 0x01
     ade:	8c 33       	cpi	r24, 0x3C	; 60
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <DateTime_Input_Handler+0x180>
     ae2:	e9 c0       	rjmp	.+466    	; 0xcb6 <DateTime_Input_Handler+0x352>
     ae4:	8b e3       	ldi	r24, 0x3B	; 59
     ae6:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <new_time+0x1>
     aea:	e5 c0       	rjmp	.+458    	; 0xcb6 <DateTime_Input_Handler+0x352>
     aec:	86 30       	cpi	r24, 0x06	; 6
     aee:	e8 f4       	brcc	.+58     	; 0xb2a <DateTime_Input_Handler+0x1c6>
     af0:	88 0f       	add	r24, r24
     af2:	98 2f       	mov	r25, r24
     af4:	99 0f       	add	r25, r25
     af6:	99 0f       	add	r25, r25
     af8:	89 0f       	add	r24, r25
     afa:	9d ec       	ldi	r25, 0xCD	; 205
     afc:	89 9f       	mul	r24, r25
     afe:	91 2d       	mov	r25, r1
     b00:	11 24       	eor	r1, r1
     b02:	96 95       	lsr	r25
     b04:	96 95       	lsr	r25
     b06:	96 95       	lsr	r25
     b08:	99 0f       	add	r25, r25
     b0a:	29 2f       	mov	r18, r25
     b0c:	22 0f       	add	r18, r18
     b0e:	22 0f       	add	r18, r18
     b10:	92 0f       	add	r25, r18
     b12:	28 2f       	mov	r18, r24
     b14:	29 1b       	sub	r18, r25
     b16:	82 0f       	add	r24, r18
     b18:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <new_time>
     b1c:	8c 33       	cpi	r24, 0x3C	; 60
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <DateTime_Input_Handler+0x1be>
     b20:	ca c0       	rjmp	.+404    	; 0xcb6 <DateTime_Input_Handler+0x352>
     b22:	8b e3       	ldi	r24, 0x3B	; 59
     b24:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <new_time>
     b28:	c6 c0       	rjmp	.+396    	; 0xcb6 <DateTime_Input_Handler+0x352>
     b2a:	e3 ed       	ldi	r30, 0xD3	; 211
     b2c:	f2 e0       	ldi	r31, 0x02	; 2
     b2e:	90 81       	ld	r25, Z
     b30:	2d ec       	ldi	r18, 0xCD	; 205
     b32:	92 9f       	mul	r25, r18
     b34:	91 2d       	mov	r25, r1
     b36:	11 24       	eor	r1, r1
     b38:	96 95       	lsr	r25
     b3a:	96 95       	lsr	r25
     b3c:	96 95       	lsr	r25
     b3e:	99 0f       	add	r25, r25
     b40:	29 2f       	mov	r18, r25
     b42:	22 0f       	add	r18, r18
     b44:	22 0f       	add	r18, r18
     b46:	92 0f       	add	r25, r18
     b48:	89 0f       	add	r24, r25
     b4a:	80 83       	st	Z, r24
     b4c:	8c 33       	cpi	r24, 0x3C	; 60
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <DateTime_Input_Handler+0x1ee>
     b50:	b2 c0       	rjmp	.+356    	; 0xcb6 <DateTime_Input_Handler+0x352>
     b52:	8b e3       	ldi	r24, 0x3B	; 59
     b54:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <new_time>
     b58:	ae c0       	rjmp	.+348    	; 0xcb6 <DateTime_Input_Handler+0x352>
     b5a:	84 30       	cpi	r24, 0x04	; 4
     b5c:	e8 f4       	brcc	.+58     	; 0xb98 <DateTime_Input_Handler+0x234>
     b5e:	88 0f       	add	r24, r24
     b60:	98 2f       	mov	r25, r24
     b62:	99 0f       	add	r25, r25
     b64:	99 0f       	add	r25, r25
     b66:	89 0f       	add	r24, r25
     b68:	9d ec       	ldi	r25, 0xCD	; 205
     b6a:	89 9f       	mul	r24, r25
     b6c:	91 2d       	mov	r25, r1
     b6e:	11 24       	eor	r1, r1
     b70:	96 95       	lsr	r25
     b72:	96 95       	lsr	r25
     b74:	96 95       	lsr	r25
     b76:	99 0f       	add	r25, r25
     b78:	29 2f       	mov	r18, r25
     b7a:	22 0f       	add	r18, r18
     b7c:	22 0f       	add	r18, r18
     b7e:	92 0f       	add	r25, r18
     b80:	28 2f       	mov	r18, r24
     b82:	29 1b       	sub	r18, r25
     b84:	82 0f       	add	r24, r18
     b86:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <new_time+0x3>
     b8a:	80 32       	cpi	r24, 0x20	; 32
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <DateTime_Input_Handler+0x22c>
     b8e:	93 c0       	rjmp	.+294    	; 0xcb6 <DateTime_Input_Handler+0x352>
     b90:	8f e1       	ldi	r24, 0x1F	; 31
     b92:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <new_time+0x3>
     b96:	8f c0       	rjmp	.+286    	; 0xcb6 <DateTime_Input_Handler+0x352>
     b98:	e3 ed       	ldi	r30, 0xD3	; 211
     b9a:	f2 e0       	ldi	r31, 0x02	; 2
     b9c:	93 81       	ldd	r25, Z+3	; 0x03
     b9e:	2d ec       	ldi	r18, 0xCD	; 205
     ba0:	92 9f       	mul	r25, r18
     ba2:	91 2d       	mov	r25, r1
     ba4:	11 24       	eor	r1, r1
     ba6:	96 95       	lsr	r25
     ba8:	96 95       	lsr	r25
     baa:	96 95       	lsr	r25
     bac:	99 0f       	add	r25, r25
     bae:	29 2f       	mov	r18, r25
     bb0:	22 0f       	add	r18, r18
     bb2:	22 0f       	add	r18, r18
     bb4:	92 0f       	add	r25, r18
     bb6:	89 0f       	add	r24, r25
     bb8:	83 83       	std	Z+3, r24	; 0x03
     bba:	80 32       	cpi	r24, 0x20	; 32
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <DateTime_Input_Handler+0x25c>
     bbe:	7b c0       	rjmp	.+246    	; 0xcb6 <DateTime_Input_Handler+0x352>
     bc0:	8f e1       	ldi	r24, 0x1F	; 31
     bc2:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <new_time+0x3>
     bc6:	77 c0       	rjmp	.+238    	; 0xcb6 <DateTime_Input_Handler+0x352>
     bc8:	82 30       	cpi	r24, 0x02	; 2
     bca:	e8 f4       	brcc	.+58     	; 0xc06 <DateTime_Input_Handler+0x2a2>
     bcc:	88 0f       	add	r24, r24
     bce:	98 2f       	mov	r25, r24
     bd0:	99 0f       	add	r25, r25
     bd2:	99 0f       	add	r25, r25
     bd4:	89 0f       	add	r24, r25
     bd6:	9d ec       	ldi	r25, 0xCD	; 205
     bd8:	89 9f       	mul	r24, r25
     bda:	91 2d       	mov	r25, r1
     bdc:	11 24       	eor	r1, r1
     bde:	96 95       	lsr	r25
     be0:	96 95       	lsr	r25
     be2:	96 95       	lsr	r25
     be4:	99 0f       	add	r25, r25
     be6:	29 2f       	mov	r18, r25
     be8:	22 0f       	add	r18, r18
     bea:	22 0f       	add	r18, r18
     bec:	92 0f       	add	r25, r18
     bee:	28 2f       	mov	r18, r24
     bf0:	29 1b       	sub	r18, r25
     bf2:	82 0f       	add	r24, r18
     bf4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <new_time+0x4>
     bf8:	8d 30       	cpi	r24, 0x0D	; 13
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <DateTime_Input_Handler+0x29a>
     bfc:	5c c0       	rjmp	.+184    	; 0xcb6 <DateTime_Input_Handler+0x352>
     bfe:	8c e0       	ldi	r24, 0x0C	; 12
     c00:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <new_time+0x4>
     c04:	58 c0       	rjmp	.+176    	; 0xcb6 <DateTime_Input_Handler+0x352>
     c06:	e3 ed       	ldi	r30, 0xD3	; 211
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	94 81       	ldd	r25, Z+4	; 0x04
     c0c:	2d ec       	ldi	r18, 0xCD	; 205
     c0e:	92 9f       	mul	r25, r18
     c10:	91 2d       	mov	r25, r1
     c12:	11 24       	eor	r1, r1
     c14:	96 95       	lsr	r25
     c16:	96 95       	lsr	r25
     c18:	96 95       	lsr	r25
     c1a:	99 0f       	add	r25, r25
     c1c:	29 2f       	mov	r18, r25
     c1e:	22 0f       	add	r18, r18
     c20:	22 0f       	add	r18, r18
     c22:	92 0f       	add	r25, r18
     c24:	89 0f       	add	r24, r25
     c26:	84 83       	std	Z+4, r24	; 0x04
     c28:	8d 30       	cpi	r24, 0x0D	; 13
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <DateTime_Input_Handler+0x2ca>
     c2c:	44 c0       	rjmp	.+136    	; 0xcb6 <DateTime_Input_Handler+0x352>
     c2e:	8c e0       	ldi	r24, 0x0C	; 12
     c30:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <new_time+0x4>
     c34:	40 c0       	rjmp	.+128    	; 0xcb6 <DateTime_Input_Handler+0x352>
     c36:	c8 ee       	ldi	r28, 0xE8	; 232
     c38:	d3 e0       	ldi	r29, 0x03	; 3
     c3a:	8c 9f       	mul	r24, r28
     c3c:	80 01       	movw	r16, r0
     c3e:	8d 9f       	mul	r24, r29
     c40:	10 0d       	add	r17, r0
     c42:	11 24       	eor	r1, r1
     c44:	e3 ed       	ldi	r30, 0xD3	; 211
     c46:	f2 e0       	ldi	r31, 0x02	; 2
     c48:	45 81       	ldd	r20, Z+5	; 0x05
     c4a:	56 81       	ldd	r21, Z+6	; 0x06
     c4c:	9a 01       	movw	r18, r20
     c4e:	36 95       	lsr	r19
     c50:	27 95       	ror	r18
     c52:	36 95       	lsr	r19
     c54:	27 95       	ror	r18
     c56:	36 95       	lsr	r19
     c58:	27 95       	ror	r18
     c5a:	a5 ec       	ldi	r26, 0xC5	; 197
     c5c:	b0 e2       	ldi	r27, 0x20	; 32
     c5e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__umulhisi3>
     c62:	92 95       	swap	r25
     c64:	82 95       	swap	r24
     c66:	8f 70       	andi	r24, 0x0F	; 15
     c68:	89 27       	eor	r24, r25
     c6a:	9f 70       	andi	r25, 0x0F	; 15
     c6c:	89 27       	eor	r24, r25
     c6e:	8c 9f       	mul	r24, r28
     c70:	90 01       	movw	r18, r0
     c72:	8d 9f       	mul	r24, r29
     c74:	30 0d       	add	r19, r0
     c76:	9c 9f       	mul	r25, r28
     c78:	30 0d       	add	r19, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	ca 01       	movw	r24, r20
     c7e:	82 1b       	sub	r24, r18
     c80:	93 0b       	sbc	r25, r19
     c82:	80 0f       	add	r24, r16
     c84:	91 1f       	adc	r25, r17
     c86:	96 83       	std	Z+6, r25	; 0x06
     c88:	85 83       	std	Z+5, r24	; 0x05
     c8a:	80 3d       	cpi	r24, 0xD0	; 208
     c8c:	97 40       	sbci	r25, 0x07	; 7
     c8e:	30 f4       	brcc	.+12     	; 0xc9c <DateTime_Input_Handler+0x338>
     c90:	80 ed       	ldi	r24, 0xD0	; 208
     c92:	97 e0       	ldi	r25, 0x07	; 7
     c94:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <new_time+0x6>
     c98:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <new_time+0x5>
     c9c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <new_time+0x5>
     ca0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <new_time+0x6>
     ca4:	84 33       	cpi	r24, 0x34	; 52
     ca6:	98 40       	sbci	r25, 0x08	; 8
     ca8:	30 f0       	brcs	.+12     	; 0xcb6 <DateTime_Input_Handler+0x352>
     caa:	83 e3       	ldi	r24, 0x33	; 51
     cac:	98 e0       	ldi	r25, 0x08	; 8
     cae:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <new_time+0x6>
     cb2:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <new_time+0x5>
     cb6:	0e 94 b0 02 	call	0x560	; 0x560 <Display_DateTime_Setting>
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <Clear_Expression>:
     cc4:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <expr_index>
     cc8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <expression>
     ccc:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <result_shown>
     cd0:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
     cd4:	88 e7       	ldi	r24, 0x78	; 120
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     ce4:	08 95       	ret

00000ce6 <Evaluate_Expression>:
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <Evaluate_Expression+0xa>
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <Evaluate_Expression+0xc>
     cf2:	1f 92       	push	r1
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	1a 82       	std	Y+2, r1	; 0x02
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	1c 82       	std	Y+4, r1	; 0x04
     cfe:	1b 82       	std	Y+3, r1	; 0x03
     d00:	1d 82       	std	Y+5, r1	; 0x05
     d02:	9e 01       	movw	r18, r28
     d04:	2d 5f       	subi	r18, 0xFD	; 253
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	3f 93       	push	r19
     d0a:	2f 93       	push	r18
     d0c:	2e 5f       	subi	r18, 0xFE	; 254
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	3f 93       	push	r19
     d12:	2f 93       	push	r18
     d14:	24 50       	subi	r18, 0x04	; 4
     d16:	31 09       	sbc	r19, r1
     d18:	3f 93       	push	r19
     d1a:	2f 93       	push	r18
     d1c:	28 e8       	ldi	r18, 0x88	; 136
     d1e:	31 e0       	ldi	r19, 0x01	; 1
     d20:	3f 93       	push	r19
     d22:	2f 93       	push	r18
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <sscanf>
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	8b 32       	cpi	r24, 0x2B	; 43
     d3a:	49 f0       	breq	.+18     	; 0xd4e <Evaluate_Expression+0x68>
     d3c:	18 f4       	brcc	.+6      	; 0xd44 <Evaluate_Expression+0x5e>
     d3e:	8a 32       	cpi	r24, 0x2A	; 42
     d40:	a1 f0       	breq	.+40     	; 0xd6a <Evaluate_Expression+0x84>
     d42:	34 c0       	rjmp	.+104    	; 0xdac <Evaluate_Expression+0xc6>
     d44:	8d 32       	cpi	r24, 0x2D	; 45
     d46:	51 f0       	breq	.+20     	; 0xd5c <Evaluate_Expression+0x76>
     d48:	8f 32       	cpi	r24, 0x2F	; 47
     d4a:	d9 f0       	breq	.+54     	; 0xd82 <Evaluate_Expression+0x9c>
     d4c:	2f c0       	rjmp	.+94     	; 0xdac <Evaluate_Expression+0xc6>
     d4e:	09 81       	ldd	r16, Y+1	; 0x01
     d50:	1a 81       	ldd	r17, Y+2	; 0x02
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	08 0f       	add	r16, r24
     d58:	19 1f       	adc	r17, r25
     d5a:	2a c0       	rjmp	.+84     	; 0xdb0 <Evaluate_Expression+0xca>
     d5c:	09 81       	ldd	r16, Y+1	; 0x01
     d5e:	1a 81       	ldd	r17, Y+2	; 0x02
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	08 1b       	sub	r16, r24
     d66:	19 0b       	sbc	r17, r25
     d68:	23 c0       	rjmp	.+70     	; 0xdb0 <Evaluate_Expression+0xca>
     d6a:	29 81       	ldd	r18, Y+1	; 0x01
     d6c:	3a 81       	ldd	r19, Y+2	; 0x02
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	28 9f       	mul	r18, r24
     d74:	80 01       	movw	r16, r0
     d76:	29 9f       	mul	r18, r25
     d78:	10 0d       	add	r17, r0
     d7a:	38 9f       	mul	r19, r24
     d7c:	10 0d       	add	r17, r0
     d7e:	11 24       	eor	r1, r1
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <Evaluate_Expression+0xca>
     d82:	0b 81       	ldd	r16, Y+3	; 0x03
     d84:	1c 81       	ldd	r17, Y+4	; 0x04
     d86:	01 15       	cp	r16, r1
     d88:	11 05       	cpc	r17, r1
     d8a:	39 f0       	breq	.+14     	; 0xd9a <Evaluate_Expression+0xb4>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	b8 01       	movw	r22, r16
     d92:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__divmodhi4>
     d96:	8b 01       	movw	r16, r22
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <Evaluate_Expression+0xca>
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     da2:	8f e8       	ldi	r24, 0x8F	; 143
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Evaluate_Expression+0xca>
     dac:	00 e0       	ldi	r16, 0x00	; 0
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	c8 01       	movw	r24, r16
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	08 95       	ret

00000dc6 <Calculator_Handler>:
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	60 97       	sbiw	r28, 0x10	; 16
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	83 34       	cpi	r24, 0x43	; 67
     de0:	19 f4       	brne	.+6      	; 0xde8 <Calculator_Handler+0x22>
     de2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Clear_Expression>
     de6:	61 c0       	rjmp	.+194    	; 0xeaa <Calculator_Handler+0xe4>
     de8:	8d 33       	cpi	r24, 0x3D	; 61
     dea:	89 f5       	brne	.+98     	; 0xe4e <Calculator_Handler+0x88>
     dec:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <result_shown>
     df0:	91 11       	cpse	r25, r1
     df2:	2d c0       	rjmp	.+90     	; 0xe4e <Calculator_Handler+0x88>
     df4:	83 ec       	ldi	r24, 0xC3	; 195
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	0e 94 73 06 	call	0xce6	; 0xce6 <Evaluate_Expression>
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	83 ec       	ldi	r24, 0xC3	; 195
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	9f 93       	push	r25
     e06:	8f 93       	push	r24
     e08:	8f e9       	ldi	r24, 0x9F	; 159
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	9f 93       	push	r25
     e0e:	8f 93       	push	r24
     e10:	8e 01       	movw	r16, r28
     e12:	0f 5f       	subi	r16, 0xFF	; 255
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	1f 93       	push	r17
     e18:	0f 93       	push	r16
     e1a:	0e 94 2f 0a 	call	0x145e	; 0x145e <sprintf>
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     e26:	85 ea       	ldi	r24, 0xA5	; 165
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     e36:	c8 01       	movw	r24, r16
     e38:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <result_shown>
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	2e c0       	rjmp	.+92     	; 0xeaa <Calculator_Handler+0xe4>
     e4e:	8d 33       	cpi	r24, 0x3D	; 61
     e50:	39 f4       	brne	.+14     	; 0xe60 <Calculator_Handler+0x9a>
     e52:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <result_shown>
     e56:	99 23       	and	r25, r25
     e58:	19 f0       	breq	.+6      	; 0xe60 <Calculator_Handler+0x9a>
     e5a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Clear_Expression>
     e5e:	25 c0       	rjmp	.+74     	; 0xeaa <Calculator_Handler+0xe4>
     e60:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <expr_index>
     e64:	ef 30       	cpi	r30, 0x0F	; 15
     e66:	08 f5       	brcc	.+66     	; 0xeaa <Calculator_Handler+0xe4>
     e68:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <result_shown>
     e6c:	91 11       	cpse	r25, r1
     e6e:	1d c0       	rjmp	.+58     	; 0xeaa <Calculator_Handler+0xe4>
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	9e 0f       	add	r25, r30
     e74:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <expr_index>
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ed 53       	subi	r30, 0x3D	; 61
     e7c:	fd 4f       	sbci	r31, 0xFD	; 253
     e7e:	80 83       	st	Z, r24
     e80:	e9 2f       	mov	r30, r25
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ed 53       	subi	r30, 0x3D	; 61
     e86:	fd 4f       	sbci	r31, 0xFD	; 253
     e88:	10 82       	st	Z, r1
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     e92:	85 ea       	ldi	r24, 0xA5	; 165
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     ea2:	83 ec       	ldi	r24, 0xC3	; 195
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     eaa:	60 96       	adiw	r28, 0x10	; 16
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <Mode_Handler>:
     ec0:	0e 94 1a 01 	call	0x234	; 0x234 <Keypad_GetKey>
     ec4:	83 34       	cpi	r24, 0x43	; 67
     ec6:	51 f5       	brne	.+84     	; 0xf1c <Mode_Handler+0x5c>
     ec8:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <mode>
     ecc:	81 11       	cpse	r24, r1
     ece:	21 c0       	rjmp	.+66     	; 0xf12 <Mode_Handler+0x52>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <mode>
     ed6:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
     eda:	86 eb       	ldi	r24, 0xB6	; 182
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     ee2:	2f e7       	ldi	r18, 0x7F	; 127
     ee4:	8a e1       	ldi	r24, 0x1A	; 26
     ee6:	96 e0       	ldi	r25, 0x06	; 6
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	80 40       	sbci	r24, 0x00	; 0
     eec:	90 40       	sbci	r25, 0x00	; 0
     eee:	e1 f7       	brne	.-8      	; 0xee8 <Mode_Handler+0x28>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <Mode_Handler+0x32>
     ef2:	00 00       	nop
     ef4:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
     ef8:	83 ec       	ldi	r24, 0xC3	; 195
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
     f08:	83 ed       	ldi	r24, 0xD3	; 211
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
     f10:	08 95       	ret
     f12:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <mode>
     f16:	0e 94 16 02 	call	0x42c	; 0x42c <Display_Time_And_Date>
     f1a:	08 95       	ret
     f1c:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <mode>
     f20:	91 30       	cpi	r25, 0x01	; 1
     f22:	a1 f5       	brne	.+104    	; 0xf8c <Mode_Handler+0xcc>
     f24:	81 33       	cpi	r24, 0x31	; 49
     f26:	31 f4       	brne	.+12     	; 0xf34 <Mode_Handler+0x74>
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <mode>
     f2e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Clear_Expression>
     f32:	08 95       	ret
     f34:	82 33       	cpi	r24, 0x32	; 50
     f36:	71 f4       	brne	.+28     	; 0xf54 <Mode_Handler+0x94>
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <mode>
     f3e:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <alarm_hour>
     f42:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <alarm_minute>
     f46:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <cursor_position>
     f4a:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <cursor_blink_state>
     f4e:	0e 94 6f 02 	call	0x4de	; 0x4de <Display_Alarm_Setting>
     f52:	08 95       	ret
     f54:	83 33       	cpi	r24, 0x33	; 51
     f56:	69 f5       	brne	.+90     	; 0xfb2 <Mode_Handler+0xf2>
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <mode>
     f5e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <RTC_GetTime>
     f62:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <new_time>
     f66:	30 93 d4 02 	sts	0x02D4, r19	; 0x8002d4 <new_time+0x1>
     f6a:	40 93 d5 02 	sts	0x02D5, r20	; 0x8002d5 <new_time+0x2>
     f6e:	50 93 d6 02 	sts	0x02D6, r21	; 0x8002d6 <new_time+0x3>
     f72:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <new_time+0x4>
     f76:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <new_time+0x5>
     f7a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <new_time+0x6>
     f7e:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <datetime_setting_field>
     f82:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <cursor_blink_state>
     f86:	0e 94 b0 02 	call	0x560	; 0x560 <Display_DateTime_Setting>
     f8a:	08 95       	ret
     f8c:	92 30       	cpi	r25, 0x02	; 2
     f8e:	29 f4       	brne	.+10     	; 0xf9a <Mode_Handler+0xda>
     f90:	88 23       	and	r24, r24
     f92:	19 f0       	breq	.+6      	; 0xf9a <Mode_Handler+0xda>
     f94:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <Calculator_Handler>
     f98:	08 95       	ret
     f9a:	93 30       	cpi	r25, 0x03	; 3
     f9c:	29 f4       	brne	.+10     	; 0xfa8 <Mode_Handler+0xe8>
     f9e:	88 23       	and	r24, r24
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <Mode_Handler+0xe8>
     fa2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Alarm_Input_Handler>
     fa6:	08 95       	ret
     fa8:	94 30       	cpi	r25, 0x04	; 4
     faa:	19 f4       	brne	.+6      	; 0xfb2 <Mode_Handler+0xf2>
     fac:	81 11       	cpse	r24, r1
     fae:	0e 94 b2 04 	call	0x964	; 0x964 <DateTime_Input_Handler>
     fb2:	08 95       	ret

00000fb4 <Update_Time_Display>:
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	27 97       	sbiw	r28, 0x07	; 7
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <RTC_GetTime>
     fce:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <mode>
     fd2:	81 11       	cpse	r24, r1
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <Update_Time_Display+0x34>
     fd6:	12 2f       	mov	r17, r18
     fd8:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <last_second.2353>
     fdc:	28 17       	cp	r18, r24
     fde:	21 f0       	breq	.+8      	; 0xfe8 <Update_Time_Display+0x34>
     fe0:	0e 94 16 02 	call	0x42c	; 0x42c <Display_Time_And_Date>
     fe4:	10 93 b9 02 	sts	0x02B9, r17	; 0x8002b9 <last_second.2353>
     fe8:	27 96       	adiw	r28, 0x07	; 7
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	08 95       	ret

00000ffc <initTimer1>:
     ffc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1000:	e1 e8       	ldi	r30, 0x81	; 129
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	80 83       	st	Z, r24
    1008:	82 e1       	ldi	r24, 0x12	; 18
    100a:	9a e7       	ldi	r25, 0x7A	; 122
    100c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1010:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    101a:	80 81       	ld	r24, Z
    101c:	84 60       	ori	r24, 0x04	; 4
    101e:	80 83       	st	Z, r24
    1020:	08 95       	ret

00001022 <__vector_11>:
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	8f 93       	push	r24
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <measurement_complete>
    1034:	8f 91       	pop	r24
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <UART_init>:

// Initialize UART (9600 baud with 16MHz clock)
void UART_init(void) {
	// Set baud rate to 9600 (for 16MHz CPU clock)
	UBRR0H = 0;
    1040:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
    1044:	87 e6       	ldi	r24, 0x67	; 103
    1046:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable transmitter
	UCSR0B = (1 << TXEN0);
    104a:	88 e0       	ldi	r24, 0x08	; 8
    104c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1050:	86 e0       	ldi	r24, 0x06	; 6
    1052:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1056:	08 95       	ret

00001058 <UART_transmit>:
}

// Transmit a byte via UART
void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
    1058:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    105c:	95 ff       	sbrs	r25, 5
    105e:	fc cf       	rjmp	.-8      	; 0x1058 <UART_transmit>
	
	// Put data into buffer
	UDR0 = data;
    1060:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1064:	08 95       	ret

00001066 <UART_print>:
}

// Send a string via UART
void UART_print(const char *str) {
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
	while (*str) {
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <UART_print+0xe>
		UART_transmit(*str++);
    106e:	21 96       	adiw	r28, 0x01	; 1
    1070:	0e 94 2c 08 	call	0x1058	; 0x1058 <UART_transmit>
	UDR0 = data;
}

// Send a string via UART
void UART_print(const char *str) {
	while (*str) {
    1074:	88 81       	ld	r24, Y
    1076:	81 11       	cpse	r24, r1
    1078:	fa cf       	rjmp	.-12     	; 0x106e <UART_print+0x8>
		UART_transmit(*str++);
	}
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <UART_println>:

// Send a string with newline via UART
void UART_println(const char *str) {
	UART_print(str);
    1080:	0e 94 33 08 	call	0x1066	; 0x1066 <UART_print>
	UART_transmit('\r');
    1084:	8d e0       	ldi	r24, 0x0D	; 13
    1086:	0e 94 2c 08 	call	0x1058	; 0x1058 <UART_transmit>
	UART_transmit('\n');
    108a:	8a e0       	ldi	r24, 0x0A	; 10
    108c:	0e 94 2c 08 	call	0x1058	; 0x1058 <UART_transmit>
    1090:	08 95       	ret

00001092 <main>:
void initTimer1(void);

//////////////////////

int main(void) {
	I2C_Init();
    1092:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Init>
	LCD_Init();
    1096:	0e 94 90 01 	call	0x320	; 0x320 <LCD_Init>
	RTC_Init();
    109a:	0e 94 c6 08 	call	0x118c	; 0x118c <RTC_Init>
	Keypad_Init();
    109e:	0e 94 0d 01 	call	0x21a	; 0x21a <Keypad_Init>
	Alarm_Init();
    10a2:	0e 94 59 00 	call	0xb2	; 0xb2 <Alarm_Init>
	Buzzer_Init();
    10a6:	0e 94 a5 00 	call	0x14a	; 0x14a <Buzzer_Init>
	
	// Display time and date on startup
	Display_Time_And_Date();
    10aa:	0e 94 16 02 	call	0x42c	; 0x42c <Display_Time_And_Date>
/////////////////////////////
    // Initialize UART for serial communication
    UART_init();
    10ae:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_init>
    
    // Setup pins
    // Set trigger pin as output
    DDRC |= (1 << TRIGGER_PIN);
    10b2:	87 b1       	in	r24, 0x07	; 7
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	87 b9       	out	0x07, r24	; 7
    // Set echo pin as input
    DDRC &= ~(1 << ECHO_PIN);
    10b8:	87 b1       	in	r24, 0x07	; 7
    10ba:	87 7f       	andi	r24, 0xF7	; 247
    10bc:	87 b9       	out	0x07, r24	; 7
    // Set LED pin as output
    DDRB |= (1 << LED_PIN);
    10be:	84 b1       	in	r24, 0x04	; 4
    10c0:	80 62       	ori	r24, 0x20	; 32
    10c2:	84 b9       	out	0x04, r24	; 4
    
    // Turn off LED initially
    PORTB &= ~(1 << LED_PIN);
    10c4:	85 b1       	in	r24, 0x05	; 5
    10c6:	8f 7d       	andi	r24, 0xDF	; 223
    10c8:	85 b9       	out	0x05, r24	; 5
    
    // Initialize ADC
    // Set reference voltage to AVCC
    ADMUX = (1 << REFS0);
    10ca:	80 e4       	ldi	r24, 0x40	; 64
    10cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    // Enable ADC, set prescaler to 128
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    10d0:	87 e8       	ldi	r24, 0x87	; 135
    10d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    
    // Initialize timer for fixed-interval measurements
    initTimer1();
    10d6:	0e 94 fe 07 	call	0xffc	; 0xffc <initTimer1>
    
    // Enable global interrupts
    sei();
    10da:	78 94       	sei
    
    // Print startup message
    UART_println("Combined Ultrasonic and Analog Sensor System");
    10dc:	83 ee       	ldi	r24, 0xE3	; 227
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    UART_println("-------------------------------------------");
    10e4:	80 e1       	ldi	r24, 0x10	; 16
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    UART_println("LED will turn ON when:");
    10ec:	8c e3       	ldi	r24, 0x3C	; 60
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    UART_println("- Distance < 10 cm AND");
    10f4:	83 e5       	ldi	r24, 0x53	; 83
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    UART_println("- Analog reading < 300");
    10fc:	8a e6       	ldi	r24, 0x6A	; 106
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    UART_println("");
    1104:	85 eb       	ldi	r24, 0xB5	; 181
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    UART_println("Measurements taken every 500ms");
    110c:	81 e8       	ldi	r24, 0x81	; 129
    110e:	92 e0       	ldi	r25, 0x02	; 2
    1110:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    UART_println("");
    1114:	85 eb       	ldi	r24, 0xB5	; 181
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	0e 94 40 08 	call	0x1080	; 0x1080 <UART_println>
    111c:	87 ea       	ldi	r24, 0xA7	; 167
    111e:	91 e6       	ldi	r25, 0x61	; 97
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <main+0x8e>
    1124:	00 c0       	rjmp	.+0      	; 0x1126 <main+0x94>
    1126:	00 00       	nop
    // Flush any pending transmissions
    _delay_ms(100);
/////////////////////////////
while (1) {
    // Check if alarm triggered
    if (RTC_CheckAlarm()) {
    1128:	0e 94 50 09 	call	0x12a0	; 0x12a0 <RTC_CheckAlarm>
    112c:	88 23       	and	r24, r24
    112e:	c1 f0       	breq	.+48     	; 0x1160 <main+0xce>
        // Alarm has triggered!
        Buzzer_On();  // Make sure you have this function in alarm.c
    1130:	0e 94 a9 00 	call	0x152	; 0x152 <Buzzer_On>
        alarm_active = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end>
        
        LCD_Clear();
    113a:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_Clear>
        LCD_Print("ALARM!");
    113e:	80 ea       	ldi	r24, 0xA0	; 160
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
        LCD_SetCursor(0, 1);
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_SetCursor>
        LCD_Print("Press = to stop");
    114e:	87 ea       	ldi	r24, 0xA7	; 167
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Print>
        
        RTC_ClearAlarm();  // Clear flag for next alarm
    1156:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <RTC_ClearAlarm>
            // Switch to alarm mode to enable alarm stopping
    mode = MODE_ALARM;
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <mode>
    }
    
    Mode_Handler();
    1160:	0e 94 60 07 	call	0xec0	; 0xec0 <Mode_Handler>
    Update_Time_Display();
    1164:	0e 94 da 07 	call	0xfb4	; 0xfb4 <Update_Time_Display>
    
    if (mode == MODE_ALARM) {
    1168:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <mode>
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	19 f4       	brne	.+6      	; 0x1176 <main+0xe4>
        Blink_Cursor();
    1170:	0e 94 29 03 	call	0x652	; 0x652 <Blink_Cursor>
    1174:	04 c0       	rjmp	.+8      	; 0x117e <main+0xec>
    } else if (mode == MODE_SET_TIME) {
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	11 f4       	brne	.+4      	; 0x117e <main+0xec>
        Blink_Cursor(); 
    117a:	0e 94 29 03 	call	0x652	; 0x652 <Blink_Cursor>
    117e:	83 ed       	ldi	r24, 0xD3	; 211
    1180:	90 e3       	ldi	r25, 0x30	; 48
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <main+0xf0>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <main+0xf6>
    1188:	00 00       	nop
    118a:	ce cf       	rjmp	.-100    	; 0x1128 <main+0x96>

0000118c <RTC_Init>:
#include "rtc.h"
#include "i2c.h"
#define RTC_ADDR 0x51  // PCF8563 RTC I2C Address

void RTC_Init(void) {
    I2C_Start();
    118c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    1190:	82 ea       	ldi	r24, 0xA2	; 162
    1192:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x00);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x00);  // Start the RTC (clear ST1/ST2, enable clock)
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    11a2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
    11a6:	08 95       	ret

000011a8 <bcd_to_decimal>:
}

// Helper function for BCD to Decimal conversion
uint8_t bcd_to_decimal(uint8_t bcd) {
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
    11a8:	98 2f       	mov	r25, r24
    11aa:	92 95       	swap	r25
    11ac:	9f 70       	andi	r25, 0x0F	; 15
    11ae:	99 0f       	add	r25, r25
    11b0:	29 2f       	mov	r18, r25
    11b2:	22 0f       	add	r18, r18
    11b4:	22 0f       	add	r18, r18
    11b6:	92 0f       	add	r25, r18
    11b8:	8f 70       	andi	r24, 0x0F	; 15
}
    11ba:	89 0f       	add	r24, r25
    11bc:	08 95       	ret

000011be <decimal_to_bcd>:

// Helper function for Decimal to BCD conversion
uint8_t decimal_to_bcd(uint8_t decimal) {
    return ((decimal / 10) << 4) | (decimal % 10);
    11be:	9d ec       	ldi	r25, 0xCD	; 205
    11c0:	89 9f       	mul	r24, r25
    11c2:	91 2d       	mov	r25, r1
    11c4:	11 24       	eor	r1, r1
    11c6:	96 95       	lsr	r25
    11c8:	96 95       	lsr	r25
    11ca:	96 95       	lsr	r25
    11cc:	20 e1       	ldi	r18, 0x10	; 16
    11ce:	92 9f       	mul	r25, r18
    11d0:	a0 01       	movw	r20, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	99 0f       	add	r25, r25
    11d6:	29 2f       	mov	r18, r25
    11d8:	22 0f       	add	r18, r18
    11da:	22 0f       	add	r18, r18
    11dc:	92 0f       	add	r25, r18
    11de:	89 1b       	sub	r24, r25
}
    11e0:	84 2b       	or	r24, r20
    11e2:	08 95       	ret

000011e4 <RTC_GetTime>:

RTC_Time RTC_GetTime(void) {
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	2e 97       	sbiw	r28, 0x0e	; 14
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    RTC_Time time;

    I2C_Start();
    11f8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    11fc:	82 ea       	ldi	r24, 0xA2	; 162
    11fe:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x02); // Start reading from seconds register
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    1208:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>

    I2C_Start();
    120c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write((RTC_ADDR << 1) | 1);
    1210:	83 ea       	ldi	r24, 0xA3	; 163
    1212:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    time.sec   = bcd_to_decimal(I2C_ReadAck() & 0x7F);  // 0x02: Seconds
    1216:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_ReadAck>
    121a:	8f 77       	andi	r24, 0x7F	; 127
    121c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <bcd_to_decimal>
    1220:	88 87       	std	Y+8, r24	; 0x08
    time.min   = bcd_to_decimal(I2C_ReadAck() & 0x7F);  // 0x03: Minutes
    1222:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_ReadAck>
    1226:	8f 77       	andi	r24, 0x7F	; 127
    1228:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <bcd_to_decimal>
    122c:	89 87       	std	Y+9, r24	; 0x09
    time.hour  = bcd_to_decimal(I2C_ReadAck() & 0x3F);  // 0x04: Hours
    122e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_ReadAck>
    1232:	8f 73       	andi	r24, 0x3F	; 63
    1234:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <bcd_to_decimal>
    1238:	8a 87       	std	Y+10, r24	; 0x0a
    time.day   = bcd_to_decimal(I2C_ReadAck() & 0x3F);  // 0x05: Days
    123a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_ReadAck>
    123e:	8f 73       	andi	r24, 0x3F	; 63
    1240:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <bcd_to_decimal>
    1244:	8b 87       	std	Y+11, r24	; 0x0b
    I2C_ReadAck();  // 0x06: Weekdays (skip, not used)
    1246:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_ReadAck>
    time.month = bcd_to_decimal(I2C_ReadAck() & 0x1F);  // 0x07: Months
    124a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_ReadAck>
    124e:	8f 71       	andi	r24, 0x1F	; 31
    1250:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <bcd_to_decimal>
    1254:	8c 87       	std	Y+12, r24	; 0x0c
    time.year  = bcd_to_decimal(I2C_ReadNack()) + 2000; // 0x08: Years
    1256:	0e 94 03 01 	call	0x206	; 0x206 <I2C_ReadNack>
    125a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <bcd_to_decimal>
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	80 53       	subi	r24, 0x30	; 48
    1262:	98 4f       	sbci	r25, 0xF8	; 248
    1264:	9e 87       	std	Y+14, r25	; 0x0e
    1266:	8d 87       	std	Y+13, r24	; 0x0d
    I2C_Stop();
    1268:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>

    return time;
    126c:	87 e0       	ldi	r24, 0x07	; 7
    126e:	fe 01       	movw	r30, r28
    1270:	38 96       	adiw	r30, 0x08	; 8
    1272:	de 01       	movw	r26, r28
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	01 90       	ld	r0, Z+
    1278:	0d 92       	st	X+, r0
    127a:	8a 95       	dec	r24
    127c:	e1 f7       	brne	.-8      	; 0x1276 <RTC_GetTime+0x92>
    127e:	29 81       	ldd	r18, Y+1	; 0x01
    1280:	3a 81       	ldd	r19, Y+2	; 0x02
    1282:	4b 81       	ldd	r20, Y+3	; 0x03
    1284:	5c 81       	ldd	r21, Y+4	; 0x04
    1286:	6d 81       	ldd	r22, Y+5	; 0x05
    1288:	7e 81       	ldd	r23, Y+6	; 0x06
}
    128a:	8f 81       	ldd	r24, Y+7	; 0x07
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	2e 96       	adiw	r28, 0x0e	; 14
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <RTC_CheckAlarm>:
    I2C_Write(0x02);  // Enable AIE (Alarm Interrupt Enable)
    I2C_Stop();
}

// Check if alarm has triggered - MISSING FUNCTION
uint8_t RTC_CheckAlarm(void) {
    12a0:	cf 93       	push	r28
    uint8_t status;
    
    I2C_Start();
    12a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    12a6:	82 ea       	ldi	r24, 0xA2	; 162
    12a8:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x01);  // Control/Status 2 register
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    12b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
    
    I2C_Start();
    12b6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write((RTC_ADDR << 1) | 1);
    12ba:	83 ea       	ldi	r24, 0xA3	; 163
    12bc:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    status = I2C_ReadNack();
    12c0:	0e 94 03 01 	call	0x206	; 0x206 <I2C_ReadNack>
    12c4:	c8 2f       	mov	r28, r24
    I2C_Stop();
    12c6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
    
    return (status & 0x08) ? 1 : 0;  // Check AF (Alarm Flag) bit (bit 3)
}
    12ca:	c3 fb       	bst	r28, 3
    12cc:	88 27       	eor	r24, r24
    12ce:	80 f9       	bld	r24, 0
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <RTC_ClearAlarm>:

// Clear the alarm flag - MISSING FUNCTION
void RTC_ClearAlarm(void) {
    12d4:	cf 93       	push	r28
    uint8_t status;
    
    // First read current register value
    I2C_Start();
    12d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    12da:	82 ea       	ldi	r24, 0xA2	; 162
    12dc:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x01);  // Control/Status 2 register
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    12e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
    
    I2C_Start();
    12ea:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write((RTC_ADDR << 1) | 1);
    12ee:	83 ea       	ldi	r24, 0xA3	; 163
    12f0:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    status = I2C_ReadNack();
    12f4:	0e 94 03 01 	call	0x206	; 0x206 <I2C_ReadNack>
    12f8:	c8 2f       	mov	r28, r24
    I2C_Stop();
    12fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
    
    // Clear the AF bit while preserving other bits
    status &= ~0x08;  // Clear AF bit (bit 3)
    12fe:	c7 7f       	andi	r28, 0xF7	; 247
    
    // Write back the modified value
    I2C_Start();
    1300:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    1304:	82 ea       	ldi	r24, 0xA2	; 162
    1306:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x01);  // Control/Status 2 register
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(status);
    1310:	8c 2f       	mov	r24, r28
    1312:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    1316:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
}
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <RTC_SetAlarm>:
    I2C_Stop();

    return time;
}

void RTC_SetAlarm(uint8_t hour, uint8_t minute) {
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	c8 2f       	mov	r28, r24
    1324:	d6 2f       	mov	r29, r22
    I2C_Start();
    1326:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    132a:	82 ea       	ldi	r24, 0xA2	; 162
    132c:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x09);  // Minute alarm register
    1330:	89 e0       	ldi	r24, 0x09	; 9
    1332:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(minute) & 0x7F);  // 0x09: Minute alarm
    1336:	8d 2f       	mov	r24, r29
    1338:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    133c:	8f 77       	andi	r24, 0x7F	; 127
    133e:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(hour) & 0x3F);    // 0x0A: Hour alarm
    1342:	8c 2f       	mov	r24, r28
    1344:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    1348:	8f 73       	andi	r24, 0x3F	; 63
    134a:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x80);  // 0x0B: Day alarm disabled
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x80);  // 0x0C: Weekday alarm disabled
    1354:	80 e8       	ldi	r24, 0x80	; 128
    1356:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    135a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
    
    // Clear any existing alarm flag before enabling
    RTC_ClearAlarm();
    135e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <RTC_ClearAlarm>
    
    I2C_Start();
    1362:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    1366:	82 ea       	ldi	r24, 0xA2	; 162
    1368:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x01);  // Control/status 2
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x02);  // Enable AIE (Alarm Interrupt Enable)
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    1378:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <RTC_SetTime>:
    I2C_Write(0x01);  // Control/Status 2 register
    I2C_Write(status);
    I2C_Stop();
}

void RTC_SetTime(RTC_Time *time) {
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	ec 01       	movw	r28, r24
    I2C_Start();
    1388:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Start>
    I2C_Write(RTC_ADDR << 1);
    138c:	82 ea       	ldi	r24, 0xA2	; 162
    138e:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x02);  // Start from seconds register
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(time->sec) & 0x7F);    // 0x02: Seconds
    1398:	88 81       	ld	r24, Y
    139a:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    139e:	8f 77       	andi	r24, 0x7F	; 127
    13a0:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(time->min) & 0x7F);    // 0x03: Minutes
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    13aa:	8f 77       	andi	r24, 0x7F	; 127
    13ac:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(time->hour) & 0x3F);   // 0x04: Hours
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    13b6:	8f 73       	andi	r24, 0x3F	; 63
    13b8:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(time->day) & 0x3F);    // 0x05: Days
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    13c2:	8f 73       	andi	r24, 0x3F	; 63
    13c4:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(0x00);  // 0x06: Weekdays (set to 0, not used)
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(time->month) & 0x1F);  // 0x07: Months
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    13d4:	8f 71       	andi	r24, 0x1F	; 31
    13d6:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Write(decimal_to_bcd(time->year - 2000));   // 0x08: Years
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	80 5d       	subi	r24, 0xD0	; 208
    13de:	0e 94 df 08 	call	0x11be	; 0x11be <decimal_to_bcd>
    13e2:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
    I2C_Stop();
    13e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <I2C_Stop>
}
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <__divmodhi4>:
    13f0:	97 fb       	bst	r25, 7
    13f2:	07 2e       	mov	r0, r23
    13f4:	16 f4       	brtc	.+4      	; 0x13fa <__divmodhi4+0xa>
    13f6:	00 94       	com	r0
    13f8:	07 d0       	rcall	.+14     	; 0x1408 <__divmodhi4_neg1>
    13fa:	77 fd       	sbrc	r23, 7
    13fc:	09 d0       	rcall	.+18     	; 0x1410 <__divmodhi4_neg2>
    13fe:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__udivmodhi4>
    1402:	07 fc       	sbrc	r0, 7
    1404:	05 d0       	rcall	.+10     	; 0x1410 <__divmodhi4_neg2>
    1406:	3e f4       	brtc	.+14     	; 0x1416 <__divmodhi4_exit>

00001408 <__divmodhi4_neg1>:
    1408:	90 95       	com	r25
    140a:	81 95       	neg	r24
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	08 95       	ret

00001410 <__divmodhi4_neg2>:
    1410:	70 95       	com	r23
    1412:	61 95       	neg	r22
    1414:	7f 4f       	sbci	r23, 0xFF	; 255

00001416 <__divmodhi4_exit>:
    1416:	08 95       	ret

00001418 <__umulhisi3>:
    1418:	a2 9f       	mul	r26, r18
    141a:	b0 01       	movw	r22, r0
    141c:	b3 9f       	mul	r27, r19
    141e:	c0 01       	movw	r24, r0
    1420:	a3 9f       	mul	r26, r19
    1422:	70 0d       	add	r23, r0
    1424:	81 1d       	adc	r24, r1
    1426:	11 24       	eor	r1, r1
    1428:	91 1d       	adc	r25, r1
    142a:	b2 9f       	mul	r27, r18
    142c:	70 0d       	add	r23, r0
    142e:	81 1d       	adc	r24, r1
    1430:	11 24       	eor	r1, r1
    1432:	91 1d       	adc	r25, r1
    1434:	08 95       	ret

00001436 <__udivmodhi4>:
    1436:	aa 1b       	sub	r26, r26
    1438:	bb 1b       	sub	r27, r27
    143a:	51 e1       	ldi	r21, 0x11	; 17
    143c:	07 c0       	rjmp	.+14     	; 0x144c <__udivmodhi4_ep>

0000143e <__udivmodhi4_loop>:
    143e:	aa 1f       	adc	r26, r26
    1440:	bb 1f       	adc	r27, r27
    1442:	a6 17       	cp	r26, r22
    1444:	b7 07       	cpc	r27, r23
    1446:	10 f0       	brcs	.+4      	; 0x144c <__udivmodhi4_ep>
    1448:	a6 1b       	sub	r26, r22
    144a:	b7 0b       	sbc	r27, r23

0000144c <__udivmodhi4_ep>:
    144c:	88 1f       	adc	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	5a 95       	dec	r21
    1452:	a9 f7       	brne	.-22     	; 0x143e <__udivmodhi4_loop>
    1454:	80 95       	com	r24
    1456:	90 95       	com	r25
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	08 95       	ret

0000145e <sprintf>:
    145e:	ae e0       	ldi	r26, 0x0E	; 14
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e3       	ldi	r30, 0x35	; 53
    1464:	fa e0       	ldi	r31, 0x0A	; 10
    1466:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__prologue_saves__+0x1c>
    146a:	0d 89       	ldd	r16, Y+21	; 0x15
    146c:	1e 89       	ldd	r17, Y+22	; 0x16
    146e:	86 e0       	ldi	r24, 0x06	; 6
    1470:	8c 83       	std	Y+4, r24	; 0x04
    1472:	1a 83       	std	Y+2, r17	; 0x02
    1474:	09 83       	std	Y+1, r16	; 0x01
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f e7       	ldi	r25, 0x7F	; 127
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	ae 01       	movw	r20, r28
    1480:	47 5e       	subi	r20, 0xE7	; 231
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	6f 89       	ldd	r22, Y+23	; 0x17
    1486:	78 8d       	ldd	r23, Y+24	; 0x18
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <vfprintf>
    1490:	ef 81       	ldd	r30, Y+7	; 0x07
    1492:	f8 85       	ldd	r31, Y+8	; 0x08
    1494:	e0 0f       	add	r30, r16
    1496:	f1 1f       	adc	r31, r17
    1498:	10 82       	st	Z, r1
    149a:	2e 96       	adiw	r28, 0x0e	; 14
    149c:	e4 e0       	ldi	r30, 0x04	; 4
    149e:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__epilogue_restores__+0x1c>

000014a2 <sscanf>:
    14a2:	ae e0       	ldi	r26, 0x0E	; 14
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e7 e5       	ldi	r30, 0x57	; 87
    14a8:	fa e0       	ldi	r31, 0x0A	; 10
    14aa:	0c 94 26 10 	jmp	0x204c	; 0x204c <__prologue_saves__+0x20>
    14ae:	85 e0       	ldi	r24, 0x05	; 5
    14b0:	8c 83       	std	Y+4, r24	; 0x04
    14b2:	8b 89       	ldd	r24, Y+19	; 0x13
    14b4:	9c 89       	ldd	r25, Y+20	; 0x14
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	ae 01       	movw	r20, r28
    14bc:	49 5e       	subi	r20, 0xE9	; 233
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	6d 89       	ldd	r22, Y+21	; 0x15
    14c2:	7e 89       	ldd	r23, Y+22	; 0x16
    14c4:	ce 01       	movw	r24, r28
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <vfscanf>
    14cc:	2e 96       	adiw	r28, 0x0e	; 14
    14ce:	e2 e0       	ldi	r30, 0x02	; 2
    14d0:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__epilogue_restores__+0x20>

000014d4 <vfprintf>:
    14d4:	ab e0       	ldi	r26, 0x0B	; 11
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e0 e7       	ldi	r30, 0x70	; 112
    14da:	fa e0       	ldi	r31, 0x0A	; 10
    14dc:	0c 94 16 10 	jmp	0x202c	; 0x202c <__prologue_saves__>
    14e0:	6c 01       	movw	r12, r24
    14e2:	7b 01       	movw	r14, r22
    14e4:	8a 01       	movw	r16, r20
    14e6:	fc 01       	movw	r30, r24
    14e8:	17 82       	std	Z+7, r1	; 0x07
    14ea:	16 82       	std	Z+6, r1	; 0x06
    14ec:	83 81       	ldd	r24, Z+3	; 0x03
    14ee:	81 ff       	sbrs	r24, 1
    14f0:	cc c1       	rjmp	.+920    	; 0x188a <vfprintf+0x3b6>
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	3c 01       	movw	r6, r24
    14f8:	f6 01       	movw	r30, r12
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	f7 01       	movw	r30, r14
    14fe:	93 fd       	sbrc	r25, 3
    1500:	85 91       	lpm	r24, Z+
    1502:	93 ff       	sbrs	r25, 3
    1504:	81 91       	ld	r24, Z+
    1506:	7f 01       	movw	r14, r30
    1508:	88 23       	and	r24, r24
    150a:	09 f4       	brne	.+2      	; 0x150e <vfprintf+0x3a>
    150c:	ba c1       	rjmp	.+884    	; 0x1882 <vfprintf+0x3ae>
    150e:	85 32       	cpi	r24, 0x25	; 37
    1510:	39 f4       	brne	.+14     	; 0x1520 <vfprintf+0x4c>
    1512:	93 fd       	sbrc	r25, 3
    1514:	85 91       	lpm	r24, Z+
    1516:	93 ff       	sbrs	r25, 3
    1518:	81 91       	ld	r24, Z+
    151a:	7f 01       	movw	r14, r30
    151c:	85 32       	cpi	r24, 0x25	; 37
    151e:	29 f4       	brne	.+10     	; 0x152a <vfprintf+0x56>
    1520:	b6 01       	movw	r22, r12
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    1528:	e7 cf       	rjmp	.-50     	; 0x14f8 <vfprintf+0x24>
    152a:	91 2c       	mov	r9, r1
    152c:	21 2c       	mov	r2, r1
    152e:	31 2c       	mov	r3, r1
    1530:	ff e1       	ldi	r31, 0x1F	; 31
    1532:	f3 15       	cp	r31, r3
    1534:	d8 f0       	brcs	.+54     	; 0x156c <vfprintf+0x98>
    1536:	8b 32       	cpi	r24, 0x2B	; 43
    1538:	79 f0       	breq	.+30     	; 0x1558 <vfprintf+0x84>
    153a:	38 f4       	brcc	.+14     	; 0x154a <vfprintf+0x76>
    153c:	80 32       	cpi	r24, 0x20	; 32
    153e:	79 f0       	breq	.+30     	; 0x155e <vfprintf+0x8a>
    1540:	83 32       	cpi	r24, 0x23	; 35
    1542:	a1 f4       	brne	.+40     	; 0x156c <vfprintf+0x98>
    1544:	23 2d       	mov	r18, r3
    1546:	20 61       	ori	r18, 0x10	; 16
    1548:	1d c0       	rjmp	.+58     	; 0x1584 <vfprintf+0xb0>
    154a:	8d 32       	cpi	r24, 0x2D	; 45
    154c:	61 f0       	breq	.+24     	; 0x1566 <vfprintf+0x92>
    154e:	80 33       	cpi	r24, 0x30	; 48
    1550:	69 f4       	brne	.+26     	; 0x156c <vfprintf+0x98>
    1552:	23 2d       	mov	r18, r3
    1554:	21 60       	ori	r18, 0x01	; 1
    1556:	16 c0       	rjmp	.+44     	; 0x1584 <vfprintf+0xb0>
    1558:	83 2d       	mov	r24, r3
    155a:	82 60       	ori	r24, 0x02	; 2
    155c:	38 2e       	mov	r3, r24
    155e:	e3 2d       	mov	r30, r3
    1560:	e4 60       	ori	r30, 0x04	; 4
    1562:	3e 2e       	mov	r3, r30
    1564:	2a c0       	rjmp	.+84     	; 0x15ba <vfprintf+0xe6>
    1566:	f3 2d       	mov	r31, r3
    1568:	f8 60       	ori	r31, 0x08	; 8
    156a:	1d c0       	rjmp	.+58     	; 0x15a6 <vfprintf+0xd2>
    156c:	37 fc       	sbrc	r3, 7
    156e:	2d c0       	rjmp	.+90     	; 0x15ca <vfprintf+0xf6>
    1570:	20 ed       	ldi	r18, 0xD0	; 208
    1572:	28 0f       	add	r18, r24
    1574:	2a 30       	cpi	r18, 0x0A	; 10
    1576:	40 f0       	brcs	.+16     	; 0x1588 <vfprintf+0xb4>
    1578:	8e 32       	cpi	r24, 0x2E	; 46
    157a:	b9 f4       	brne	.+46     	; 0x15aa <vfprintf+0xd6>
    157c:	36 fc       	sbrc	r3, 6
    157e:	81 c1       	rjmp	.+770    	; 0x1882 <vfprintf+0x3ae>
    1580:	23 2d       	mov	r18, r3
    1582:	20 64       	ori	r18, 0x40	; 64
    1584:	32 2e       	mov	r3, r18
    1586:	19 c0       	rjmp	.+50     	; 0x15ba <vfprintf+0xe6>
    1588:	36 fe       	sbrs	r3, 6
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <vfprintf+0xc4>
    158c:	8a e0       	ldi	r24, 0x0A	; 10
    158e:	98 9e       	mul	r9, r24
    1590:	20 0d       	add	r18, r0
    1592:	11 24       	eor	r1, r1
    1594:	92 2e       	mov	r9, r18
    1596:	11 c0       	rjmp	.+34     	; 0x15ba <vfprintf+0xe6>
    1598:	ea e0       	ldi	r30, 0x0A	; 10
    159a:	2e 9e       	mul	r2, r30
    159c:	20 0d       	add	r18, r0
    159e:	11 24       	eor	r1, r1
    15a0:	22 2e       	mov	r2, r18
    15a2:	f3 2d       	mov	r31, r3
    15a4:	f0 62       	ori	r31, 0x20	; 32
    15a6:	3f 2e       	mov	r3, r31
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <vfprintf+0xe6>
    15aa:	8c 36       	cpi	r24, 0x6C	; 108
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <vfprintf+0xe2>
    15ae:	83 2d       	mov	r24, r3
    15b0:	80 68       	ori	r24, 0x80	; 128
    15b2:	38 2e       	mov	r3, r24
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfprintf+0xe6>
    15b6:	88 36       	cpi	r24, 0x68	; 104
    15b8:	41 f4       	brne	.+16     	; 0x15ca <vfprintf+0xf6>
    15ba:	f7 01       	movw	r30, r14
    15bc:	93 fd       	sbrc	r25, 3
    15be:	85 91       	lpm	r24, Z+
    15c0:	93 ff       	sbrs	r25, 3
    15c2:	81 91       	ld	r24, Z+
    15c4:	7f 01       	movw	r14, r30
    15c6:	81 11       	cpse	r24, r1
    15c8:	b3 cf       	rjmp	.-154    	; 0x1530 <vfprintf+0x5c>
    15ca:	98 2f       	mov	r25, r24
    15cc:	9f 7d       	andi	r25, 0xDF	; 223
    15ce:	95 54       	subi	r25, 0x45	; 69
    15d0:	93 30       	cpi	r25, 0x03	; 3
    15d2:	28 f4       	brcc	.+10     	; 0x15de <vfprintf+0x10a>
    15d4:	0c 5f       	subi	r16, 0xFC	; 252
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	9f e3       	ldi	r25, 0x3F	; 63
    15da:	99 83       	std	Y+1, r25	; 0x01
    15dc:	0d c0       	rjmp	.+26     	; 0x15f8 <vfprintf+0x124>
    15de:	83 36       	cpi	r24, 0x63	; 99
    15e0:	31 f0       	breq	.+12     	; 0x15ee <vfprintf+0x11a>
    15e2:	83 37       	cpi	r24, 0x73	; 115
    15e4:	71 f0       	breq	.+28     	; 0x1602 <vfprintf+0x12e>
    15e6:	83 35       	cpi	r24, 0x53	; 83
    15e8:	09 f0       	breq	.+2      	; 0x15ec <vfprintf+0x118>
    15ea:	59 c0       	rjmp	.+178    	; 0x169e <vfprintf+0x1ca>
    15ec:	21 c0       	rjmp	.+66     	; 0x1630 <vfprintf+0x15c>
    15ee:	f8 01       	movw	r30, r16
    15f0:	80 81       	ld	r24, Z
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	0e 5f       	subi	r16, 0xFE	; 254
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	88 24       	eor	r8, r8
    15fa:	83 94       	inc	r8
    15fc:	91 2c       	mov	r9, r1
    15fe:	53 01       	movw	r10, r6
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <vfprintf+0x154>
    1602:	28 01       	movw	r4, r16
    1604:	f2 e0       	ldi	r31, 0x02	; 2
    1606:	4f 0e       	add	r4, r31
    1608:	51 1c       	adc	r5, r1
    160a:	f8 01       	movw	r30, r16
    160c:	a0 80       	ld	r10, Z
    160e:	b1 80       	ldd	r11, Z+1	; 0x01
    1610:	36 fe       	sbrs	r3, 6
    1612:	03 c0       	rjmp	.+6      	; 0x161a <vfprintf+0x146>
    1614:	69 2d       	mov	r22, r9
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <vfprintf+0x14a>
    161a:	6f ef       	ldi	r22, 0xFF	; 255
    161c:	7f ef       	ldi	r23, 0xFF	; 255
    161e:	c5 01       	movw	r24, r10
    1620:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <strnlen>
    1624:	4c 01       	movw	r8, r24
    1626:	82 01       	movw	r16, r4
    1628:	f3 2d       	mov	r31, r3
    162a:	ff 77       	andi	r31, 0x7F	; 127
    162c:	3f 2e       	mov	r3, r31
    162e:	16 c0       	rjmp	.+44     	; 0x165c <vfprintf+0x188>
    1630:	28 01       	movw	r4, r16
    1632:	22 e0       	ldi	r18, 0x02	; 2
    1634:	42 0e       	add	r4, r18
    1636:	51 1c       	adc	r5, r1
    1638:	f8 01       	movw	r30, r16
    163a:	a0 80       	ld	r10, Z
    163c:	b1 80       	ldd	r11, Z+1	; 0x01
    163e:	36 fe       	sbrs	r3, 6
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <vfprintf+0x174>
    1642:	69 2d       	mov	r22, r9
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0x178>
    1648:	6f ef       	ldi	r22, 0xFF	; 255
    164a:	7f ef       	ldi	r23, 0xFF	; 255
    164c:	c5 01       	movw	r24, r10
    164e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <strnlen_P>
    1652:	4c 01       	movw	r8, r24
    1654:	f3 2d       	mov	r31, r3
    1656:	f0 68       	ori	r31, 0x80	; 128
    1658:	3f 2e       	mov	r3, r31
    165a:	82 01       	movw	r16, r4
    165c:	33 fc       	sbrc	r3, 3
    165e:	1b c0       	rjmp	.+54     	; 0x1696 <vfprintf+0x1c2>
    1660:	82 2d       	mov	r24, r2
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	88 16       	cp	r8, r24
    1666:	99 06       	cpc	r9, r25
    1668:	b0 f4       	brcc	.+44     	; 0x1696 <vfprintf+0x1c2>
    166a:	b6 01       	movw	r22, r12
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    1674:	2a 94       	dec	r2
    1676:	f4 cf       	rjmp	.-24     	; 0x1660 <vfprintf+0x18c>
    1678:	f5 01       	movw	r30, r10
    167a:	37 fc       	sbrc	r3, 7
    167c:	85 91       	lpm	r24, Z+
    167e:	37 fe       	sbrs	r3, 7
    1680:	81 91       	ld	r24, Z+
    1682:	5f 01       	movw	r10, r30
    1684:	b6 01       	movw	r22, r12
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    168c:	21 10       	cpse	r2, r1
    168e:	2a 94       	dec	r2
    1690:	21 e0       	ldi	r18, 0x01	; 1
    1692:	82 1a       	sub	r8, r18
    1694:	91 08       	sbc	r9, r1
    1696:	81 14       	cp	r8, r1
    1698:	91 04       	cpc	r9, r1
    169a:	71 f7       	brne	.-36     	; 0x1678 <vfprintf+0x1a4>
    169c:	e8 c0       	rjmp	.+464    	; 0x186e <vfprintf+0x39a>
    169e:	84 36       	cpi	r24, 0x64	; 100
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <vfprintf+0x1d2>
    16a2:	89 36       	cpi	r24, 0x69	; 105
    16a4:	41 f5       	brne	.+80     	; 0x16f6 <vfprintf+0x222>
    16a6:	f8 01       	movw	r30, r16
    16a8:	37 fe       	sbrs	r3, 7
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <vfprintf+0x1e6>
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	0c 5f       	subi	r16, 0xFC	; 252
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <vfprintf+0x1f6>
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	07 2e       	mov	r0, r23
    16c0:	00 0c       	add	r0, r0
    16c2:	88 0b       	sbc	r24, r24
    16c4:	99 0b       	sbc	r25, r25
    16c6:	0e 5f       	subi	r16, 0xFE	; 254
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	f3 2d       	mov	r31, r3
    16cc:	ff 76       	andi	r31, 0x6F	; 111
    16ce:	3f 2e       	mov	r3, r31
    16d0:	97 ff       	sbrs	r25, 7
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <vfprintf+0x212>
    16d4:	90 95       	com	r25
    16d6:	80 95       	com	r24
    16d8:	70 95       	com	r23
    16da:	61 95       	neg	r22
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	f0 68       	ori	r31, 0x80	; 128
    16e4:	3f 2e       	mov	r3, r31
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	a3 01       	movw	r20, r6
    16ec:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__ultoa_invert>
    16f0:	88 2e       	mov	r8, r24
    16f2:	86 18       	sub	r8, r6
    16f4:	45 c0       	rjmp	.+138    	; 0x1780 <vfprintf+0x2ac>
    16f6:	85 37       	cpi	r24, 0x75	; 117
    16f8:	31 f4       	brne	.+12     	; 0x1706 <vfprintf+0x232>
    16fa:	23 2d       	mov	r18, r3
    16fc:	2f 7e       	andi	r18, 0xEF	; 239
    16fe:	b2 2e       	mov	r11, r18
    1700:	2a e0       	ldi	r18, 0x0A	; 10
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	25 c0       	rjmp	.+74     	; 0x1750 <vfprintf+0x27c>
    1706:	93 2d       	mov	r25, r3
    1708:	99 7f       	andi	r25, 0xF9	; 249
    170a:	b9 2e       	mov	r11, r25
    170c:	8f 36       	cpi	r24, 0x6F	; 111
    170e:	c1 f0       	breq	.+48     	; 0x1740 <vfprintf+0x26c>
    1710:	18 f4       	brcc	.+6      	; 0x1718 <vfprintf+0x244>
    1712:	88 35       	cpi	r24, 0x58	; 88
    1714:	79 f0       	breq	.+30     	; 0x1734 <vfprintf+0x260>
    1716:	b5 c0       	rjmp	.+362    	; 0x1882 <vfprintf+0x3ae>
    1718:	80 37       	cpi	r24, 0x70	; 112
    171a:	19 f0       	breq	.+6      	; 0x1722 <vfprintf+0x24e>
    171c:	88 37       	cpi	r24, 0x78	; 120
    171e:	21 f0       	breq	.+8      	; 0x1728 <vfprintf+0x254>
    1720:	b0 c0       	rjmp	.+352    	; 0x1882 <vfprintf+0x3ae>
    1722:	e9 2f       	mov	r30, r25
    1724:	e0 61       	ori	r30, 0x10	; 16
    1726:	be 2e       	mov	r11, r30
    1728:	b4 fe       	sbrs	r11, 4
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <vfprintf+0x272>
    172c:	fb 2d       	mov	r31, r11
    172e:	f4 60       	ori	r31, 0x04	; 4
    1730:	bf 2e       	mov	r11, r31
    1732:	09 c0       	rjmp	.+18     	; 0x1746 <vfprintf+0x272>
    1734:	34 fe       	sbrs	r3, 4
    1736:	0a c0       	rjmp	.+20     	; 0x174c <vfprintf+0x278>
    1738:	29 2f       	mov	r18, r25
    173a:	26 60       	ori	r18, 0x06	; 6
    173c:	b2 2e       	mov	r11, r18
    173e:	06 c0       	rjmp	.+12     	; 0x174c <vfprintf+0x278>
    1740:	28 e0       	ldi	r18, 0x08	; 8
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	05 c0       	rjmp	.+10     	; 0x1750 <vfprintf+0x27c>
    1746:	20 e1       	ldi	r18, 0x10	; 16
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <vfprintf+0x27c>
    174c:	20 e1       	ldi	r18, 0x10	; 16
    174e:	32 e0       	ldi	r19, 0x02	; 2
    1750:	f8 01       	movw	r30, r16
    1752:	b7 fe       	sbrs	r11, 7
    1754:	07 c0       	rjmp	.+14     	; 0x1764 <vfprintf+0x290>
    1756:	60 81       	ld	r22, Z
    1758:	71 81       	ldd	r23, Z+1	; 0x01
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	93 81       	ldd	r25, Z+3	; 0x03
    175e:	0c 5f       	subi	r16, 0xFC	; 252
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <vfprintf+0x29c>
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 5f       	subi	r16, 0xFE	; 254
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	a3 01       	movw	r20, r6
    1772:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__ultoa_invert>
    1776:	88 2e       	mov	r8, r24
    1778:	86 18       	sub	r8, r6
    177a:	fb 2d       	mov	r31, r11
    177c:	ff 77       	andi	r31, 0x7F	; 127
    177e:	3f 2e       	mov	r3, r31
    1780:	36 fe       	sbrs	r3, 6
    1782:	0d c0       	rjmp	.+26     	; 0x179e <vfprintf+0x2ca>
    1784:	23 2d       	mov	r18, r3
    1786:	2e 7f       	andi	r18, 0xFE	; 254
    1788:	a2 2e       	mov	r10, r18
    178a:	89 14       	cp	r8, r9
    178c:	58 f4       	brcc	.+22     	; 0x17a4 <vfprintf+0x2d0>
    178e:	34 fe       	sbrs	r3, 4
    1790:	0b c0       	rjmp	.+22     	; 0x17a8 <vfprintf+0x2d4>
    1792:	32 fc       	sbrc	r3, 2
    1794:	09 c0       	rjmp	.+18     	; 0x17a8 <vfprintf+0x2d4>
    1796:	83 2d       	mov	r24, r3
    1798:	8e 7e       	andi	r24, 0xEE	; 238
    179a:	a8 2e       	mov	r10, r24
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <vfprintf+0x2d4>
    179e:	b8 2c       	mov	r11, r8
    17a0:	a3 2c       	mov	r10, r3
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <vfprintf+0x2d6>
    17a4:	b8 2c       	mov	r11, r8
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <vfprintf+0x2d6>
    17a8:	b9 2c       	mov	r11, r9
    17aa:	a4 fe       	sbrs	r10, 4
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <vfprintf+0x2f8>
    17ae:	fe 01       	movw	r30, r28
    17b0:	e8 0d       	add	r30, r8
    17b2:	f1 1d       	adc	r31, r1
    17b4:	80 81       	ld	r24, Z
    17b6:	80 33       	cpi	r24, 0x30	; 48
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <vfprintf+0x2ee>
    17ba:	9a 2d       	mov	r25, r10
    17bc:	99 7e       	andi	r25, 0xE9	; 233
    17be:	a9 2e       	mov	r10, r25
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <vfprintf+0x300>
    17c2:	a2 fe       	sbrs	r10, 2
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <vfprintf+0x2fe>
    17c6:	b3 94       	inc	r11
    17c8:	b3 94       	inc	r11
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <vfprintf+0x300>
    17cc:	8a 2d       	mov	r24, r10
    17ce:	86 78       	andi	r24, 0x86	; 134
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <vfprintf+0x300>
    17d2:	b3 94       	inc	r11
    17d4:	a3 fc       	sbrc	r10, 3
    17d6:	11 c0       	rjmp	.+34     	; 0x17fa <vfprintf+0x326>
    17d8:	a0 fe       	sbrs	r10, 0
    17da:	06 c0       	rjmp	.+12     	; 0x17e8 <vfprintf+0x314>
    17dc:	b2 14       	cp	r11, r2
    17de:	88 f4       	brcc	.+34     	; 0x1802 <vfprintf+0x32e>
    17e0:	28 0c       	add	r2, r8
    17e2:	92 2c       	mov	r9, r2
    17e4:	9b 18       	sub	r9, r11
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <vfprintf+0x330>
    17e8:	b2 14       	cp	r11, r2
    17ea:	60 f4       	brcc	.+24     	; 0x1804 <vfprintf+0x330>
    17ec:	b6 01       	movw	r22, r12
    17ee:	80 e2       	ldi	r24, 0x20	; 32
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    17f6:	b3 94       	inc	r11
    17f8:	f7 cf       	rjmp	.-18     	; 0x17e8 <vfprintf+0x314>
    17fa:	b2 14       	cp	r11, r2
    17fc:	18 f4       	brcc	.+6      	; 0x1804 <vfprintf+0x330>
    17fe:	2b 18       	sub	r2, r11
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x332>
    1802:	98 2c       	mov	r9, r8
    1804:	21 2c       	mov	r2, r1
    1806:	a4 fe       	sbrs	r10, 4
    1808:	10 c0       	rjmp	.+32     	; 0x182a <vfprintf+0x356>
    180a:	b6 01       	movw	r22, r12
    180c:	80 e3       	ldi	r24, 0x30	; 48
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    1814:	a2 fe       	sbrs	r10, 2
    1816:	17 c0       	rjmp	.+46     	; 0x1846 <vfprintf+0x372>
    1818:	a1 fc       	sbrc	r10, 1
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <vfprintf+0x34e>
    181c:	88 e7       	ldi	r24, 0x78	; 120
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0x352>
    1822:	88 e5       	ldi	r24, 0x58	; 88
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	b6 01       	movw	r22, r12
    1828:	0c c0       	rjmp	.+24     	; 0x1842 <vfprintf+0x36e>
    182a:	8a 2d       	mov	r24, r10
    182c:	86 78       	andi	r24, 0x86	; 134
    182e:	59 f0       	breq	.+22     	; 0x1846 <vfprintf+0x372>
    1830:	a1 fe       	sbrs	r10, 1
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <vfprintf+0x364>
    1834:	8b e2       	ldi	r24, 0x2B	; 43
    1836:	01 c0       	rjmp	.+2      	; 0x183a <vfprintf+0x366>
    1838:	80 e2       	ldi	r24, 0x20	; 32
    183a:	a7 fc       	sbrc	r10, 7
    183c:	8d e2       	ldi	r24, 0x2D	; 45
    183e:	b6 01       	movw	r22, r12
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    1846:	89 14       	cp	r8, r9
    1848:	38 f4       	brcc	.+14     	; 0x1858 <vfprintf+0x384>
    184a:	b6 01       	movw	r22, r12
    184c:	80 e3       	ldi	r24, 0x30	; 48
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    1854:	9a 94       	dec	r9
    1856:	f7 cf       	rjmp	.-18     	; 0x1846 <vfprintf+0x372>
    1858:	8a 94       	dec	r8
    185a:	f3 01       	movw	r30, r6
    185c:	e8 0d       	add	r30, r8
    185e:	f1 1d       	adc	r31, r1
    1860:	80 81       	ld	r24, Z
    1862:	b6 01       	movw	r22, r12
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    186a:	81 10       	cpse	r8, r1
    186c:	f5 cf       	rjmp	.-22     	; 0x1858 <vfprintf+0x384>
    186e:	22 20       	and	r2, r2
    1870:	09 f4       	brne	.+2      	; 0x1874 <vfprintf+0x3a0>
    1872:	42 ce       	rjmp	.-892    	; 0x14f8 <vfprintf+0x24>
    1874:	b6 01       	movw	r22, r12
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <fputc>
    187e:	2a 94       	dec	r2
    1880:	f6 cf       	rjmp	.-20     	; 0x186e <vfprintf+0x39a>
    1882:	f6 01       	movw	r30, r12
    1884:	86 81       	ldd	r24, Z+6	; 0x06
    1886:	97 81       	ldd	r25, Z+7	; 0x07
    1888:	02 c0       	rjmp	.+4      	; 0x188e <vfprintf+0x3ba>
    188a:	8f ef       	ldi	r24, 0xFF	; 255
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	2b 96       	adiw	r28, 0x0b	; 11
    1890:	e2 e1       	ldi	r30, 0x12	; 18
    1892:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__epilogue_restores__>

00001896 <putval>:
    1896:	20 fd       	sbrc	r18, 0
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <putval+0x16>
    189a:	fc 01       	movw	r30, r24
    189c:	23 fd       	sbrc	r18, 3
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <putval+0x14>
    18a0:	22 ff       	sbrs	r18, 2
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <putval+0x12>
    18a4:	73 83       	std	Z+3, r23	; 0x03
    18a6:	62 83       	std	Z+2, r22	; 0x02
    18a8:	51 83       	std	Z+1, r21	; 0x01
    18aa:	40 83       	st	Z, r20
    18ac:	08 95       	ret

000018ae <mulacc>:
    18ae:	44 fd       	sbrc	r20, 4
    18b0:	17 c0       	rjmp	.+46     	; 0x18e0 <mulacc+0x32>
    18b2:	46 fd       	sbrc	r20, 6
    18b4:	17 c0       	rjmp	.+46     	; 0x18e4 <mulacc+0x36>
    18b6:	ab 01       	movw	r20, r22
    18b8:	bc 01       	movw	r22, r24
    18ba:	da 01       	movw	r26, r20
    18bc:	fb 01       	movw	r30, r22
    18be:	aa 0f       	add	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	ee 1f       	adc	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	10 94       	com	r1
    18c8:	d1 f7       	brne	.-12     	; 0x18be <mulacc+0x10>
    18ca:	4a 0f       	add	r20, r26
    18cc:	5b 1f       	adc	r21, r27
    18ce:	6e 1f       	adc	r22, r30
    18d0:	7f 1f       	adc	r23, r31
    18d2:	cb 01       	movw	r24, r22
    18d4:	ba 01       	movw	r22, r20
    18d6:	66 0f       	add	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <mulacc+0x44>
    18e0:	33 e0       	ldi	r19, 0x03	; 3
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <mulacc+0x38>
    18e4:	34 e0       	ldi	r19, 0x04	; 4
    18e6:	66 0f       	add	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	31 50       	subi	r19, 0x01	; 1
    18f0:	d1 f7       	brne	.-12     	; 0x18e6 <mulacc+0x38>
    18f2:	62 0f       	add	r22, r18
    18f4:	71 1d       	adc	r23, r1
    18f6:	81 1d       	adc	r24, r1
    18f8:	91 1d       	adc	r25, r1
    18fa:	08 95       	ret

000018fc <skip_spaces>:
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	8c 01       	movw	r16, r24
    1906:	c8 01       	movw	r24, r16
    1908:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    190c:	ec 01       	movw	r28, r24
    190e:	97 fd       	sbrc	r25, 7
    1910:	08 c0       	rjmp	.+16     	; 0x1922 <skip_spaces+0x26>
    1912:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <isspace>
    1916:	89 2b       	or	r24, r25
    1918:	b1 f7       	brne	.-20     	; 0x1906 <skip_spaces+0xa>
    191a:	b8 01       	movw	r22, r16
    191c:	ce 01       	movw	r24, r28
    191e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ungetc>
    1922:	ce 01       	movw	r24, r28
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <conv_int>:
    192e:	8f 92       	push	r8
    1930:	9f 92       	push	r9
    1932:	af 92       	push	r10
    1934:	bf 92       	push	r11
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	8c 01       	movw	r16, r24
    1944:	d6 2f       	mov	r29, r22
    1946:	7a 01       	movw	r14, r20
    1948:	b2 2e       	mov	r11, r18
    194a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    194e:	9c 01       	movw	r18, r24
    1950:	33 27       	eor	r19, r19
    1952:	2b 32       	cpi	r18, 0x2B	; 43
    1954:	31 05       	cpc	r19, r1
    1956:	31 f0       	breq	.+12     	; 0x1964 <conv_int+0x36>
    1958:	2d 32       	cpi	r18, 0x2D	; 45
    195a:	31 05       	cpc	r19, r1
    195c:	61 f4       	brne	.+24     	; 0x1976 <conv_int+0x48>
    195e:	8b 2d       	mov	r24, r11
    1960:	80 68       	ori	r24, 0x80	; 128
    1962:	b8 2e       	mov	r11, r24
    1964:	d1 50       	subi	r29, 0x01	; 1
    1966:	11 f4       	brne	.+4      	; 0x196c <conv_int+0x3e>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	68 c0       	rjmp	.+208    	; 0x1a3c <conv_int+0x10e>
    196c:	c8 01       	movw	r24, r16
    196e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    1972:	97 fd       	sbrc	r25, 7
    1974:	f9 cf       	rjmp	.-14     	; 0x1968 <conv_int+0x3a>
    1976:	cb 2d       	mov	r28, r11
    1978:	cd 7f       	andi	r28, 0xFD	; 253
    197a:	2b 2d       	mov	r18, r11
    197c:	20 73       	andi	r18, 0x30	; 48
    197e:	09 f5       	brne	.+66     	; 0x19c2 <conv_int+0x94>
    1980:	80 33       	cpi	r24, 0x30	; 48
    1982:	f9 f4       	brne	.+62     	; 0x19c2 <conv_int+0x94>
    1984:	aa 24       	eor	r10, r10
    1986:	aa 94       	dec	r10
    1988:	ad 0e       	add	r10, r29
    198a:	09 f4       	brne	.+2      	; 0x198e <conv_int+0x60>
    198c:	43 c0       	rjmp	.+134    	; 0x1a14 <conv_int+0xe6>
    198e:	c8 01       	movw	r24, r16
    1990:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    1994:	97 fd       	sbrc	r25, 7
    1996:	3e c0       	rjmp	.+124    	; 0x1a14 <conv_int+0xe6>
    1998:	9c 01       	movw	r18, r24
    199a:	2f 7d       	andi	r18, 0xDF	; 223
    199c:	33 27       	eor	r19, r19
    199e:	28 35       	cpi	r18, 0x58	; 88
    19a0:	31 05       	cpc	r19, r1
    19a2:	49 f4       	brne	.+18     	; 0x19b6 <conv_int+0x88>
    19a4:	c2 64       	ori	r28, 0x42	; 66
    19a6:	d2 50       	subi	r29, 0x02	; 2
    19a8:	a9 f1       	breq	.+106    	; 0x1a14 <conv_int+0xe6>
    19aa:	c8 01       	movw	r24, r16
    19ac:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    19b0:	97 ff       	sbrs	r25, 7
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <conv_int+0x94>
    19b4:	2f c0       	rjmp	.+94     	; 0x1a14 <conv_int+0xe6>
    19b6:	b6 fe       	sbrs	r11, 6
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <conv_int+0x90>
    19ba:	c2 60       	ori	r28, 0x02	; 2
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <conv_int+0x92>
    19be:	c2 61       	ori	r28, 0x12	; 18
    19c0:	da 2d       	mov	r29, r10
    19c2:	81 2c       	mov	r8, r1
    19c4:	91 2c       	mov	r9, r1
    19c6:	54 01       	movw	r10, r8
    19c8:	20 ed       	ldi	r18, 0xD0	; 208
    19ca:	28 0f       	add	r18, r24
    19cc:	28 30       	cpi	r18, 0x08	; 8
    19ce:	80 f0       	brcs	.+32     	; 0x19f0 <conv_int+0xc2>
    19d0:	c4 ff       	sbrs	r28, 4
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <conv_int+0xae>
    19d4:	b8 01       	movw	r22, r16
    19d6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ungetc>
    19da:	19 c0       	rjmp	.+50     	; 0x1a0e <conv_int+0xe0>
    19dc:	2a 30       	cpi	r18, 0x0A	; 10
    19de:	40 f0       	brcs	.+16     	; 0x19f0 <conv_int+0xc2>
    19e0:	c6 ff       	sbrs	r28, 6
    19e2:	f8 cf       	rjmp	.-16     	; 0x19d4 <conv_int+0xa6>
    19e4:	2f 7d       	andi	r18, 0xDF	; 223
    19e6:	3f ee       	ldi	r19, 0xEF	; 239
    19e8:	32 0f       	add	r19, r18
    19ea:	36 30       	cpi	r19, 0x06	; 6
    19ec:	98 f7       	brcc	.-26     	; 0x19d4 <conv_int+0xa6>
    19ee:	27 50       	subi	r18, 0x07	; 7
    19f0:	4c 2f       	mov	r20, r28
    19f2:	c5 01       	movw	r24, r10
    19f4:	b4 01       	movw	r22, r8
    19f6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <mulacc>
    19fa:	4b 01       	movw	r8, r22
    19fc:	5c 01       	movw	r10, r24
    19fe:	c2 60       	ori	r28, 0x02	; 2
    1a00:	d1 50       	subi	r29, 0x01	; 1
    1a02:	59 f0       	breq	.+22     	; 0x1a1a <conv_int+0xec>
    1a04:	c8 01       	movw	r24, r16
    1a06:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    1a0a:	97 ff       	sbrs	r25, 7
    1a0c:	dd cf       	rjmp	.-70     	; 0x19c8 <conv_int+0x9a>
    1a0e:	c1 fd       	sbrc	r28, 1
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <conv_int+0xec>
    1a12:	aa cf       	rjmp	.-172    	; 0x1968 <conv_int+0x3a>
    1a14:	81 2c       	mov	r8, r1
    1a16:	91 2c       	mov	r9, r1
    1a18:	54 01       	movw	r10, r8
    1a1a:	c7 ff       	sbrs	r28, 7
    1a1c:	08 c0       	rjmp	.+16     	; 0x1a2e <conv_int+0x100>
    1a1e:	b0 94       	com	r11
    1a20:	a0 94       	com	r10
    1a22:	90 94       	com	r9
    1a24:	80 94       	com	r8
    1a26:	81 1c       	adc	r8, r1
    1a28:	91 1c       	adc	r9, r1
    1a2a:	a1 1c       	adc	r10, r1
    1a2c:	b1 1c       	adc	r11, r1
    1a2e:	2c 2f       	mov	r18, r28
    1a30:	b5 01       	movw	r22, r10
    1a32:	a4 01       	movw	r20, r8
    1a34:	c7 01       	movw	r24, r14
    1a36:	0e 94 4b 0c 	call	0x1896	; 0x1896 <putval>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	bf 90       	pop	r11
    1a4a:	af 90       	pop	r10
    1a4c:	9f 90       	pop	r9
    1a4e:	8f 90       	pop	r8
    1a50:	08 95       	ret

00001a52 <conv_brk>:
    1a52:	a0 e2       	ldi	r26, 0x20	; 32
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	ef e2       	ldi	r30, 0x2F	; 47
    1a58:	fd e0       	ldi	r31, 0x0D	; 13
    1a5a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x6>
    1a5e:	5c 01       	movw	r10, r24
    1a60:	96 2e       	mov	r9, r22
    1a62:	7a 01       	movw	r14, r20
    1a64:	f9 01       	movw	r30, r18
    1a66:	8e 01       	movw	r16, r28
    1a68:	0f 5f       	subi	r16, 0xFF	; 255
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	68 01       	movw	r12, r16
    1a6e:	80 e2       	ldi	r24, 0x20	; 32
    1a70:	d8 01       	movw	r26, r16
    1a72:	1d 92       	st	X+, r1
    1a74:	8a 95       	dec	r24
    1a76:	e9 f7       	brne	.-6      	; 0x1a72 <conv_brk+0x20>
    1a78:	d5 01       	movw	r26, r10
    1a7a:	13 96       	adiw	r26, 0x03	; 3
    1a7c:	8c 90       	ld	r8, X
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	61 2c       	mov	r6, r1
    1a84:	71 2c       	mov	r7, r1
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	83 fc       	sbrc	r8, 3
    1a8e:	25 91       	lpm	r18, Z+
    1a90:	83 fe       	sbrs	r8, 3
    1a92:	21 91       	ld	r18, Z+
    1a94:	8f 01       	movw	r16, r30
    1a96:	52 2e       	mov	r5, r18
    1a98:	21 11       	cpse	r18, r1
    1a9a:	03 c0       	rjmp	.+6      	; 0x1aa2 <conv_brk+0x50>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	92 c0       	rjmp	.+292    	; 0x1bc6 <conv_brk+0x174>
    1aa2:	2e 35       	cpi	r18, 0x5E	; 94
    1aa4:	11 f4       	brne	.+4      	; 0x1aaa <conv_brk+0x58>
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	51 f1       	breq	.+84     	; 0x1afe <conv_brk+0xac>
    1aaa:	43 2f       	mov	r20, r19
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	48 17       	cp	r20, r24
    1ab0:	59 07       	cpc	r21, r25
    1ab2:	3c f4       	brge	.+14     	; 0x1ac2 <conv_brk+0x70>
    1ab4:	2d 35       	cpi	r18, 0x5D	; 93
    1ab6:	59 f1       	breq	.+86     	; 0x1b0e <conv_brk+0xbc>
    1ab8:	2d 32       	cpi	r18, 0x2D	; 45
    1aba:	19 f4       	brne	.+6      	; 0x1ac2 <conv_brk+0x70>
    1abc:	77 20       	and	r7, r7
    1abe:	09 f1       	breq	.+66     	; 0x1b02 <conv_brk+0xb0>
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <conv_brk+0x76>
    1ac2:	77 20       	and	r7, r7
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <conv_brk+0x76>
    1ac6:	6a c0       	rjmp	.+212    	; 0x1b9c <conv_brk+0x14a>
    1ac8:	45 2d       	mov	r20, r5
    1aca:	46 95       	lsr	r20
    1acc:	46 95       	lsr	r20
    1ace:	46 95       	lsr	r20
    1ad0:	d6 01       	movw	r26, r12
    1ad2:	a4 0f       	add	r26, r20
    1ad4:	b1 1d       	adc	r27, r1
    1ad6:	45 2d       	mov	r20, r5
    1ad8:	47 70       	andi	r20, 0x07	; 7
    1ada:	8b 01       	movw	r16, r22
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <conv_brk+0x90>
    1ade:	00 0f       	add	r16, r16
    1ae0:	11 1f       	adc	r17, r17
    1ae2:	4a 95       	dec	r20
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <conv_brk+0x8c>
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	5c 91       	ld	r21, X
    1aea:	45 2b       	or	r20, r21
    1aec:	4c 93       	st	X, r20
    1aee:	65 14       	cp	r6, r5
    1af0:	59 f0       	breq	.+22     	; 0x1b08 <conv_brk+0xb6>
    1af2:	56 14       	cp	r5, r6
    1af4:	10 f4       	brcc	.+4      	; 0x1afa <conv_brk+0xa8>
    1af6:	53 94       	inc	r5
    1af8:	e7 cf       	rjmp	.-50     	; 0x1ac8 <conv_brk+0x76>
    1afa:	5a 94       	dec	r5
    1afc:	e5 cf       	rjmp	.-54     	; 0x1ac8 <conv_brk+0x76>
    1afe:	31 e0       	ldi	r19, 0x01	; 1
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <conv_brk+0xb8>
    1b02:	77 24       	eor	r7, r7
    1b04:	73 94       	inc	r7
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <conv_brk+0xb8>
    1b08:	71 2c       	mov	r7, r1
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	bf cf       	rjmp	.-130    	; 0x1a8c <conv_brk+0x3a>
    1b0e:	77 20       	and	r7, r7
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <conv_brk+0xc6>
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	80 62       	ori	r24, 0x20	; 32
    1b16:	8e 83       	std	Y+6, r24	; 0x06
    1b18:	31 11       	cpse	r19, r1
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <conv_brk+0xd0>
    1b1c:	88 24       	eor	r8, r8
    1b1e:	83 94       	inc	r8
    1b20:	17 c0       	rjmp	.+46     	; 0x1b50 <conv_brk+0xfe>
    1b22:	f6 01       	movw	r30, r12
    1b24:	9e 01       	movw	r18, r28
    1b26:	2f 5d       	subi	r18, 0xDF	; 223
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 95       	com	r24
    1b2e:	81 93       	st	Z+, r24
    1b30:	2e 17       	cp	r18, r30
    1b32:	3f 07       	cpc	r19, r31
    1b34:	d1 f7       	brne	.-12     	; 0x1b2a <conv_brk+0xd8>
    1b36:	f2 cf       	rjmp	.-28     	; 0x1b1c <conv_brk+0xca>
    1b38:	e1 14       	cp	r14, r1
    1b3a:	f1 04       	cpc	r15, r1
    1b3c:	29 f0       	breq	.+10     	; 0x1b48 <conv_brk+0xf6>
    1b3e:	d7 01       	movw	r26, r14
    1b40:	8c 93       	st	X, r24
    1b42:	f7 01       	movw	r30, r14
    1b44:	31 96       	adiw	r30, 0x01	; 1
    1b46:	7f 01       	movw	r14, r30
    1b48:	9a 94       	dec	r9
    1b4a:	81 2c       	mov	r8, r1
    1b4c:	99 20       	and	r9, r9
    1b4e:	f9 f0       	breq	.+62     	; 0x1b8e <conv_brk+0x13c>
    1b50:	c5 01       	movw	r24, r10
    1b52:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    1b56:	97 fd       	sbrc	r25, 7
    1b58:	18 c0       	rjmp	.+48     	; 0x1b8a <conv_brk+0x138>
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	ff 27       	eor	r31, r31
    1b5e:	23 e0       	ldi	r18, 0x03	; 3
    1b60:	f5 95       	asr	r31
    1b62:	e7 95       	ror	r30
    1b64:	2a 95       	dec	r18
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <conv_brk+0x10e>
    1b68:	ec 0d       	add	r30, r12
    1b6a:	fd 1d       	adc	r31, r13
    1b6c:	20 81       	ld	r18, Z
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	ac 01       	movw	r20, r24
    1b72:	47 70       	andi	r20, 0x07	; 7
    1b74:	55 27       	eor	r21, r21
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <conv_brk+0x12a>
    1b78:	35 95       	asr	r19
    1b7a:	27 95       	ror	r18
    1b7c:	4a 95       	dec	r20
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <conv_brk+0x126>
    1b80:	20 fd       	sbrc	r18, 0
    1b82:	da cf       	rjmp	.-76     	; 0x1b38 <conv_brk+0xe6>
    1b84:	b5 01       	movw	r22, r10
    1b86:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ungetc>
    1b8a:	81 10       	cpse	r8, r1
    1b8c:	87 cf       	rjmp	.-242    	; 0x1a9c <conv_brk+0x4a>
    1b8e:	e1 14       	cp	r14, r1
    1b90:	f1 04       	cpc	r15, r1
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <conv_brk+0x146>
    1b94:	d7 01       	movw	r26, r14
    1b96:	1c 92       	st	X, r1
    1b98:	c8 01       	movw	r24, r16
    1b9a:	15 c0       	rjmp	.+42     	; 0x1bc6 <conv_brk+0x174>
    1b9c:	42 2f       	mov	r20, r18
    1b9e:	46 95       	lsr	r20
    1ba0:	46 95       	lsr	r20
    1ba2:	46 95       	lsr	r20
    1ba4:	d6 01       	movw	r26, r12
    1ba6:	a4 0f       	add	r26, r20
    1ba8:	b1 1d       	adc	r27, r1
    1baa:	42 2f       	mov	r20, r18
    1bac:	47 70       	andi	r20, 0x07	; 7
    1bae:	8b 01       	movw	r16, r22
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <conv_brk+0x164>
    1bb2:	00 0f       	add	r16, r16
    1bb4:	11 1f       	adc	r17, r17
    1bb6:	4a 95       	dec	r20
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <conv_brk+0x160>
    1bba:	a8 01       	movw	r20, r16
    1bbc:	5c 91       	ld	r21, X
    1bbe:	45 2b       	or	r20, r21
    1bc0:	4c 93       	st	X, r20
    1bc2:	62 2e       	mov	r6, r18
    1bc4:	a2 cf       	rjmp	.-188    	; 0x1b0a <conv_brk+0xb8>
    1bc6:	a0 96       	adiw	r28, 0x20	; 32
    1bc8:	ef e0       	ldi	r30, 0x0F	; 15
    1bca:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x6>

00001bce <vfscanf>:
    1bce:	a0 e0       	ldi	r26, 0x00	; 0
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ed ee       	ldi	r30, 0xED	; 237
    1bd4:	fd e0       	ldi	r31, 0x0D	; 13
    1bd6:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x6>
    1bda:	6c 01       	movw	r12, r24
    1bdc:	eb 01       	movw	r28, r22
    1bde:	5a 01       	movw	r10, r20
    1be0:	fc 01       	movw	r30, r24
    1be2:	17 82       	std	Z+7, r1	; 0x07
    1be4:	16 82       	std	Z+6, r1	; 0x06
    1be6:	51 2c       	mov	r5, r1
    1be8:	f6 01       	movw	r30, r12
    1bea:	e3 80       	ldd	r14, Z+3	; 0x03
    1bec:	fe 01       	movw	r30, r28
    1bee:	e3 fc       	sbrc	r14, 3
    1bf0:	85 91       	lpm	r24, Z+
    1bf2:	e3 fe       	sbrs	r14, 3
    1bf4:	81 91       	ld	r24, Z+
    1bf6:	18 2f       	mov	r17, r24
    1bf8:	ef 01       	movw	r28, r30
    1bfa:	88 23       	and	r24, r24
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <vfscanf+0x32>
    1bfe:	ee c0       	rjmp	.+476    	; 0x1ddc <vfscanf+0x20e>
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <isspace>
    1c06:	89 2b       	or	r24, r25
    1c08:	21 f0       	breq	.+8      	; 0x1c12 <vfscanf+0x44>
    1c0a:	c6 01       	movw	r24, r12
    1c0c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <skip_spaces>
    1c10:	eb cf       	rjmp	.-42     	; 0x1be8 <vfscanf+0x1a>
    1c12:	15 32       	cpi	r17, 0x25	; 37
    1c14:	41 f4       	brne	.+16     	; 0x1c26 <vfscanf+0x58>
    1c16:	fe 01       	movw	r30, r28
    1c18:	e3 fc       	sbrc	r14, 3
    1c1a:	15 91       	lpm	r17, Z+
    1c1c:	e3 fe       	sbrs	r14, 3
    1c1e:	11 91       	ld	r17, Z+
    1c20:	ef 01       	movw	r28, r30
    1c22:	15 32       	cpi	r17, 0x25	; 37
    1c24:	81 f4       	brne	.+32     	; 0x1c46 <vfscanf+0x78>
    1c26:	c6 01       	movw	r24, r12
    1c28:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    1c2c:	97 fd       	sbrc	r25, 7
    1c2e:	d4 c0       	rjmp	.+424    	; 0x1dd8 <vfscanf+0x20a>
    1c30:	41 2f       	mov	r20, r17
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	9c 01       	movw	r18, r24
    1c36:	33 27       	eor	r19, r19
    1c38:	24 17       	cp	r18, r20
    1c3a:	35 07       	cpc	r19, r21
    1c3c:	a9 f2       	breq	.-86     	; 0x1be8 <vfscanf+0x1a>
    1c3e:	b6 01       	movw	r22, r12
    1c40:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ungetc>
    1c44:	cb c0       	rjmp	.+406    	; 0x1ddc <vfscanf+0x20e>
    1c46:	1a 32       	cpi	r17, 0x2A	; 42
    1c48:	39 f4       	brne	.+14     	; 0x1c58 <vfscanf+0x8a>
    1c4a:	e3 fc       	sbrc	r14, 3
    1c4c:	15 91       	lpm	r17, Z+
    1c4e:	e3 fe       	sbrs	r14, 3
    1c50:	11 91       	ld	r17, Z+
    1c52:	ef 01       	movw	r28, r30
    1c54:	01 e0       	ldi	r16, 0x01	; 1
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <vfscanf+0x8c>
    1c58:	00 e0       	ldi	r16, 0x00	; 0
    1c5a:	f1 2c       	mov	r15, r1
    1c5c:	20 ed       	ldi	r18, 0xD0	; 208
    1c5e:	21 0f       	add	r18, r17
    1c60:	2a 30       	cpi	r18, 0x0A	; 10
    1c62:	80 f4       	brcc	.+32     	; 0x1c84 <vfscanf+0xb6>
    1c64:	02 60       	ori	r16, 0x02	; 2
    1c66:	6f 2d       	mov	r22, r15
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	0e 94 57 0c 	call	0x18ae	; 0x18ae <mulacc>
    1c74:	f6 2e       	mov	r15, r22
    1c76:	fe 01       	movw	r30, r28
    1c78:	e3 fc       	sbrc	r14, 3
    1c7a:	15 91       	lpm	r17, Z+
    1c7c:	e3 fe       	sbrs	r14, 3
    1c7e:	11 91       	ld	r17, Z+
    1c80:	ef 01       	movw	r28, r30
    1c82:	ec cf       	rjmp	.-40     	; 0x1c5c <vfscanf+0x8e>
    1c84:	01 ff       	sbrs	r16, 1
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <vfscanf+0xc0>
    1c88:	f1 10       	cpse	r15, r1
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <vfscanf+0xc4>
    1c8c:	a7 c0       	rjmp	.+334    	; 0x1ddc <vfscanf+0x20e>
    1c8e:	ff 24       	eor	r15, r15
    1c90:	fa 94       	dec	r15
    1c92:	18 36       	cpi	r17, 0x68	; 104
    1c94:	19 f0       	breq	.+6      	; 0x1c9c <vfscanf+0xce>
    1c96:	1c 36       	cpi	r17, 0x6C	; 108
    1c98:	51 f0       	breq	.+20     	; 0x1cae <vfscanf+0xe0>
    1c9a:	10 c0       	rjmp	.+32     	; 0x1cbc <vfscanf+0xee>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e3 fc       	sbrc	r14, 3
    1ca0:	15 91       	lpm	r17, Z+
    1ca2:	e3 fe       	sbrs	r14, 3
    1ca4:	11 91       	ld	r17, Z+
    1ca6:	ef 01       	movw	r28, r30
    1ca8:	18 36       	cpi	r17, 0x68	; 104
    1caa:	41 f4       	brne	.+16     	; 0x1cbc <vfscanf+0xee>
    1cac:	08 60       	ori	r16, 0x08	; 8
    1cae:	04 60       	ori	r16, 0x04	; 4
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e3 fc       	sbrc	r14, 3
    1cb4:	15 91       	lpm	r17, Z+
    1cb6:	e3 fe       	sbrs	r14, 3
    1cb8:	11 91       	ld	r17, Z+
    1cba:	ef 01       	movw	r28, r30
    1cbc:	11 23       	and	r17, r17
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <vfscanf+0xf4>
    1cc0:	8d c0       	rjmp	.+282    	; 0x1ddc <vfscanf+0x20e>
    1cc2:	61 2f       	mov	r22, r17
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	88 e6       	ldi	r24, 0x68	; 104
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <strchr_P>
    1cce:	89 2b       	or	r24, r25
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <vfscanf+0x106>
    1cd2:	84 c0       	rjmp	.+264    	; 0x1ddc <vfscanf+0x20e>
    1cd4:	00 fd       	sbrc	r16, 0
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <vfscanf+0x118>
    1cd8:	f5 01       	movw	r30, r10
    1cda:	80 80       	ld	r8, Z
    1cdc:	91 80       	ldd	r9, Z+1	; 0x01
    1cde:	c5 01       	movw	r24, r10
    1ce0:	02 96       	adiw	r24, 0x02	; 2
    1ce2:	5c 01       	movw	r10, r24
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfscanf+0x11c>
    1ce6:	81 2c       	mov	r8, r1
    1ce8:	91 2c       	mov	r9, r1
    1cea:	1e 36       	cpi	r17, 0x6E	; 110
    1cec:	51 f4       	brne	.+20     	; 0x1d02 <vfscanf+0x134>
    1cee:	f6 01       	movw	r30, r12
    1cf0:	46 81       	ldd	r20, Z+6	; 0x06
    1cf2:	57 81       	ldd	r21, Z+7	; 0x07
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	20 2f       	mov	r18, r16
    1cfa:	c4 01       	movw	r24, r8
    1cfc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <putval>
    1d00:	73 cf       	rjmp	.-282    	; 0x1be8 <vfscanf+0x1a>
    1d02:	13 36       	cpi	r17, 0x63	; 99
    1d04:	a9 f4       	brne	.+42     	; 0x1d30 <vfscanf+0x162>
    1d06:	01 fd       	sbrc	r16, 1
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <vfscanf+0x140>
    1d0a:	ff 24       	eor	r15, r15
    1d0c:	f3 94       	inc	r15
    1d0e:	c6 01       	movw	r24, r12
    1d10:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    1d14:	97 fd       	sbrc	r25, 7
    1d16:	60 c0       	rjmp	.+192    	; 0x1dd8 <vfscanf+0x20a>
    1d18:	81 14       	cp	r8, r1
    1d1a:	91 04       	cpc	r9, r1
    1d1c:	29 f0       	breq	.+10     	; 0x1d28 <vfscanf+0x15a>
    1d1e:	f4 01       	movw	r30, r8
    1d20:	80 83       	st	Z, r24
    1d22:	c4 01       	movw	r24, r8
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	4c 01       	movw	r8, r24
    1d28:	fa 94       	dec	r15
    1d2a:	f1 10       	cpse	r15, r1
    1d2c:	f0 cf       	rjmp	.-32     	; 0x1d0e <vfscanf+0x140>
    1d2e:	50 c0       	rjmp	.+160    	; 0x1dd0 <vfscanf+0x202>
    1d30:	1b 35       	cpi	r17, 0x5B	; 91
    1d32:	59 f4       	brne	.+22     	; 0x1d4a <vfscanf+0x17c>
    1d34:	9e 01       	movw	r18, r28
    1d36:	a4 01       	movw	r20, r8
    1d38:	6f 2d       	mov	r22, r15
    1d3a:	c6 01       	movw	r24, r12
    1d3c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <conv_brk>
    1d40:	ec 01       	movw	r28, r24
    1d42:	89 2b       	or	r24, r25
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <vfscanf+0x17a>
    1d46:	44 c0       	rjmp	.+136    	; 0x1dd0 <vfscanf+0x202>
    1d48:	3e c0       	rjmp	.+124    	; 0x1dc6 <vfscanf+0x1f8>
    1d4a:	c6 01       	movw	r24, r12
    1d4c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <skip_spaces>
    1d50:	97 fd       	sbrc	r25, 7
    1d52:	42 c0       	rjmp	.+132    	; 0x1dd8 <vfscanf+0x20a>
    1d54:	1f 36       	cpi	r17, 0x6F	; 111
    1d56:	61 f1       	breq	.+88     	; 0x1db0 <vfscanf+0x1e2>
    1d58:	28 f4       	brcc	.+10     	; 0x1d64 <vfscanf+0x196>
    1d5a:	14 36       	cpi	r17, 0x64	; 100
    1d5c:	39 f1       	breq	.+78     	; 0x1dac <vfscanf+0x1de>
    1d5e:	19 36       	cpi	r17, 0x69	; 105
    1d60:	51 f1       	breq	.+84     	; 0x1db6 <vfscanf+0x1e8>
    1d62:	28 c0       	rjmp	.+80     	; 0x1db4 <vfscanf+0x1e6>
    1d64:	13 37       	cpi	r17, 0x73	; 115
    1d66:	71 f0       	breq	.+28     	; 0x1d84 <vfscanf+0x1b6>
    1d68:	15 37       	cpi	r17, 0x75	; 117
    1d6a:	01 f1       	breq	.+64     	; 0x1dac <vfscanf+0x1de>
    1d6c:	23 c0       	rjmp	.+70     	; 0x1db4 <vfscanf+0x1e6>
    1d6e:	81 14       	cp	r8, r1
    1d70:	91 04       	cpc	r9, r1
    1d72:	29 f0       	breq	.+10     	; 0x1d7e <vfscanf+0x1b0>
    1d74:	f4 01       	movw	r30, r8
    1d76:	60 82       	st	Z, r6
    1d78:	c4 01       	movw	r24, r8
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	4c 01       	movw	r8, r24
    1d7e:	fa 94       	dec	r15
    1d80:	ff 20       	and	r15, r15
    1d82:	71 f0       	breq	.+28     	; 0x1da0 <vfscanf+0x1d2>
    1d84:	c6 01       	movw	r24, r12
    1d86:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <fgetc>
    1d8a:	3c 01       	movw	r6, r24
    1d8c:	97 fd       	sbrc	r25, 7
    1d8e:	08 c0       	rjmp	.+16     	; 0x1da0 <vfscanf+0x1d2>
    1d90:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <isspace>
    1d94:	89 2b       	or	r24, r25
    1d96:	59 f3       	breq	.-42     	; 0x1d6e <vfscanf+0x1a0>
    1d98:	b6 01       	movw	r22, r12
    1d9a:	c3 01       	movw	r24, r6
    1d9c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ungetc>
    1da0:	81 14       	cp	r8, r1
    1da2:	91 04       	cpc	r9, r1
    1da4:	a9 f0       	breq	.+42     	; 0x1dd0 <vfscanf+0x202>
    1da6:	f4 01       	movw	r30, r8
    1da8:	10 82       	st	Z, r1
    1daa:	12 c0       	rjmp	.+36     	; 0x1dd0 <vfscanf+0x202>
    1dac:	00 62       	ori	r16, 0x20	; 32
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <vfscanf+0x1e8>
    1db0:	00 61       	ori	r16, 0x10	; 16
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <vfscanf+0x1e8>
    1db4:	00 64       	ori	r16, 0x40	; 64
    1db6:	20 2f       	mov	r18, r16
    1db8:	a4 01       	movw	r20, r8
    1dba:	6f 2d       	mov	r22, r15
    1dbc:	c6 01       	movw	r24, r12
    1dbe:	0e 94 97 0c 	call	0x192e	; 0x192e <conv_int>
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <vfscanf+0x202>
    1dc6:	f6 01       	movw	r30, r12
    1dc8:	83 81       	ldd	r24, Z+3	; 0x03
    1dca:	80 73       	andi	r24, 0x30	; 48
    1dcc:	29 f4       	brne	.+10     	; 0x1dd8 <vfscanf+0x20a>
    1dce:	06 c0       	rjmp	.+12     	; 0x1ddc <vfscanf+0x20e>
    1dd0:	00 fd       	sbrc	r16, 0
    1dd2:	0a cf       	rjmp	.-492    	; 0x1be8 <vfscanf+0x1a>
    1dd4:	53 94       	inc	r5
    1dd6:	08 cf       	rjmp	.-496    	; 0x1be8 <vfscanf+0x1a>
    1dd8:	55 20       	and	r5, r5
    1dda:	19 f0       	breq	.+6      	; 0x1de2 <vfscanf+0x214>
    1ddc:	85 2d       	mov	r24, r5
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <vfscanf+0x218>
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	9f ef       	ldi	r25, 0xFF	; 255
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	ef e0       	ldi	r30, 0x0F	; 15
    1dec:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x6>

00001df0 <isspace>:
    1df0:	91 11       	cpse	r25, r1
    1df2:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__ctype_isfalse>
    1df6:	80 32       	cpi	r24, 0x20	; 32
    1df8:	19 f0       	breq	.+6      	; 0x1e00 <isspace+0x10>
    1dfa:	89 50       	subi	r24, 0x09	; 9
    1dfc:	85 50       	subi	r24, 0x05	; 5
    1dfe:	c8 f7       	brcc	.-14     	; 0x1df2 <isspace+0x2>
    1e00:	08 95       	ret

00001e02 <strchr_P>:
    1e02:	fc 01       	movw	r30, r24
    1e04:	05 90       	lpm	r0, Z+
    1e06:	06 16       	cp	r0, r22
    1e08:	21 f0       	breq	.+8      	; 0x1e12 <strchr_P+0x10>
    1e0a:	00 20       	and	r0, r0
    1e0c:	d9 f7       	brne	.-10     	; 0x1e04 <strchr_P+0x2>
    1e0e:	c0 01       	movw	r24, r0
    1e10:	08 95       	ret
    1e12:	31 97       	sbiw	r30, 0x01	; 1
    1e14:	cf 01       	movw	r24, r30
    1e16:	08 95       	ret

00001e18 <strnlen_P>:
    1e18:	fc 01       	movw	r30, r24
    1e1a:	05 90       	lpm	r0, Z+
    1e1c:	61 50       	subi	r22, 0x01	; 1
    1e1e:	70 40       	sbci	r23, 0x00	; 0
    1e20:	01 10       	cpse	r0, r1
    1e22:	d8 f7       	brcc	.-10     	; 0x1e1a <strnlen_P+0x2>
    1e24:	80 95       	com	r24
    1e26:	90 95       	com	r25
    1e28:	8e 0f       	add	r24, r30
    1e2a:	9f 1f       	adc	r25, r31
    1e2c:	08 95       	ret

00001e2e <strnlen>:
    1e2e:	fc 01       	movw	r30, r24
    1e30:	61 50       	subi	r22, 0x01	; 1
    1e32:	70 40       	sbci	r23, 0x00	; 0
    1e34:	01 90       	ld	r0, Z+
    1e36:	01 10       	cpse	r0, r1
    1e38:	d8 f7       	brcc	.-10     	; 0x1e30 <strnlen+0x2>
    1e3a:	80 95       	com	r24
    1e3c:	90 95       	com	r25
    1e3e:	8e 0f       	add	r24, r30
    1e40:	9f 1f       	adc	r25, r31
    1e42:	08 95       	ret

00001e44 <fgetc>:
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	ec 01       	movw	r28, r24
    1e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4c:	20 ff       	sbrs	r18, 0
    1e4e:	33 c0       	rjmp	.+102    	; 0x1eb6 <fgetc+0x72>
    1e50:	26 ff       	sbrs	r18, 6
    1e52:	0a c0       	rjmp	.+20     	; 0x1e68 <fgetc+0x24>
    1e54:	2f 7b       	andi	r18, 0xBF	; 191
    1e56:	2b 83       	std	Y+3, r18	; 0x03
    1e58:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	9f 83       	std	Y+7, r25	; 0x07
    1e60:	8e 83       	std	Y+6, r24	; 0x06
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	29 c0       	rjmp	.+82     	; 0x1eba <fgetc+0x76>
    1e68:	22 ff       	sbrs	r18, 2
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <fgetc+0x46>
    1e6c:	e8 81       	ld	r30, Y
    1e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e70:	80 81       	ld	r24, Z
    1e72:	08 2e       	mov	r0, r24
    1e74:	00 0c       	add	r0, r0
    1e76:	99 0b       	sbc	r25, r25
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <fgetc+0x3e>
    1e7c:	20 62       	ori	r18, 0x20	; 32
    1e7e:	2b 83       	std	Y+3, r18	; 0x03
    1e80:	1a c0       	rjmp	.+52     	; 0x1eb6 <fgetc+0x72>
    1e82:	31 96       	adiw	r30, 0x01	; 1
    1e84:	f9 83       	std	Y+1, r31	; 0x01
    1e86:	e8 83       	st	Y, r30
    1e88:	0e c0       	rjmp	.+28     	; 0x1ea6 <fgetc+0x62>
    1e8a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e8c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e8e:	09 95       	icall
    1e90:	97 ff       	sbrs	r25, 7
    1e92:	09 c0       	rjmp	.+18     	; 0x1ea6 <fgetc+0x62>
    1e94:	2b 81       	ldd	r18, Y+3	; 0x03
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	11 f0       	breq	.+4      	; 0x1e9e <fgetc+0x5a>
    1e9a:	80 e2       	ldi	r24, 0x20	; 32
    1e9c:	01 c0       	rjmp	.+2      	; 0x1ea0 <fgetc+0x5c>
    1e9e:	80 e1       	ldi	r24, 0x10	; 16
    1ea0:	82 2b       	or	r24, r18
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
    1ea4:	08 c0       	rjmp	.+16     	; 0x1eb6 <fgetc+0x72>
    1ea6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	3f 83       	std	Y+7, r19	; 0x07
    1eb0:	2e 83       	std	Y+6, r18	; 0x06
    1eb2:	99 27       	eor	r25, r25
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <fgetc+0x76>
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	9f ef       	ldi	r25, 0xFF	; 255
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <fputc>:
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	fb 01       	movw	r30, r22
    1eca:	23 81       	ldd	r18, Z+3	; 0x03
    1ecc:	21 fd       	sbrc	r18, 1
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <fputc+0x16>
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	9f ef       	ldi	r25, 0xFF	; 255
    1ed4:	2c c0       	rjmp	.+88     	; 0x1f2e <fputc+0x6e>
    1ed6:	22 ff       	sbrs	r18, 2
    1ed8:	16 c0       	rjmp	.+44     	; 0x1f06 <fputc+0x46>
    1eda:	46 81       	ldd	r20, Z+6	; 0x06
    1edc:	57 81       	ldd	r21, Z+7	; 0x07
    1ede:	24 81       	ldd	r18, Z+4	; 0x04
    1ee0:	35 81       	ldd	r19, Z+5	; 0x05
    1ee2:	42 17       	cp	r20, r18
    1ee4:	53 07       	cpc	r21, r19
    1ee6:	44 f4       	brge	.+16     	; 0x1ef8 <fputc+0x38>
    1ee8:	a0 81       	ld	r26, Z
    1eea:	b1 81       	ldd	r27, Z+1	; 0x01
    1eec:	9d 01       	movw	r18, r26
    1eee:	2f 5f       	subi	r18, 0xFF	; 255
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	31 83       	std	Z+1, r19	; 0x01
    1ef4:	20 83       	st	Z, r18
    1ef6:	8c 93       	st	X, r24
    1ef8:	26 81       	ldd	r18, Z+6	; 0x06
    1efa:	37 81       	ldd	r19, Z+7	; 0x07
    1efc:	2f 5f       	subi	r18, 0xFF	; 255
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	37 83       	std	Z+7, r19	; 0x07
    1f02:	26 83       	std	Z+6, r18	; 0x06
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <fputc+0x6e>
    1f06:	8b 01       	movw	r16, r22
    1f08:	ec 01       	movw	r28, r24
    1f0a:	fb 01       	movw	r30, r22
    1f0c:	00 84       	ldd	r0, Z+8	; 0x08
    1f0e:	f1 85       	ldd	r31, Z+9	; 0x09
    1f10:	e0 2d       	mov	r30, r0
    1f12:	09 95       	icall
    1f14:	89 2b       	or	r24, r25
    1f16:	e1 f6       	brne	.-72     	; 0x1ed0 <fputc+0x10>
    1f18:	d8 01       	movw	r26, r16
    1f1a:	16 96       	adiw	r26, 0x06	; 6
    1f1c:	8d 91       	ld	r24, X+
    1f1e:	9c 91       	ld	r25, X
    1f20:	17 97       	sbiw	r26, 0x07	; 7
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	17 96       	adiw	r26, 0x07	; 7
    1f26:	9c 93       	st	X, r25
    1f28:	8e 93       	st	-X, r24
    1f2a:	16 97       	sbiw	r26, 0x06	; 6
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <ungetc>:
    1f38:	fb 01       	movw	r30, r22
    1f3a:	23 81       	ldd	r18, Z+3	; 0x03
    1f3c:	20 ff       	sbrs	r18, 0
    1f3e:	12 c0       	rjmp	.+36     	; 0x1f64 <ungetc+0x2c>
    1f40:	26 fd       	sbrc	r18, 6
    1f42:	10 c0       	rjmp	.+32     	; 0x1f64 <ungetc+0x2c>
    1f44:	8f 3f       	cpi	r24, 0xFF	; 255
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	93 07       	cpc	r25, r19
    1f4a:	61 f0       	breq	.+24     	; 0x1f64 <ungetc+0x2c>
    1f4c:	82 83       	std	Z+2, r24	; 0x02
    1f4e:	2f 7d       	andi	r18, 0xDF	; 223
    1f50:	20 64       	ori	r18, 0x40	; 64
    1f52:	23 83       	std	Z+3, r18	; 0x03
    1f54:	26 81       	ldd	r18, Z+6	; 0x06
    1f56:	37 81       	ldd	r19, Z+7	; 0x07
    1f58:	21 50       	subi	r18, 0x01	; 1
    1f5a:	31 09       	sbc	r19, r1
    1f5c:	37 83       	std	Z+7, r19	; 0x07
    1f5e:	26 83       	std	Z+6, r18	; 0x06
    1f60:	99 27       	eor	r25, r25
    1f62:	08 95       	ret
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	08 95       	ret

00001f6a <__ultoa_invert>:
    1f6a:	fa 01       	movw	r30, r20
    1f6c:	aa 27       	eor	r26, r26
    1f6e:	28 30       	cpi	r18, 0x08	; 8
    1f70:	51 f1       	breq	.+84     	; 0x1fc6 <__ultoa_invert+0x5c>
    1f72:	20 31       	cpi	r18, 0x10	; 16
    1f74:	81 f1       	breq	.+96     	; 0x1fd6 <__ultoa_invert+0x6c>
    1f76:	e8 94       	clt
    1f78:	6f 93       	push	r22
    1f7a:	6e 7f       	andi	r22, 0xFE	; 254
    1f7c:	6e 5f       	subi	r22, 0xFE	; 254
    1f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f80:	8f 4f       	sbci	r24, 0xFF	; 255
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	af 4f       	sbci	r26, 0xFF	; 255
    1f86:	b1 e0       	ldi	r27, 0x01	; 1
    1f88:	3e d0       	rcall	.+124    	; 0x2006 <__ultoa_invert+0x9c>
    1f8a:	b4 e0       	ldi	r27, 0x04	; 4
    1f8c:	3c d0       	rcall	.+120    	; 0x2006 <__ultoa_invert+0x9c>
    1f8e:	67 0f       	add	r22, r23
    1f90:	78 1f       	adc	r23, r24
    1f92:	89 1f       	adc	r24, r25
    1f94:	9a 1f       	adc	r25, r26
    1f96:	a1 1d       	adc	r26, r1
    1f98:	68 0f       	add	r22, r24
    1f9a:	79 1f       	adc	r23, r25
    1f9c:	8a 1f       	adc	r24, r26
    1f9e:	91 1d       	adc	r25, r1
    1fa0:	a1 1d       	adc	r26, r1
    1fa2:	6a 0f       	add	r22, r26
    1fa4:	71 1d       	adc	r23, r1
    1fa6:	81 1d       	adc	r24, r1
    1fa8:	91 1d       	adc	r25, r1
    1faa:	a1 1d       	adc	r26, r1
    1fac:	20 d0       	rcall	.+64     	; 0x1fee <__ultoa_invert+0x84>
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <__ultoa_invert+0x48>
    1fb0:	68 94       	set
    1fb2:	3f 91       	pop	r19
    1fb4:	2a e0       	ldi	r18, 0x0A	; 10
    1fb6:	26 9f       	mul	r18, r22
    1fb8:	11 24       	eor	r1, r1
    1fba:	30 19       	sub	r19, r0
    1fbc:	30 5d       	subi	r19, 0xD0	; 208
    1fbe:	31 93       	st	Z+, r19
    1fc0:	de f6       	brtc	.-74     	; 0x1f78 <__ultoa_invert+0xe>
    1fc2:	cf 01       	movw	r24, r30
    1fc4:	08 95       	ret
    1fc6:	46 2f       	mov	r20, r22
    1fc8:	47 70       	andi	r20, 0x07	; 7
    1fca:	40 5d       	subi	r20, 0xD0	; 208
    1fcc:	41 93       	st	Z+, r20
    1fce:	b3 e0       	ldi	r27, 0x03	; 3
    1fd0:	0f d0       	rcall	.+30     	; 0x1ff0 <__ultoa_invert+0x86>
    1fd2:	c9 f7       	brne	.-14     	; 0x1fc6 <__ultoa_invert+0x5c>
    1fd4:	f6 cf       	rjmp	.-20     	; 0x1fc2 <__ultoa_invert+0x58>
    1fd6:	46 2f       	mov	r20, r22
    1fd8:	4f 70       	andi	r20, 0x0F	; 15
    1fda:	40 5d       	subi	r20, 0xD0	; 208
    1fdc:	4a 33       	cpi	r20, 0x3A	; 58
    1fde:	18 f0       	brcs	.+6      	; 0x1fe6 <__ultoa_invert+0x7c>
    1fe0:	49 5d       	subi	r20, 0xD9	; 217
    1fe2:	31 fd       	sbrc	r19, 1
    1fe4:	40 52       	subi	r20, 0x20	; 32
    1fe6:	41 93       	st	Z+, r20
    1fe8:	02 d0       	rcall	.+4      	; 0x1fee <__ultoa_invert+0x84>
    1fea:	a9 f7       	brne	.-22     	; 0x1fd6 <__ultoa_invert+0x6c>
    1fec:	ea cf       	rjmp	.-44     	; 0x1fc2 <__ultoa_invert+0x58>
    1fee:	b4 e0       	ldi	r27, 0x04	; 4
    1ff0:	a6 95       	lsr	r26
    1ff2:	97 95       	ror	r25
    1ff4:	87 95       	ror	r24
    1ff6:	77 95       	ror	r23
    1ff8:	67 95       	ror	r22
    1ffa:	ba 95       	dec	r27
    1ffc:	c9 f7       	brne	.-14     	; 0x1ff0 <__ultoa_invert+0x86>
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	61 05       	cpc	r22, r1
    2002:	71 05       	cpc	r23, r1
    2004:	08 95       	ret
    2006:	9b 01       	movw	r18, r22
    2008:	ac 01       	movw	r20, r24
    200a:	0a 2e       	mov	r0, r26
    200c:	06 94       	lsr	r0
    200e:	57 95       	ror	r21
    2010:	47 95       	ror	r20
    2012:	37 95       	ror	r19
    2014:	27 95       	ror	r18
    2016:	ba 95       	dec	r27
    2018:	c9 f7       	brne	.-14     	; 0x200c <__ultoa_invert+0xa2>
    201a:	62 0f       	add	r22, r18
    201c:	73 1f       	adc	r23, r19
    201e:	84 1f       	adc	r24, r20
    2020:	95 1f       	adc	r25, r21
    2022:	a0 1d       	adc	r26, r0
    2024:	08 95       	ret

00002026 <__ctype_isfalse>:
    2026:	99 27       	eor	r25, r25
    2028:	88 27       	eor	r24, r24

0000202a <__ctype_istrue>:
    202a:	08 95       	ret

0000202c <__prologue_saves__>:
    202c:	2f 92       	push	r2
    202e:	3f 92       	push	r3
    2030:	4f 92       	push	r4
    2032:	5f 92       	push	r5
    2034:	6f 92       	push	r6
    2036:	7f 92       	push	r7
    2038:	8f 92       	push	r8
    203a:	9f 92       	push	r9
    203c:	af 92       	push	r10
    203e:	bf 92       	push	r11
    2040:	cf 92       	push	r12
    2042:	df 92       	push	r13
    2044:	ef 92       	push	r14
    2046:	ff 92       	push	r15
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	ca 1b       	sub	r28, r26
    2056:	db 0b       	sbc	r29, r27
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	09 94       	ijmp

00002064 <__epilogue_restores__>:
    2064:	2a 88       	ldd	r2, Y+18	; 0x12
    2066:	39 88       	ldd	r3, Y+17	; 0x11
    2068:	48 88       	ldd	r4, Y+16	; 0x10
    206a:	5f 84       	ldd	r5, Y+15	; 0x0f
    206c:	6e 84       	ldd	r6, Y+14	; 0x0e
    206e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2070:	8c 84       	ldd	r8, Y+12	; 0x0c
    2072:	9b 84       	ldd	r9, Y+11	; 0x0b
    2074:	aa 84       	ldd	r10, Y+10	; 0x0a
    2076:	b9 84       	ldd	r11, Y+9	; 0x09
    2078:	c8 84       	ldd	r12, Y+8	; 0x08
    207a:	df 80       	ldd	r13, Y+7	; 0x07
    207c:	ee 80       	ldd	r14, Y+6	; 0x06
    207e:	fd 80       	ldd	r15, Y+5	; 0x05
    2080:	0c 81       	ldd	r16, Y+4	; 0x04
    2082:	1b 81       	ldd	r17, Y+3	; 0x03
    2084:	aa 81       	ldd	r26, Y+2	; 0x02
    2086:	b9 81       	ldd	r27, Y+1	; 0x01
    2088:	ce 0f       	add	r28, r30
    208a:	d1 1d       	adc	r29, r1
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	ed 01       	movw	r28, r26
    2098:	08 95       	ret

0000209a <_exit>:
    209a:	f8 94       	cli

0000209c <__stop_program>:
    209c:	ff cf       	rjmp	.-2      	; 0x209c <__stop_program>

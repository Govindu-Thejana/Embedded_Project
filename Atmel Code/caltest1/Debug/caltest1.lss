
caltest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000010e2  00001176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800148  00800148  000011be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ee  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000820  00000000  00000000  00002776  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000912  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000038a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f07  00000000  00000000  00003e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00004d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__floatsisf+0x5c>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_Z10Calculatorv+0x174>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <_Z11Keypad_Readv+0x80>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <_Z11LCD_Commandh+0x2e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e2 ee       	ldi	r30, 0xE2	; 226
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a8 34       	cpi	r26, 0x48	; 72
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a8 e4       	ldi	r26, 0x48	; 72
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a8 35       	cpi	r26, 0x58	; 88
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 27 04 	call	0x84e	; 0x84e <main>
     198:	0c 94 6f 08 	jmp	0x10de	; 0x10de <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <_Z11LCD_Commandh>:
	}
}

void LCD_Command(unsigned char cmnd) {
	// Clear data pins
	PORTC &= ~(1 << LCD_D4 | 1 << LCD_D5 | 1 << LCD_D6 | 1 << LCD_D7);
     1a0:	98 b1       	in	r25, 0x08	; 8
     1a2:	90 7f       	andi	r25, 0xF0	; 240
     1a4:	98 b9       	out	0x08, r25	; 8

	// Send high nibble
	if (cmnd & 0x10) PORTC |= (1 << LCD_D4);
     1a6:	84 ff       	sbrs	r24, 4
     1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <_Z11LCD_Commandh+0x10>
     1aa:	98 b1       	in	r25, 0x08	; 8
     1ac:	91 60       	ori	r25, 0x01	; 1
     1ae:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x20) PORTC |= (1 << LCD_D5);
     1b0:	85 ff       	sbrs	r24, 5
     1b2:	03 c0       	rjmp	.+6      	; 0x1ba <_Z11LCD_Commandh+0x1a>
     1b4:	98 b1       	in	r25, 0x08	; 8
     1b6:	92 60       	ori	r25, 0x02	; 2
     1b8:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x40) PORTC |= (1 << LCD_D6);
     1ba:	86 ff       	sbrs	r24, 6
     1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <_Z11LCD_Commandh+0x24>
     1be:	98 b1       	in	r25, 0x08	; 8
     1c0:	94 60       	ori	r25, 0x04	; 4
     1c2:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x80) PORTC |= (1 << LCD_D7);
     1c4:	88 23       	and	r24, r24
     1c6:	1c f4       	brge	.+6      	; 0x1ce <_Z11LCD_Commandh+0x2e>
     1c8:	98 b1       	in	r25, 0x08	; 8
     1ca:	98 60       	ori	r25, 0x08	; 8
     1cc:	98 b9       	out	0x08, r25	; 8

	PORTB &= ~(1 << LCD_RS); // RS = 0 for command
     1ce:	95 b1       	in	r25, 0x05	; 5
     1d0:	9b 7f       	andi	r25, 0xFB	; 251
     1d2:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1 << LCD_RW); // RW = 0 for write
     1d4:	95 b1       	in	r25, 0x05	; 5
     1d6:	9d 7f       	andi	r25, 0xFD	; 253
     1d8:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << LCD_EN);  // EN = 1
     1da:	95 b1       	in	r25, 0x05	; 5
     1dc:	91 60       	ori	r25, 0x01	; 1
     1de:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	95 e0       	ldi	r25, 0x05	; 5
     1e2:	9a 95       	dec	r25
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <_Z11LCD_Commandh+0x42>
     1e6:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN); // EN = 0
     1e8:	95 b1       	in	r25, 0x05	; 5
     1ea:	9e 7f       	andi	r25, 0xFE	; 254
     1ec:	95 b9       	out	0x05, r25	; 5
     1ee:	e7 ec       	ldi	r30, 0xC7	; 199
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_Z11LCD_Commandh+0x52>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_Z11LCD_Commandh+0x58>
     1f8:	00 00       	nop
	_delay_us(50);

	// Send low nibble
	PORTC &= ~(1 << LCD_D4 | 1 << LCD_D5 | 1 << LCD_D6 | 1 << LCD_D7);
     1fa:	98 b1       	in	r25, 0x08	; 8
     1fc:	90 7f       	andi	r25, 0xF0	; 240
     1fe:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x01) PORTC |= (1 << LCD_D4);
     200:	80 ff       	sbrs	r24, 0
     202:	03 c0       	rjmp	.+6      	; 0x20a <_Z11LCD_Commandh+0x6a>
     204:	98 b1       	in	r25, 0x08	; 8
     206:	91 60       	ori	r25, 0x01	; 1
     208:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x02) PORTC |= (1 << LCD_D5);
     20a:	81 ff       	sbrs	r24, 1
     20c:	03 c0       	rjmp	.+6      	; 0x214 <_Z11LCD_Commandh+0x74>
     20e:	98 b1       	in	r25, 0x08	; 8
     210:	92 60       	ori	r25, 0x02	; 2
     212:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x04) PORTC |= (1 << LCD_D6);
     214:	82 ff       	sbrs	r24, 2
     216:	03 c0       	rjmp	.+6      	; 0x21e <_Z11LCD_Commandh+0x7e>
     218:	98 b1       	in	r25, 0x08	; 8
     21a:	94 60       	ori	r25, 0x04	; 4
     21c:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x08) PORTC |= (1 << LCD_D7);
     21e:	83 ff       	sbrs	r24, 3
     220:	03 c0       	rjmp	.+6      	; 0x228 <_Z11LCD_Commandh+0x88>
     222:	88 b1       	in	r24, 0x08	; 8
     224:	88 60       	ori	r24, 0x08	; 8
     226:	88 b9       	out	0x08, r24	; 8

	PORTB |= (1 << LCD_EN);  // EN = 1
     228:	85 b1       	in	r24, 0x05	; 5
     22a:	81 60       	ori	r24, 0x01	; 1
     22c:	85 b9       	out	0x05, r24	; 5
     22e:	f5 e0       	ldi	r31, 0x05	; 5
     230:	fa 95       	dec	r31
     232:	f1 f7       	brne	.-4      	; 0x230 <_Z11LCD_Commandh+0x90>
     234:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN); // EN = 0
     236:	85 b1       	in	r24, 0x05	; 5
     238:	8e 7f       	andi	r24, 0xFE	; 254
     23a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23c:	8f e3       	ldi	r24, 0x3F	; 63
     23e:	9f e1       	ldi	r25, 0x1F	; 31
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <_Z11LCD_Commandh+0xa0>
     244:	00 c0       	rjmp	.+0      	; 0x246 <_Z11LCD_Commandh+0xa6>
     246:	00 00       	nop
     248:	08 95       	ret

0000024a <_Z8LCD_Datah>:
	_delay_ms(2);
}

void LCD_Data(unsigned char data) {
	// Clear data pins
	PORTC &= ~(1 << LCD_D4 | 1 << LCD_D5 | 1 << LCD_D6 | 1 << LCD_D7);
     24a:	98 b1       	in	r25, 0x08	; 8
     24c:	90 7f       	andi	r25, 0xF0	; 240
     24e:	98 b9       	out	0x08, r25	; 8

	// Send high nibble
	if (data & 0x10) PORTC |= (1 << LCD_D4);
     250:	84 ff       	sbrs	r24, 4
     252:	03 c0       	rjmp	.+6      	; 0x25a <_Z8LCD_Datah+0x10>
     254:	98 b1       	in	r25, 0x08	; 8
     256:	91 60       	ori	r25, 0x01	; 1
     258:	98 b9       	out	0x08, r25	; 8
	if (data & 0x20) PORTC |= (1 << LCD_D5);
     25a:	85 ff       	sbrs	r24, 5
     25c:	03 c0       	rjmp	.+6      	; 0x264 <_Z8LCD_Datah+0x1a>
     25e:	98 b1       	in	r25, 0x08	; 8
     260:	92 60       	ori	r25, 0x02	; 2
     262:	98 b9       	out	0x08, r25	; 8
	if (data & 0x40) PORTC |= (1 << LCD_D6);
     264:	86 ff       	sbrs	r24, 6
     266:	03 c0       	rjmp	.+6      	; 0x26e <_Z8LCD_Datah+0x24>
     268:	98 b1       	in	r25, 0x08	; 8
     26a:	94 60       	ori	r25, 0x04	; 4
     26c:	98 b9       	out	0x08, r25	; 8
	if (data & 0x80) PORTC |= (1 << LCD_D7);
     26e:	88 23       	and	r24, r24
     270:	1c f4       	brge	.+6      	; 0x278 <_Z8LCD_Datah+0x2e>
     272:	98 b1       	in	r25, 0x08	; 8
     274:	98 60       	ori	r25, 0x08	; 8
     276:	98 b9       	out	0x08, r25	; 8

	PORTB |= (1 << LCD_RS);  // RS = 1 for data
     278:	95 b1       	in	r25, 0x05	; 5
     27a:	94 60       	ori	r25, 0x04	; 4
     27c:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1 << LCD_RW); // RW = 0 for write
     27e:	95 b1       	in	r25, 0x05	; 5
     280:	9d 7f       	andi	r25, 0xFD	; 253
     282:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << LCD_EN);  // EN = 1
     284:	95 b1       	in	r25, 0x05	; 5
     286:	91 60       	ori	r25, 0x01	; 1
     288:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     28a:	95 e0       	ldi	r25, 0x05	; 5
     28c:	9a 95       	dec	r25
     28e:	f1 f7       	brne	.-4      	; 0x28c <_Z8LCD_Datah+0x42>
     290:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN); // EN = 0
     292:	95 b1       	in	r25, 0x05	; 5
     294:	9e 7f       	andi	r25, 0xFE	; 254
     296:	95 b9       	out	0x05, r25	; 5
     298:	e7 ec       	ldi	r30, 0xC7	; 199
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <_Z8LCD_Datah+0x52>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <_Z8LCD_Datah+0x58>
     2a2:	00 00       	nop
	_delay_us(50);

	// Send low nibble
	PORTC &= ~(1 << LCD_D4 | 1 << LCD_D5 | 1 << LCD_D6 | 1 << LCD_D7);
     2a4:	98 b1       	in	r25, 0x08	; 8
     2a6:	90 7f       	andi	r25, 0xF0	; 240
     2a8:	98 b9       	out	0x08, r25	; 8
	if (data & 0x01) PORTC |= (1 << LCD_D4);
     2aa:	80 ff       	sbrs	r24, 0
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <_Z8LCD_Datah+0x6a>
     2ae:	98 b1       	in	r25, 0x08	; 8
     2b0:	91 60       	ori	r25, 0x01	; 1
     2b2:	98 b9       	out	0x08, r25	; 8
	if (data & 0x02) PORTC |= (1 << LCD_D5);
     2b4:	81 ff       	sbrs	r24, 1
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <_Z8LCD_Datah+0x74>
     2b8:	98 b1       	in	r25, 0x08	; 8
     2ba:	92 60       	ori	r25, 0x02	; 2
     2bc:	98 b9       	out	0x08, r25	; 8
	if (data & 0x04) PORTC |= (1 << LCD_D6);
     2be:	82 ff       	sbrs	r24, 2
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <_Z8LCD_Datah+0x7e>
     2c2:	98 b1       	in	r25, 0x08	; 8
     2c4:	94 60       	ori	r25, 0x04	; 4
     2c6:	98 b9       	out	0x08, r25	; 8
	if (data & 0x08) PORTC |= (1 << LCD_D7);
     2c8:	83 ff       	sbrs	r24, 3
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <_Z8LCD_Datah+0x88>
     2cc:	88 b1       	in	r24, 0x08	; 8
     2ce:	88 60       	ori	r24, 0x08	; 8
     2d0:	88 b9       	out	0x08, r24	; 8

	PORTB |= (1 << LCD_EN);  // EN = 1
     2d2:	85 b1       	in	r24, 0x05	; 5
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	85 b9       	out	0x05, r24	; 5
     2d8:	f5 e0       	ldi	r31, 0x05	; 5
     2da:	fa 95       	dec	r31
     2dc:	f1 f7       	brne	.-4      	; 0x2da <_Z8LCD_Datah+0x90>
     2de:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN); // EN = 0
     2e0:	85 b1       	in	r24, 0x05	; 5
     2e2:	8e 7f       	andi	r24, 0xFE	; 254
     2e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e6:	8f e3       	ldi	r24, 0x3F	; 63
     2e8:	9f e1       	ldi	r25, 0x1F	; 31
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <_Z8LCD_Datah+0xa0>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <_Z8LCD_Datah+0xa6>
     2f0:	00 00       	nop
     2f2:	08 95       	ret

000002f4 <_Z8LCD_Initv>:
     2f4:	2f ef       	ldi	r18, 0xFF	; 255
     2f6:	89 ef       	ldi	r24, 0xF9	; 249
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	21 50       	subi	r18, 0x01	; 1
     2fc:	80 40       	sbci	r24, 0x00	; 0
     2fe:	90 40       	sbci	r25, 0x00	; 0
     300:	e1 f7       	brne	.-8      	; 0x2fa <_Z8LCD_Initv+0x6>
     302:	00 c0       	rjmp	.+0      	; 0x304 <_Z8LCD_Initv+0x10>
     304:	00 00       	nop
	_delay_ms(2);
}

void LCD_Init(void) {
	_delay_ms(20);          // Wait for LCD to power up
	LCD_Command(0x02);      // 4-bit mode
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11LCD_Commandh>
	LCD_Command(0x28);      // 2 lines, 5x7 matrix
     30c:	88 e2       	ldi	r24, 0x28	; 40
     30e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11LCD_Commandh>
	LCD_Command(0x0C);      // Display on, cursor off
     312:	8c e0       	ldi	r24, 0x0C	; 12
     314:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11LCD_Commandh>
	LCD_Command(0x06);      // Increment cursor
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11LCD_Commandh>
	LCD_Command(0x01);      // Clear display
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11LCD_Commandh>
     324:	8f e3       	ldi	r24, 0x3F	; 63
     326:	9f e1       	ldi	r25, 0x1F	; 31
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <_Z8LCD_Initv+0x34>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <_Z8LCD_Initv+0x3a>
     32e:	00 00       	nop
     330:	08 95       	ret

00000332 <_Z10LCD_StringPKc>:
	_delay_ms(2);
}

void LCD_String(const char *str) {
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
	while (*str) {
     338:	88 81       	ld	r24, Y
     33a:	88 23       	and	r24, r24
     33c:	21 f0       	breq	.+8      	; 0x346 <_Z10LCD_StringPKc+0x14>
		LCD_Data(*str++);
     33e:	21 96       	adiw	r28, 0x01	; 1
     340:	0e 94 25 01 	call	0x24a	; 0x24a <_Z8LCD_Datah>
	LCD_Command(0x01);      // Clear display
	_delay_ms(2);
}

void LCD_String(const char *str) {
	while (*str) {
     344:	f9 cf       	rjmp	.-14     	; 0x338 <_Z10LCD_StringPKc+0x6>
		LCD_Data(*str++);
	}
}
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <_Z9LCD_Clearv>:

void LCD_Clear(void) {
	LCD_Command(0x01);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11LCD_Commandh>
     352:	8f e3       	ldi	r24, 0x3F	; 63
     354:	9f e1       	ldi	r25, 0x1F	; 31
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <_Z9LCD_Clearv+0xa>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <_Z9LCD_Clearv+0x10>
     35c:	00 00       	nop
     35e:	08 95       	ret

00000360 <_Z11Keypad_Readv>:
	_delay_ms(2);
}

char Keypad_Read(void) {
	// Set all columns high
	PORTD |= (1 << COL1 | 1 << COL2 | 1 << COL3 | 1 << COL4);
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	80 6f       	ori	r24, 0xF0	; 240
     364:	8b b9       	out	0x0b, r24	; 11

	// Check Row 1
	PORTD &= ~(1 << COL1); // Set COL1 low
     366:	8b b1       	in	r24, 0x0b	; 11
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '7'; }
     36c:	48 99       	sbic	0x09, 0	; 9
     36e:	0b c0       	rjmp	.+22     	; 0x386 <_Z11Keypad_Readv+0x26>
     370:	2f ef       	ldi	r18, 0xFF	; 255
     372:	80 e7       	ldi	r24, 0x70	; 112
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <_Z11Keypad_Readv+0x16>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <_Z11Keypad_Readv+0x20>
     380:	00 00       	nop
     382:	87 e3       	ldi	r24, 0x37	; 55
     384:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return '4'; }
     386:	49 99       	sbic	0x09, 1	; 9
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <_Z11Keypad_Readv+0x40>
     38a:	2f ef       	ldi	r18, 0xFF	; 255
     38c:	80 e7       	ldi	r24, 0x70	; 112
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	21 50       	subi	r18, 0x01	; 1
     392:	80 40       	sbci	r24, 0x00	; 0
     394:	90 40       	sbci	r25, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <_Z11Keypad_Readv+0x30>
     398:	00 c0       	rjmp	.+0      	; 0x39a <_Z11Keypad_Readv+0x3a>
     39a:	00 00       	nop
     39c:	84 e3       	ldi	r24, 0x34	; 52
     39e:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '1'; }
     3a0:	4a 99       	sbic	0x09, 2	; 9
     3a2:	0b c0       	rjmp	.+22     	; 0x3ba <_Z11Keypad_Readv+0x5a>
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	80 e7       	ldi	r24, 0x70	; 112
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	21 50       	subi	r18, 0x01	; 1
     3ac:	80 40       	sbci	r24, 0x00	; 0
     3ae:	90 40       	sbci	r25, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <_Z11Keypad_Readv+0x4a>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <_Z11Keypad_Readv+0x54>
     3b4:	00 00       	nop
     3b6:	81 e3       	ldi	r24, 0x31	; 49
     3b8:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return 'O'; } // ON/C
     3ba:	4b 99       	sbic	0x09, 3	; 9
     3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <_Z11Keypad_Readv+0x74>
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	80 e7       	ldi	r24, 0x70	; 112
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <_Z11Keypad_Readv+0x64>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_Z11Keypad_Readv+0x6e>
     3ce:	00 00       	nop
     3d0:	8f e4       	ldi	r24, 0x4F	; 79
     3d2:	08 95       	ret
	PORTD |= (1 << COL1);
     3d4:	8b b1       	in	r24, 0x0b	; 11
     3d6:	80 61       	ori	r24, 0x10	; 16
     3d8:	8b b9       	out	0x0b, r24	; 11

	// Check Row 2
	PORTD &= ~(1 << COL2); // Set COL2 low
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	8f 7d       	andi	r24, 0xDF	; 223
     3de:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '8'; }
     3e0:	48 99       	sbic	0x09, 0	; 9
     3e2:	0b c0       	rjmp	.+22     	; 0x3fa <_Z11Keypad_Readv+0x9a>
     3e4:	2f ef       	ldi	r18, 0xFF	; 255
     3e6:	80 e7       	ldi	r24, 0x70	; 112
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	21 50       	subi	r18, 0x01	; 1
     3ec:	80 40       	sbci	r24, 0x00	; 0
     3ee:	90 40       	sbci	r25, 0x00	; 0
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <_Z11Keypad_Readv+0x8a>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_Z11Keypad_Readv+0x94>
     3f4:	00 00       	nop
     3f6:	88 e3       	ldi	r24, 0x38	; 56
     3f8:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return '5'; }
     3fa:	49 99       	sbic	0x09, 1	; 9
     3fc:	0b c0       	rjmp	.+22     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3fe:	2f ef       	ldi	r18, 0xFF	; 255
     400:	80 e7       	ldi	r24, 0x70	; 112
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	21 50       	subi	r18, 0x01	; 1
     406:	80 40       	sbci	r24, 0x00	; 0
     408:	90 40       	sbci	r25, 0x00	; 0
     40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
     410:	85 e3       	ldi	r24, 0x35	; 53
     412:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '2'; }
     414:	4a 99       	sbic	0x09, 2	; 9
     416:	0b c0       	rjmp	.+22     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	80 e7       	ldi	r24, 0x70	; 112
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	80 40       	sbci	r24, 0x00	; 0
     422:	90 40       	sbci	r25, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     428:	00 00       	nop
     42a:	82 e3       	ldi	r24, 0x32	; 50
     42c:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return '0'; }
     42e:	4b 99       	sbic	0x09, 3	; 9
     430:	0b c0       	rjmp	.+22     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     432:	2f ef       	ldi	r18, 0xFF	; 255
     434:	80 e7       	ldi	r24, 0x70	; 112
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	21 50       	subi	r18, 0x01	; 1
     43a:	80 40       	sbci	r24, 0x00	; 0
     43c:	90 40       	sbci	r25, 0x00	; 0
     43e:	e1 f7       	brne	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     442:	00 00       	nop
     444:	80 e3       	ldi	r24, 0x30	; 48
     446:	08 95       	ret
	PORTD |= (1 << COL2);
     448:	8b b1       	in	r24, 0x0b	; 11
     44a:	80 62       	ori	r24, 0x20	; 32
     44c:	8b b9       	out	0x0b, r24	; 11

	// Check Row 3
	PORTD &= ~(1 << COL3); // Set COL3 low
     44e:	8b b1       	in	r24, 0x0b	; 11
     450:	8f 7b       	andi	r24, 0xBF	; 191
     452:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '9'; }
     454:	48 99       	sbic	0x09, 0	; 9
     456:	0b c0       	rjmp	.+22     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	80 e7       	ldi	r24, 0x70	; 112
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	21 50       	subi	r18, 0x01	; 1
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 40       	sbci	r25, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     468:	00 00       	nop
     46a:	89 e3       	ldi	r24, 0x39	; 57
     46c:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return '6'; }
     46e:	49 99       	sbic	0x09, 1	; 9
     470:	0b c0       	rjmp	.+22     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	80 e7       	ldi	r24, 0x70	; 112
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	80 40       	sbci	r24, 0x00	; 0
     47c:	90 40       	sbci	r25, 0x00	; 0
     47e:	e1 f7       	brne	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     482:	00 00       	nop
     484:	86 e3       	ldi	r24, 0x36	; 54
     486:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '3'; }
     488:	4a 99       	sbic	0x09, 2	; 9
     48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	80 e7       	ldi	r24, 0x70	; 112
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     49c:	00 00       	nop
     49e:	83 e3       	ldi	r24, 0x33	; 51
     4a0:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return '='; }
     4a2:	4b 99       	sbic	0x09, 3	; 9
     4a4:	0b c0       	rjmp	.+22     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4a6:	2f ef       	ldi	r18, 0xFF	; 255
     4a8:	80 e7       	ldi	r24, 0x70	; 112
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	21 50       	subi	r18, 0x01	; 1
     4ae:	80 40       	sbci	r24, 0x00	; 0
     4b0:	90 40       	sbci	r25, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b6:	00 00       	nop
     4b8:	8d e3       	ldi	r24, 0x3D	; 61
     4ba:	08 95       	ret
	PORTD |= (1 << COL3);
     4bc:	8b b1       	in	r24, 0x0b	; 11
     4be:	80 64       	ori	r24, 0x40	; 64
     4c0:	8b b9       	out	0x0b, r24	; 11

	// Check Row 4
	PORTD &= ~(1 << COL4); // Set COL4 low
     4c2:	8b b1       	in	r24, 0x0b	; 11
     4c4:	8f 77       	andi	r24, 0x7F	; 127
     4c6:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '/'; }
     4c8:	48 99       	sbic	0x09, 0	; 9
     4ca:	0b c0       	rjmp	.+22     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4cc:	2f ef       	ldi	r18, 0xFF	; 255
     4ce:	80 e7       	ldi	r24, 0x70	; 112
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	21 50       	subi	r18, 0x01	; 1
     4d4:	80 40       	sbci	r24, 0x00	; 0
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4dc:	00 00       	nop
     4de:	8f e2       	ldi	r24, 0x2F	; 47
     4e0:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return 'x'; }
     4e2:	49 99       	sbic	0x09, 1	; 9
     4e4:	0b c0       	rjmp	.+22     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4e6:	2f ef       	ldi	r18, 0xFF	; 255
     4e8:	80 e7       	ldi	r24, 0x70	; 112
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	90 40       	sbci	r25, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4f6:	00 00       	nop
     4f8:	88 e7       	ldi	r24, 0x78	; 120
     4fa:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '-'; }
     4fc:	4a 99       	sbic	0x09, 2	; 9
     4fe:	0b c0       	rjmp	.+22     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     500:	2f ef       	ldi	r18, 0xFF	; 255
     502:	80 e7       	ldi	r24, 0x70	; 112
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	21 50       	subi	r18, 0x01	; 1
     508:	80 40       	sbci	r24, 0x00	; 0
     50a:	90 40       	sbci	r25, 0x00	; 0
     50c:	e1 f7       	brne	.-8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     510:	00 00       	nop
     512:	8d e2       	ldi	r24, 0x2D	; 45
     514:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return '+'; }
     516:	4b 99       	sbic	0x09, 3	; 9
     518:	0b c0       	rjmp	.+22     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	80 e7       	ldi	r24, 0x70	; 112
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	21 50       	subi	r18, 0x01	; 1
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	90 40       	sbci	r25, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     52a:	00 00       	nop
     52c:	8b e2       	ldi	r24, 0x2B	; 43
     52e:	08 95       	ret
	PORTD |= (1 << COL4);
     530:	8b b1       	in	r24, 0x0b	; 11
     532:	80 68       	ori	r24, 0x80	; 128
     534:	8b b9       	out	0x0b, r24	; 11

	return 0; // No key pressed
     536:	80 e0       	ldi	r24, 0x00	; 0
}
     538:	08 95       	ret

0000053a <_Z10Calculatorv>:

void Calculator(void) {
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	a0 97       	sbiw	r28, 0x20	; 32
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
	long result = 0;
	float result_float = 0.0;
	static char last_result[16] = ""; // Store last result to display persistently

	// If there's a previous result, display it
	if (last_result[0] != '\0') {
     562:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     566:	88 23       	and	r24, r24
     568:	e1 f0       	breq	.+56     	; 0x5a2 <_Z10Calculatorv+0x68>
		LCD_Clear();
     56a:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z9LCD_Clearv>
		LCD_String(last_result);
     56e:	88 e4       	ldi	r24, 0x48	; 72
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
		// Wait for ON/C to start new calculation
		while ((key = Keypad_Read()) != 'O') {
     576:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     57a:	8f 34       	cpi	r24, 0x4F	; 79
     57c:	39 f0       	breq	.+14     	; 0x58c <_Z10Calculatorv+0x52>
     57e:	8f e3       	ldi	r24, 0x3F	; 63
     580:	9c e9       	ldi	r25, 0x9C	; 156
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <_Z10Calculatorv+0x48>
     586:	00 c0       	rjmp	.+0      	; 0x588 <_Z10Calculatorv+0x4e>
     588:	00 00       	nop
     58a:	f5 cf       	rjmp	.-22     	; 0x576 <_Z10Calculatorv+0x3c>
			_delay_ms(10);
		}
		while (Keypad_Read() != 0) _delay_ms(10); // Wait for key release
     58c:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     590:	88 23       	and	r24, r24
     592:	39 f0       	breq	.+14     	; 0x5a2 <_Z10Calculatorv+0x68>
     594:	8f e3       	ldi	r24, 0x3F	; 63
     596:	9c e9       	ldi	r25, 0x9C	; 156
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <_Z10Calculatorv+0x5e>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <_Z10Calculatorv+0x64>
     59e:	00 00       	nop
     5a0:	f5 cf       	rjmp	.-22     	; 0x58c <_Z10Calculatorv+0x52>
	}

	// Start new calculation
	LCD_Clear();
     5a2:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z9LCD_Clearv>
	LCD_String("1st Num:");
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
	while ((key = Keypad_Read()) == 0) _delay_ms(10);
     5ae:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     5b2:	18 2f       	mov	r17, r24
     5b4:	81 11       	cpse	r24, r1
     5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <_Z10Calculatorv+0x8c>
     5b8:	8f e3       	ldi	r24, 0x3F	; 63
     5ba:	9c e9       	ldi	r25, 0x9C	; 156
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <_Z10Calculatorv+0x82>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <_Z10Calculatorv+0x88>
     5c2:	00 00       	nop
     5c4:	f4 cf       	rjmp	.-24     	; 0x5ae <_Z10Calculatorv+0x74>
     5c6:	e1 2c       	mov	r14, r1
     5c8:	f1 2c       	mov	r15, r1
	i = 0;
	while (key != '+' && key != '-' && key != 'x' && key != '/' && key != 'O') {
     5ca:	1b 32       	cpi	r17, 0x2B	; 43
     5cc:	81 f1       	breq	.+96     	; 0x62e <_Z10Calculatorv+0xf4>
     5ce:	1d 32       	cpi	r17, 0x2D	; 45
     5d0:	71 f1       	breq	.+92     	; 0x62e <_Z10Calculatorv+0xf4>
     5d2:	18 37       	cpi	r17, 0x78	; 120
     5d4:	61 f1       	breq	.+88     	; 0x62e <_Z10Calculatorv+0xf4>
     5d6:	1f 32       	cpi	r17, 0x2F	; 47
     5d8:	51 f1       	breq	.+84     	; 0x62e <_Z10Calculatorv+0xf4>
     5da:	1f 34       	cpi	r17, 0x4F	; 79
     5dc:	41 f1       	breq	.+80     	; 0x62e <_Z10Calculatorv+0xf4>
		if (key >= '0' && key <= '9') {
     5de:	80 ed       	ldi	r24, 0xD0	; 208
     5e0:	81 0f       	add	r24, r17
     5e2:	8a 30       	cpi	r24, 0x0A	; 10
     5e4:	68 f4       	brcc	.+26     	; 0x600 <_Z10Calculatorv+0xc6>
			LCD_Data(key);
     5e6:	81 2f       	mov	r24, r17
     5e8:	0e 94 25 01 	call	0x24a	; 0x24a <_Z8LCD_Datah>
			num1[i++] = key;
     5ec:	e1 e0       	ldi	r30, 0x01	; 1
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	ec 0f       	add	r30, r28
     5f2:	fd 1f       	adc	r31, r29
     5f4:	ee 0d       	add	r30, r14
     5f6:	ff 1d       	adc	r31, r15
     5f8:	10 83       	st	Z, r17
     5fa:	c7 01       	movw	r24, r14
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	7c 01       	movw	r14, r24
		}
		while ((key = Keypad_Read()) != 0) _delay_ms(10);
     600:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     604:	88 23       	and	r24, r24
     606:	39 f0       	breq	.+14     	; 0x616 <_Z10Calculatorv+0xdc>
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	9c e9       	ldi	r25, 0x9C	; 156
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <_Z10Calculatorv+0xd2>
     610:	00 c0       	rjmp	.+0      	; 0x612 <_Z10Calculatorv+0xd8>
     612:	00 00       	nop
     614:	f5 cf       	rjmp	.-22     	; 0x600 <_Z10Calculatorv+0xc6>
		while ((key = Keypad_Read()) == 0) _delay_ms(10);
     616:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     61a:	18 2f       	mov	r17, r24
     61c:	81 11       	cpse	r24, r1
     61e:	d5 cf       	rjmp	.-86     	; 0x5ca <_Z10Calculatorv+0x90>
     620:	8f e3       	ldi	r24, 0x3F	; 63
     622:	9c e9       	ldi	r25, 0x9C	; 156
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <_Z10Calculatorv+0xea>
     628:	00 c0       	rjmp	.+0      	; 0x62a <_Z10Calculatorv+0xf0>
     62a:	00 00       	nop
     62c:	f4 cf       	rjmp	.-24     	; 0x616 <_Z10Calculatorv+0xdc>
	}
	num1[i] = '\0';
     62e:	e1 e0       	ldi	r30, 0x01	; 1
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	ec 0f       	add	r30, r28
     634:	fd 1f       	adc	r31, r29
     636:	ee 0d       	add	r30, r14
     638:	ff 1d       	adc	r31, r15
     63a:	10 82       	st	Z, r1
	
	// If ON/C is pressed, reset
	if (key == 'O') {
     63c:	1f 34       	cpi	r17, 0x4F	; 79
     63e:	91 f4       	brne	.+36     	; 0x664 <_Z10Calculatorv+0x12a>
		last_result[0] = '\0'; // Clear last result
     640:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
		LCD_Clear();
     644:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z9LCD_Clearv>
		LCD_String("Calculator Ready");
     648:	89 e0       	ldi	r24, 0x09	; 9
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	23 ed       	ldi	r18, 0xD3	; 211
     654:	80 e3       	ldi	r24, 0x30	; 48
     656:	91 50       	subi	r25, 0x01	; 1
     658:	20 40       	sbci	r18, 0x00	; 0
     65a:	80 40       	sbci	r24, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <_Z10Calculatorv+0x11c>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <_Z10Calculatorv+0x126>
     660:	00 00       	nop
     662:	e2 c0       	rjmp	.+452    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		_delay_ms(1000);
		return;
	}
	
	op = key;
	LCD_Command(0xC0);
     664:	80 ec       	ldi	r24, 0xC0	; 192
     666:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11LCD_Commandh>
	LCD_String("2nd Num:");
     66a:	8a e1       	ldi	r24, 0x1A	; 26
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
	while ((key = Keypad_Read()) == 0) _delay_ms(10);
     672:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     676:	08 2f       	mov	r16, r24
     678:	81 11       	cpse	r24, r1
     67a:	07 c0       	rjmp	.+14     	; 0x68a <_Z10Calculatorv+0x150>
     67c:	8f e3       	ldi	r24, 0x3F	; 63
     67e:	9c e9       	ldi	r25, 0x9C	; 156
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	f1 f7       	brne	.-4      	; 0x680 <_Z10Calculatorv+0x146>
     684:	00 c0       	rjmp	.+0      	; 0x686 <_Z10Calculatorv+0x14c>
     686:	00 00       	nop
     688:	f4 cf       	rjmp	.-24     	; 0x672 <_Z10Calculatorv+0x138>
     68a:	e1 2c       	mov	r14, r1
     68c:	f1 2c       	mov	r15, r1
	j = 0;
	while (key != '=' && key != 'O') {
     68e:	0d 33       	cpi	r16, 0x3D	; 61
     690:	51 f1       	breq	.+84     	; 0x6e6 <_Z10Calculatorv+0x1ac>
     692:	0f 34       	cpi	r16, 0x4F	; 79
     694:	41 f1       	breq	.+80     	; 0x6e6 <_Z10Calculatorv+0x1ac>
		if (key >= '0' && key <= '9') {
     696:	80 ed       	ldi	r24, 0xD0	; 208
     698:	80 0f       	add	r24, r16
     69a:	8a 30       	cpi	r24, 0x0A	; 10
     69c:	68 f4       	brcc	.+26     	; 0x6b8 <_Z10Calculatorv+0x17e>
			LCD_Data(key);
     69e:	80 2f       	mov	r24, r16
     6a0:	0e 94 25 01 	call	0x24a	; 0x24a <_Z8LCD_Datah>
			num2[j++] = key;
     6a4:	e1 e1       	ldi	r30, 0x11	; 17
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	ec 0f       	add	r30, r28
     6aa:	fd 1f       	adc	r31, r29
     6ac:	ee 0d       	add	r30, r14
     6ae:	ff 1d       	adc	r31, r15
     6b0:	00 83       	st	Z, r16
     6b2:	c7 01       	movw	r24, r14
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	7c 01       	movw	r14, r24
		}
		while ((key = Keypad_Read()) != 0) _delay_ms(10);
     6b8:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     6bc:	88 23       	and	r24, r24
     6be:	39 f0       	breq	.+14     	; 0x6ce <_Z10Calculatorv+0x194>
     6c0:	8f e3       	ldi	r24, 0x3F	; 63
     6c2:	9c e9       	ldi	r25, 0x9C	; 156
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <_Z10Calculatorv+0x18a>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <_Z10Calculatorv+0x190>
     6ca:	00 00       	nop
     6cc:	f5 cf       	rjmp	.-22     	; 0x6b8 <_Z10Calculatorv+0x17e>
		while ((key = Keypad_Read()) == 0) _delay_ms(10);
     6ce:	0e 94 b0 01 	call	0x360	; 0x360 <_Z11Keypad_Readv>
     6d2:	08 2f       	mov	r16, r24
     6d4:	81 11       	cpse	r24, r1
     6d6:	db cf       	rjmp	.-74     	; 0x68e <_Z10Calculatorv+0x154>
     6d8:	8f e3       	ldi	r24, 0x3F	; 63
     6da:	9c e9       	ldi	r25, 0x9C	; 156
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <_Z10Calculatorv+0x1a2>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <_Z10Calculatorv+0x1a8>
     6e2:	00 00       	nop
     6e4:	f4 cf       	rjmp	.-24     	; 0x6ce <_Z10Calculatorv+0x194>
	}
	num2[j] = '\0';
     6e6:	e1 e1       	ldi	r30, 0x11	; 17
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ec 0f       	add	r30, r28
     6ec:	fd 1f       	adc	r31, r29
     6ee:	ee 0d       	add	r30, r14
     6f0:	ff 1d       	adc	r31, r15
     6f2:	10 82       	st	Z, r1

	// If ON/C is pressed, reset
	if (key == 'O') {
     6f4:	0f 34       	cpi	r16, 0x4F	; 79
     6f6:	91 f4       	brne	.+36     	; 0x71c <_Z10Calculatorv+0x1e2>
		last_result[0] = '\0';
     6f8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
		LCD_Clear();
     6fc:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z9LCD_Clearv>
		LCD_String("Calculator Ready");
     700:	89 e0       	ldi	r24, 0x09	; 9
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
     708:	9f ef       	ldi	r25, 0xFF	; 255
     70a:	23 ed       	ldi	r18, 0xD3	; 211
     70c:	80 e3       	ldi	r24, 0x30	; 48
     70e:	91 50       	subi	r25, 0x01	; 1
     710:	20 40       	sbci	r18, 0x00	; 0
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <_Z10Calculatorv+0x1d4>
     716:	00 c0       	rjmp	.+0      	; 0x718 <_Z10Calculatorv+0x1de>
     718:	00 00       	nop
     71a:	86 c0       	rjmp	.+268    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		_delay_ms(1000);
		return;
	}

	// Convert strings to numbers
	long n1 = atol(num1);
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 89 05 	call	0xb12	; 0xb12 <atol>
     724:	6b 01       	movw	r12, r22
     726:	7c 01       	movw	r14, r24
	long n2 = atol(num2);
     728:	ce 01       	movw	r24, r28
     72a:	41 96       	adiw	r24, 0x11	; 17
     72c:	0e 94 89 05 	call	0xb12	; 0xb12 <atol>
     730:	4b 01       	movw	r8, r22
     732:	5c 01       	movw	r10, r24

	// Perform calculation
	switch (op) {
     734:	1d 32       	cpi	r17, 0x2D	; 45
     736:	89 f0       	breq	.+34     	; 0x75a <_Z10Calculatorv+0x220>
     738:	18 f4       	brcc	.+6      	; 0x740 <_Z10Calculatorv+0x206>
     73a:	1b 32       	cpi	r17, 0x2B	; 43
     73c:	31 f0       	breq	.+12     	; 0x74a <_Z10Calculatorv+0x210>
     73e:	49 c0       	rjmp	.+146    	; 0x7d2 <_Z10Calculatorv+0x298>
     740:	1f 32       	cpi	r17, 0x2F	; 47
     742:	e9 f0       	breq	.+58     	; 0x77e <_Z10Calculatorv+0x244>
     744:	18 37       	cpi	r17, 0x78	; 120
     746:	89 f0       	breq	.+34     	; 0x76a <_Z10Calculatorv+0x230>
     748:	44 c0       	rjmp	.+136    	; 0x7d2 <_Z10Calculatorv+0x298>
		case '+': result = n1 + n2; break;
     74a:	c6 0e       	add	r12, r22
     74c:	d7 1e       	adc	r13, r23
     74e:	e8 1e       	adc	r14, r24
     750:	f9 1e       	adc	r15, r25

void Calculator(void) {
	char key, num1[16], num2[16], op;
	int i = 0, j = 0;
	long result = 0;
	float result_float = 0.0;
     752:	81 2c       	mov	r8, r1
     754:	91 2c       	mov	r9, r1
     756:	54 01       	movw	r10, r8
	long n1 = atol(num1);
	long n2 = atol(num2);

	// Perform calculation
	switch (op) {
		case '+': result = n1 + n2; break;
     758:	4c c0       	rjmp	.+152    	; 0x7f2 <_Z10Calculatorv+0x2b8>
		case '-': result = n1 - n2; break;
     75a:	c6 1a       	sub	r12, r22
     75c:	d7 0a       	sbc	r13, r23
     75e:	e8 0a       	sbc	r14, r24
     760:	f9 0a       	sbc	r15, r25

void Calculator(void) {
	char key, num1[16], num2[16], op;
	int i = 0, j = 0;
	long result = 0;
	float result_float = 0.0;
     762:	81 2c       	mov	r8, r1
     764:	91 2c       	mov	r9, r1
     766:	54 01       	movw	r10, r8
	long n2 = atol(num2);

	// Perform calculation
	switch (op) {
		case '+': result = n1 + n2; break;
		case '-': result = n1 - n2; break;
     768:	44 c0       	rjmp	.+136    	; 0x7f2 <_Z10Calculatorv+0x2b8>
		case 'x': result = n1 * n2; break;
     76a:	a7 01       	movw	r20, r14
     76c:	96 01       	movw	r18, r12
     76e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsi3>
     772:	6b 01       	movw	r12, r22
     774:	7c 01       	movw	r14, r24

void Calculator(void) {
	char key, num1[16], num2[16], op;
	int i = 0, j = 0;
	long result = 0;
	float result_float = 0.0;
     776:	81 2c       	mov	r8, r1
     778:	91 2c       	mov	r9, r1
     77a:	54 01       	movw	r10, r8

	// Perform calculation
	switch (op) {
		case '+': result = n1 + n2; break;
		case '-': result = n1 - n2; break;
		case 'x': result = n1 * n2; break;
     77c:	3a c0       	rjmp	.+116    	; 0x7f2 <_Z10Calculatorv+0x2b8>
		case '/':
		if (n2 != 0) result_float = (float)n1 / (float)n2;
     77e:	67 2b       	or	r22, r23
     780:	68 2b       	or	r22, r24
     782:	69 2b       	or	r22, r25
     784:	b1 f0       	breq	.+44     	; 0x7b2 <_Z10Calculatorv+0x278>
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	0e 94 b3 04 	call	0x966	; 0x966 <__floatsisf>
     78e:	6b 01       	movw	r12, r22
     790:	7c 01       	movw	r14, r24
     792:	c5 01       	movw	r24, r10
     794:	b4 01       	movw	r22, r8
     796:	0e 94 b3 04 	call	0x966	; 0x966 <__floatsisf>
     79a:	9b 01       	movw	r18, r22
     79c:	ac 01       	movw	r20, r24
     79e:	c7 01       	movw	r24, r14
     7a0:	b6 01       	movw	r22, r12
     7a2:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
     7a6:	4b 01       	movw	r8, r22
     7a8:	5c 01       	movw	r10, r24
}

void Calculator(void) {
	char key, num1[16], num2[16], op;
	int i = 0, j = 0;
	long result = 0;
     7aa:	c1 2c       	mov	r12, r1
     7ac:	d1 2c       	mov	r13, r1
     7ae:	76 01       	movw	r14, r12
			LCD_Clear();
			LCD_String("Error: Divide by 0");
			strcpy(last_result, "Error: Divide by 0");
			return;
		}
		break;
     7b0:	20 c0       	rjmp	.+64     	; 0x7f2 <_Z10Calculatorv+0x2b8>
		case '-': result = n1 - n2; break;
		case 'x': result = n1 * n2; break;
		case '/':
		if (n2 != 0) result_float = (float)n1 / (float)n2;
		else {
			LCD_Clear();
     7b2:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z9LCD_Clearv>
			LCD_String("Error: Divide by 0");
     7b6:	83 e2       	ldi	r24, 0x23	; 35
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
			strcpy(last_result, "Error: Divide by 0");
     7be:	83 e1       	ldi	r24, 0x13	; 19
     7c0:	e3 e2       	ldi	r30, 0x23	; 35
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	a8 e4       	ldi	r26, 0x48	; 72
     7c6:	b1 e0       	ldi	r27, 0x01	; 1
     7c8:	01 90       	ld	r0, Z+
     7ca:	0d 92       	st	X+, r0
     7cc:	8a 95       	dec	r24
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <_Z10Calculatorv+0x28e>
			return;
     7d0:	2b c0       	rjmp	.+86     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		}
		break;
		default:
		LCD_Clear();
     7d2:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z9LCD_Clearv>
		LCD_String("Invalid Operator");
     7d6:	86 e3       	ldi	r24, 0x36	; 54
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
		strcpy(last_result, "Invalid Operator");
     7de:	81 e1       	ldi	r24, 0x11	; 17
     7e0:	e6 e3       	ldi	r30, 0x36	; 54
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	a8 e4       	ldi	r26, 0x48	; 72
     7e6:	b1 e0       	ldi	r27, 0x01	; 1
     7e8:	01 90       	ld	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	8a 95       	dec	r24
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <_Z10Calculatorv+0x2ae>
		return;
     7f0:	1b c0       	rjmp	.+54     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	}

	// Store and display result
	LCD_Clear();
     7f2:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z9LCD_Clearv>
	if (op == '/') {
     7f6:	1f 32       	cpi	r17, 0x2F	; 47
     7f8:	61 f4       	brne	.+24     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		dtostrf(result_float, 5, 2, last_result);
     7fa:	08 e4       	ldi	r16, 0x48	; 72
     7fc:	11 e0       	ldi	r17, 0x01	; 1
     7fe:	22 e0       	ldi	r18, 0x02	; 2
     800:	45 e0       	ldi	r20, 0x05	; 5
     802:	c5 01       	movw	r24, r10
     804:	b4 01       	movw	r22, r8
     806:	0e 94 69 05 	call	0xad2	; 0xad2 <dtostrf>
		LCD_String(last_result);
     80a:	c8 01       	movw	r24, r16
     80c:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
     810:	0b c0       	rjmp	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     812:	2a e0       	ldi	r18, 0x0A	; 10
     814:	48 e4       	ldi	r20, 0x48	; 72
     816:	51 e0       	ldi	r21, 0x01	; 1
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 b0 05 	call	0xb60	; 0xb60 <__ltoa_ncheck>
		} else {
		ltoa(result, last_result, 10);
		LCD_String(last_result);
     820:	88 e4       	ldi	r24, 0x48	; 72
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>
	}
     828:	a0 96       	adiw	r28, 0x20	; 32
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	df 90       	pop	r13
     842:	cf 90       	pop	r12
     844:	bf 90       	pop	r11
     846:	af 90       	pop	r10
     848:	9f 90       	pop	r9
     84a:	8f 90       	pop	r8
     84c:	08 95       	ret

0000084e <main>:
char Keypad_Read(void);
void Calculator(void);

int main(void) {
	// Set LCD pins as output
	DDRB |= (1 << LCD_RS) | (1 << LCD_RW) | (1 << LCD_EN); // PB2, PB1, PB0 as output
     84e:	84 b1       	in	r24, 0x04	; 4
     850:	87 60       	ori	r24, 0x07	; 7
     852:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7); // PC0-PC3 as output
     854:	87 b1       	in	r24, 0x07	; 7
     856:	8f 60       	ori	r24, 0x0F	; 15
     858:	87 b9       	out	0x07, r24	; 7

	// Set Keypad pins: Rows as input, Columns as output
	DDRD &= ~(1 << ROW1 | 1 << ROW2 | 1 << ROW3 | 1 << ROW4); // Rows as input
     85a:	8a b1       	in	r24, 0x0a	; 10
     85c:	80 7f       	andi	r24, 0xF0	; 240
     85e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << COL1 | 1 << COL2 | 1 << COL3 | 1 << COL4);  // Columns as output
     860:	8a b1       	in	r24, 0x0a	; 10
     862:	80 6f       	ori	r24, 0xF0	; 240
     864:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << ROW1 | 1 << ROW2 | 1 << ROW3 | 1 << ROW4); // Enable pull-ups for rows
     866:	8b b1       	in	r24, 0x0b	; 11
     868:	8f 60       	ori	r24, 0x0F	; 15
     86a:	8b b9       	out	0x0b, r24	; 11

	// Initialize LCD
	LCD_Init();
     86c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z8LCD_Initv>
	LCD_String("Calculator Ready");
     870:	89 e0       	ldi	r24, 0x09	; 9
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 99 01 	call	0x332	; 0x332 <_Z10LCD_StringPKc>

	// Main loop
	while (1) {
		Calculator();
     878:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z10Calculatorv>
     87c:	fd cf       	rjmp	.-6      	; 0x878 <main+0x2a>

0000087e <__divsf3>:
     87e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3x>
     882:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_round>
     886:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_pscB>
     88a:	58 f0       	brcs	.+22     	; 0x8a2 <__divsf3+0x24>
     88c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_pscA>
     890:	40 f0       	brcs	.+16     	; 0x8a2 <__divsf3+0x24>
     892:	29 f4       	brne	.+10     	; 0x89e <__divsf3+0x20>
     894:	5f 3f       	cpi	r21, 0xFF	; 255
     896:	29 f0       	breq	.+10     	; 0x8a2 <__divsf3+0x24>
     898:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_inf>
     89c:	51 11       	cpse	r21, r1
     89e:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_szero>
     8a2:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_nan>

000008a6 <__divsf3x>:
     8a6:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_split3>
     8aa:	68 f3       	brcs	.-38     	; 0x886 <__divsf3+0x8>

000008ac <__divsf3_pse>:
     8ac:	99 23       	and	r25, r25
     8ae:	b1 f3       	breq	.-20     	; 0x89c <__divsf3+0x1e>
     8b0:	55 23       	and	r21, r21
     8b2:	91 f3       	breq	.-28     	; 0x898 <__divsf3+0x1a>
     8b4:	95 1b       	sub	r25, r21
     8b6:	55 0b       	sbc	r21, r21
     8b8:	bb 27       	eor	r27, r27
     8ba:	aa 27       	eor	r26, r26
     8bc:	62 17       	cp	r22, r18
     8be:	73 07       	cpc	r23, r19
     8c0:	84 07       	cpc	r24, r20
     8c2:	38 f0       	brcs	.+14     	; 0x8d2 <__divsf3_pse+0x26>
     8c4:	9f 5f       	subi	r25, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	22 0f       	add	r18, r18
     8ca:	33 1f       	adc	r19, r19
     8cc:	44 1f       	adc	r20, r20
     8ce:	aa 1f       	adc	r26, r26
     8d0:	a9 f3       	breq	.-22     	; 0x8bc <__divsf3_pse+0x10>
     8d2:	35 d0       	rcall	.+106    	; 0x93e <__stack+0x3f>
     8d4:	0e 2e       	mov	r0, r30
     8d6:	3a f0       	brmi	.+14     	; 0x8e6 <__divsf3_pse+0x3a>
     8d8:	e0 e8       	ldi	r30, 0x80	; 128
     8da:	32 d0       	rcall	.+100    	; 0x940 <__stack+0x41>
     8dc:	91 50       	subi	r25, 0x01	; 1
     8de:	50 40       	sbci	r21, 0x00	; 0
     8e0:	e6 95       	lsr	r30
     8e2:	00 1c       	adc	r0, r0
     8e4:	ca f7       	brpl	.-14     	; 0x8d8 <__divsf3_pse+0x2c>
     8e6:	2b d0       	rcall	.+86     	; 0x93e <__stack+0x3f>
     8e8:	fe 2f       	mov	r31, r30
     8ea:	29 d0       	rcall	.+82     	; 0x93e <__stack+0x3f>
     8ec:	66 0f       	add	r22, r22
     8ee:	77 1f       	adc	r23, r23
     8f0:	88 1f       	adc	r24, r24
     8f2:	bb 1f       	adc	r27, r27
     8f4:	26 17       	cp	r18, r22
     8f6:	37 07       	cpc	r19, r23
     8f8:	48 07       	cpc	r20, r24
     8fa:	ab 07       	cpc	r26, r27
     8fc:	b0 e8       	ldi	r27, 0x80	; 128
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0x3>
     900:	bb 0b       	sbc	r27, r27
     902:	80 2d       	mov	r24, r0
     904:	bf 01       	movw	r22, r30
     906:	ff 27       	eor	r31, r31
     908:	93 58       	subi	r25, 0x83	; 131
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	3a f0       	brmi	.+14     	; 0x91c <__stack+0x1d>
     90e:	9e 3f       	cpi	r25, 0xFE	; 254
     910:	51 05       	cpc	r21, r1
     912:	78 f0       	brcs	.+30     	; 0x932 <__stack+0x33>
     914:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_inf>
     918:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_szero>
     91c:	5f 3f       	cpi	r21, 0xFF	; 255
     91e:	e4 f3       	brlt	.-8      	; 0x918 <__stack+0x19>
     920:	98 3e       	cpi	r25, 0xE8	; 232
     922:	d4 f3       	brlt	.-12     	; 0x918 <__stack+0x19>
     924:	86 95       	lsr	r24
     926:	77 95       	ror	r23
     928:	67 95       	ror	r22
     92a:	b7 95       	ror	r27
     92c:	f7 95       	ror	r31
     92e:	9f 5f       	subi	r25, 0xFF	; 255
     930:	c9 f7       	brne	.-14     	; 0x924 <__stack+0x25>
     932:	88 0f       	add	r24, r24
     934:	91 1d       	adc	r25, r1
     936:	96 95       	lsr	r25
     938:	87 95       	ror	r24
     93a:	97 f9       	bld	r25, 7
     93c:	08 95       	ret
     93e:	e1 e0       	ldi	r30, 0x01	; 1
     940:	66 0f       	add	r22, r22
     942:	77 1f       	adc	r23, r23
     944:	88 1f       	adc	r24, r24
     946:	bb 1f       	adc	r27, r27
     948:	62 17       	cp	r22, r18
     94a:	73 07       	cpc	r23, r19
     94c:	84 07       	cpc	r24, r20
     94e:	ba 07       	cpc	r27, r26
     950:	20 f0       	brcs	.+8      	; 0x95a <__stack+0x5b>
     952:	62 1b       	sub	r22, r18
     954:	73 0b       	sbc	r23, r19
     956:	84 0b       	sbc	r24, r20
     958:	ba 0b       	sbc	r27, r26
     95a:	ee 1f       	adc	r30, r30
     95c:	88 f7       	brcc	.-30     	; 0x940 <__stack+0x41>
     95e:	e0 95       	com	r30
     960:	08 95       	ret

00000962 <__floatunsisf>:
     962:	e8 94       	clt
     964:	09 c0       	rjmp	.+18     	; 0x978 <__floatsisf+0x12>

00000966 <__floatsisf>:
     966:	97 fb       	bst	r25, 7
     968:	3e f4       	brtc	.+14     	; 0x978 <__floatsisf+0x12>
     96a:	90 95       	com	r25
     96c:	80 95       	com	r24
     96e:	70 95       	com	r23
     970:	61 95       	neg	r22
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	8f 4f       	sbci	r24, 0xFF	; 255
     976:	9f 4f       	sbci	r25, 0xFF	; 255
     978:	99 23       	and	r25, r25
     97a:	a9 f0       	breq	.+42     	; 0x9a6 <__floatsisf+0x40>
     97c:	f9 2f       	mov	r31, r25
     97e:	96 e9       	ldi	r25, 0x96	; 150
     980:	bb 27       	eor	r27, r27
     982:	93 95       	inc	r25
     984:	f6 95       	lsr	r31
     986:	87 95       	ror	r24
     988:	77 95       	ror	r23
     98a:	67 95       	ror	r22
     98c:	b7 95       	ror	r27
     98e:	f1 11       	cpse	r31, r1
     990:	f8 cf       	rjmp	.-16     	; 0x982 <__floatsisf+0x1c>
     992:	fa f4       	brpl	.+62     	; 0x9d2 <__floatsisf+0x6c>
     994:	bb 0f       	add	r27, r27
     996:	11 f4       	brne	.+4      	; 0x99c <__floatsisf+0x36>
     998:	60 ff       	sbrs	r22, 0
     99a:	1b c0       	rjmp	.+54     	; 0x9d2 <__floatsisf+0x6c>
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	8f 4f       	sbci	r24, 0xFF	; 255
     9a2:	9f 4f       	sbci	r25, 0xFF	; 255
     9a4:	16 c0       	rjmp	.+44     	; 0x9d2 <__floatsisf+0x6c>
     9a6:	88 23       	and	r24, r24
     9a8:	11 f0       	breq	.+4      	; 0x9ae <__floatsisf+0x48>
     9aa:	96 e9       	ldi	r25, 0x96	; 150
     9ac:	11 c0       	rjmp	.+34     	; 0x9d0 <__floatsisf+0x6a>
     9ae:	77 23       	and	r23, r23
     9b0:	21 f0       	breq	.+8      	; 0x9ba <__floatsisf+0x54>
     9b2:	9e e8       	ldi	r25, 0x8E	; 142
     9b4:	87 2f       	mov	r24, r23
     9b6:	76 2f       	mov	r23, r22
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__floatsisf+0x5e>
     9ba:	66 23       	and	r22, r22
     9bc:	71 f0       	breq	.+28     	; 0x9da <__floatsisf+0x74>
     9be:	96 e8       	ldi	r25, 0x86	; 134
     9c0:	86 2f       	mov	r24, r22
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	2a f0       	brmi	.+10     	; 0x9d2 <__floatsisf+0x6c>
     9c8:	9a 95       	dec	r25
     9ca:	66 0f       	add	r22, r22
     9cc:	77 1f       	adc	r23, r23
     9ce:	88 1f       	adc	r24, r24
     9d0:	da f7       	brpl	.-10     	; 0x9c8 <__floatsisf+0x62>
     9d2:	88 0f       	add	r24, r24
     9d4:	96 95       	lsr	r25
     9d6:	87 95       	ror	r24
     9d8:	97 f9       	bld	r25, 7
     9da:	08 95       	ret

000009dc <__fp_inf>:
     9dc:	97 f9       	bld	r25, 7
     9de:	9f 67       	ori	r25, 0x7F	; 127
     9e0:	80 e8       	ldi	r24, 0x80	; 128
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	08 95       	ret

000009e8 <__fp_nan>:
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	80 ec       	ldi	r24, 0xC0	; 192
     9ec:	08 95       	ret

000009ee <__fp_pscA>:
     9ee:	00 24       	eor	r0, r0
     9f0:	0a 94       	dec	r0
     9f2:	16 16       	cp	r1, r22
     9f4:	17 06       	cpc	r1, r23
     9f6:	18 06       	cpc	r1, r24
     9f8:	09 06       	cpc	r0, r25
     9fa:	08 95       	ret

000009fc <__fp_pscB>:
     9fc:	00 24       	eor	r0, r0
     9fe:	0a 94       	dec	r0
     a00:	12 16       	cp	r1, r18
     a02:	13 06       	cpc	r1, r19
     a04:	14 06       	cpc	r1, r20
     a06:	05 06       	cpc	r0, r21
     a08:	08 95       	ret

00000a0a <__fp_round>:
     a0a:	09 2e       	mov	r0, r25
     a0c:	03 94       	inc	r0
     a0e:	00 0c       	add	r0, r0
     a10:	11 f4       	brne	.+4      	; 0xa16 <__fp_round+0xc>
     a12:	88 23       	and	r24, r24
     a14:	52 f0       	brmi	.+20     	; 0xa2a <__fp_round+0x20>
     a16:	bb 0f       	add	r27, r27
     a18:	40 f4       	brcc	.+16     	; 0xa2a <__fp_round+0x20>
     a1a:	bf 2b       	or	r27, r31
     a1c:	11 f4       	brne	.+4      	; 0xa22 <__fp_round+0x18>
     a1e:	60 ff       	sbrs	r22, 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__fp_round+0x20>
     a22:	6f 5f       	subi	r22, 0xFF	; 255
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	8f 4f       	sbci	r24, 0xFF	; 255
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	08 95       	ret

00000a2c <__fp_split3>:
     a2c:	57 fd       	sbrc	r21, 7
     a2e:	90 58       	subi	r25, 0x80	; 128
     a30:	44 0f       	add	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	59 f0       	breq	.+22     	; 0xa4c <__fp_splitA+0x10>
     a36:	5f 3f       	cpi	r21, 0xFF	; 255
     a38:	71 f0       	breq	.+28     	; 0xa56 <__fp_splitA+0x1a>
     a3a:	47 95       	ror	r20

00000a3c <__fp_splitA>:
     a3c:	88 0f       	add	r24, r24
     a3e:	97 fb       	bst	r25, 7
     a40:	99 1f       	adc	r25, r25
     a42:	61 f0       	breq	.+24     	; 0xa5c <__fp_splitA+0x20>
     a44:	9f 3f       	cpi	r25, 0xFF	; 255
     a46:	79 f0       	breq	.+30     	; 0xa66 <__fp_splitA+0x2a>
     a48:	87 95       	ror	r24
     a4a:	08 95       	ret
     a4c:	12 16       	cp	r1, r18
     a4e:	13 06       	cpc	r1, r19
     a50:	14 06       	cpc	r1, r20
     a52:	55 1f       	adc	r21, r21
     a54:	f2 cf       	rjmp	.-28     	; 0xa3a <__fp_split3+0xe>
     a56:	46 95       	lsr	r20
     a58:	f1 df       	rcall	.-30     	; 0xa3c <__fp_splitA>
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <__fp_splitA+0x30>
     a5c:	16 16       	cp	r1, r22
     a5e:	17 06       	cpc	r1, r23
     a60:	18 06       	cpc	r1, r24
     a62:	99 1f       	adc	r25, r25
     a64:	f1 cf       	rjmp	.-30     	; 0xa48 <__fp_splitA+0xc>
     a66:	86 95       	lsr	r24
     a68:	71 05       	cpc	r23, r1
     a6a:	61 05       	cpc	r22, r1
     a6c:	08 94       	sec
     a6e:	08 95       	ret

00000a70 <__fp_zero>:
     a70:	e8 94       	clt

00000a72 <__fp_szero>:
     a72:	bb 27       	eor	r27, r27
     a74:	66 27       	eor	r22, r22
     a76:	77 27       	eor	r23, r23
     a78:	cb 01       	movw	r24, r22
     a7a:	97 f9       	bld	r25, 7
     a7c:	08 95       	ret

00000a7e <__mulsi3>:
     a7e:	db 01       	movw	r26, r22
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__muluhisi3>
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	a2 9f       	mul	r26, r18
     a8e:	80 0d       	add	r24, r0
     a90:	91 1d       	adc	r25, r1
     a92:	a3 9f       	mul	r26, r19
     a94:	90 0d       	add	r25, r0
     a96:	b2 9f       	mul	r27, r18
     a98:	90 0d       	add	r25, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	08 95       	ret

00000a9e <__muluhisi3>:
     a9e:	0e 94 5a 05 	call	0xab4	; 0xab4 <__umulhisi3>
     aa2:	a5 9f       	mul	r26, r21
     aa4:	90 0d       	add	r25, r0
     aa6:	b4 9f       	mul	r27, r20
     aa8:	90 0d       	add	r25, r0
     aaa:	a4 9f       	mul	r26, r20
     aac:	80 0d       	add	r24, r0
     aae:	91 1d       	adc	r25, r1
     ab0:	11 24       	eor	r1, r1
     ab2:	08 95       	ret

00000ab4 <__umulhisi3>:
     ab4:	a2 9f       	mul	r26, r18
     ab6:	b0 01       	movw	r22, r0
     ab8:	b3 9f       	mul	r27, r19
     aba:	c0 01       	movw	r24, r0
     abc:	a3 9f       	mul	r26, r19
     abe:	70 0d       	add	r23, r0
     ac0:	81 1d       	adc	r24, r1
     ac2:	11 24       	eor	r1, r1
     ac4:	91 1d       	adc	r25, r1
     ac6:	b2 9f       	mul	r27, r18
     ac8:	70 0d       	add	r23, r0
     aca:	81 1d       	adc	r24, r1
     acc:	11 24       	eor	r1, r1
     ace:	91 1d       	adc	r25, r1
     ad0:	08 95       	ret

00000ad2 <dtostrf>:
     ad2:	ef 92       	push	r14
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	e8 01       	movw	r28, r16
     ade:	47 fd       	sbrc	r20, 7
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <dtostrf+0x14>
     ae2:	34 e0       	ldi	r19, 0x04	; 4
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <dtostrf+0x16>
     ae6:	34 e1       	ldi	r19, 0x14	; 20
     ae8:	04 2e       	mov	r0, r20
     aea:	00 0c       	add	r0, r0
     aec:	55 0b       	sbc	r21, r21
     aee:	57 ff       	sbrs	r21, 7
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <dtostrf+0x26>
     af2:	51 95       	neg	r21
     af4:	41 95       	neg	r20
     af6:	51 09       	sbc	r21, r1
     af8:	e3 2e       	mov	r14, r19
     afa:	02 2f       	mov	r16, r18
     afc:	24 2f       	mov	r18, r20
     afe:	ae 01       	movw	r20, r28
     b00:	0e 94 f6 05 	call	0xbec	; 0xbec <dtoa_prf>
     b04:	ce 01       	movw	r24, r28
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ef 90       	pop	r14
     b10:	08 95       	ret

00000b12 <atol>:
     b12:	1f 93       	push	r17
     b14:	fc 01       	movw	r30, r24
     b16:	99 27       	eor	r25, r25
     b18:	88 27       	eor	r24, r24
     b1a:	bc 01       	movw	r22, r24
     b1c:	e8 94       	clt
     b1e:	11 91       	ld	r17, Z+
     b20:	10 32       	cpi	r17, 0x20	; 32
     b22:	e9 f3       	breq	.-6      	; 0xb1e <atol+0xc>
     b24:	19 30       	cpi	r17, 0x09	; 9
     b26:	10 f0       	brcs	.+4      	; 0xb2c <atol+0x1a>
     b28:	1e 30       	cpi	r17, 0x0E	; 14
     b2a:	c8 f3       	brcs	.-14     	; 0xb1e <atol+0xc>
     b2c:	1b 32       	cpi	r17, 0x2B	; 43
     b2e:	51 f0       	breq	.+20     	; 0xb44 <atol+0x32>
     b30:	1d 32       	cpi	r17, 0x2D	; 45
     b32:	49 f4       	brne	.+18     	; 0xb46 <atol+0x34>
     b34:	68 94       	set
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <atol+0x32>
     b38:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsi_const_10>
     b3c:	61 0f       	add	r22, r17
     b3e:	71 1d       	adc	r23, r1
     b40:	81 1d       	adc	r24, r1
     b42:	91 1d       	adc	r25, r1
     b44:	11 91       	ld	r17, Z+
     b46:	10 53       	subi	r17, 0x30	; 48
     b48:	1a 30       	cpi	r17, 0x0A	; 10
     b4a:	b0 f3       	brcs	.-20     	; 0xb38 <atol+0x26>
     b4c:	3e f4       	brtc	.+14     	; 0xb5c <atol+0x4a>
     b4e:	90 95       	com	r25
     b50:	80 95       	com	r24
     b52:	70 95       	com	r23
     b54:	61 95       	neg	r22
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	8f 4f       	sbci	r24, 0xFF	; 255
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	1f 91       	pop	r17
     b5e:	08 95       	ret

00000b60 <__ltoa_ncheck>:
     b60:	bb 27       	eor	r27, r27
     b62:	2a 30       	cpi	r18, 0x0A	; 10
     b64:	51 f4       	brne	.+20     	; 0xb7a <__ltoa_ncheck+0x1a>
     b66:	99 23       	and	r25, r25
     b68:	42 f4       	brpl	.+16     	; 0xb7a <__ltoa_ncheck+0x1a>
     b6a:	bd e2       	ldi	r27, 0x2D	; 45
     b6c:	90 95       	com	r25
     b6e:	80 95       	com	r24
     b70:	70 95       	com	r23
     b72:	61 95       	neg	r22
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__ultoa_common>

00000b7e <__mulsi_const_10>:
     b7e:	59 2f       	mov	r21, r25
     b80:	48 2f       	mov	r20, r24
     b82:	37 2f       	mov	r19, r23
     b84:	26 2f       	mov	r18, r22
     b86:	66 0f       	add	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	88 1f       	adc	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	66 0f       	add	r22, r22
     b90:	77 1f       	adc	r23, r23
     b92:	88 1f       	adc	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	62 0f       	add	r22, r18
     b98:	73 1f       	adc	r23, r19
     b9a:	84 1f       	adc	r24, r20
     b9c:	95 1f       	adc	r25, r21
     b9e:	66 0f       	add	r22, r22
     ba0:	77 1f       	adc	r23, r23
     ba2:	88 1f       	adc	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	08 95       	ret

00000ba8 <__ultoa_ncheck>:
     ba8:	bb 27       	eor	r27, r27

00000baa <__ultoa_common>:
     baa:	fa 01       	movw	r30, r20
     bac:	a6 2f       	mov	r26, r22
     bae:	62 17       	cp	r22, r18
     bb0:	71 05       	cpc	r23, r1
     bb2:	81 05       	cpc	r24, r1
     bb4:	91 05       	cpc	r25, r1
     bb6:	33 0b       	sbc	r19, r19
     bb8:	30 fb       	bst	r19, 0
     bba:	66 f0       	brts	.+24     	; 0xbd4 <__ultoa_common+0x2a>
     bbc:	aa 27       	eor	r26, r26
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	88 1f       	adc	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	a2 17       	cp	r26, r18
     bca:	10 f0       	brcs	.+4      	; 0xbd0 <__ultoa_common+0x26>
     bcc:	a2 1b       	sub	r26, r18
     bce:	63 95       	inc	r22
     bd0:	38 50       	subi	r19, 0x08	; 8
     bd2:	a9 f7       	brne	.-22     	; 0xbbe <__ultoa_common+0x14>
     bd4:	a0 5d       	subi	r26, 0xD0	; 208
     bd6:	aa 33       	cpi	r26, 0x3A	; 58
     bd8:	08 f0       	brcs	.+2      	; 0xbdc <__ultoa_common+0x32>
     bda:	a9 5d       	subi	r26, 0xD9	; 217
     bdc:	a1 93       	st	Z+, r26
     bde:	36 f7       	brtc	.-52     	; 0xbac <__ultoa_common+0x2>
     be0:	b1 11       	cpse	r27, r1
     be2:	b1 93       	st	Z+, r27
     be4:	10 82       	st	Z, r1
     be6:	ca 01       	movw	r24, r20
     be8:	0c 94 28 08 	jmp	0x1050	; 0x1050 <strrev>

00000bec <dtoa_prf>:
     bec:	a9 e0       	ldi	r26, 0x09	; 9
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	ec ef       	ldi	r30, 0xFC	; 252
     bf2:	f5 e0       	ldi	r31, 0x05	; 5
     bf4:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__prologue_saves__+0xc>
     bf8:	6a 01       	movw	r12, r20
     bfa:	12 2f       	mov	r17, r18
     bfc:	b0 2e       	mov	r11, r16
     bfe:	2b e3       	ldi	r18, 0x3B	; 59
     c00:	20 17       	cp	r18, r16
     c02:	20 f0       	brcs	.+8      	; 0xc0c <dtoa_prf+0x20>
     c04:	ff 24       	eor	r15, r15
     c06:	f3 94       	inc	r15
     c08:	f0 0e       	add	r15, r16
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <dtoa_prf+0x24>
     c0c:	2c e3       	ldi	r18, 0x3C	; 60
     c0e:	f2 2e       	mov	r15, r18
     c10:	0f 2d       	mov	r16, r15
     c12:	27 e0       	ldi	r18, 0x07	; 7
     c14:	ae 01       	movw	r20, r28
     c16:	4f 5f       	subi	r20, 0xFF	; 255
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	0e 94 50 07 	call	0xea0	; 0xea0 <__ftoa_engine>
     c1e:	bc 01       	movw	r22, r24
     c20:	49 81       	ldd	r20, Y+1	; 0x01
     c22:	84 2f       	mov	r24, r20
     c24:	89 70       	andi	r24, 0x09	; 9
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	31 f0       	breq	.+12     	; 0xc36 <dtoa_prf+0x4a>
     c2a:	e1 fc       	sbrc	r14, 1
     c2c:	06 c0       	rjmp	.+12     	; 0xc3a <dtoa_prf+0x4e>
     c2e:	e0 fe       	sbrs	r14, 0
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <dtoa_prf+0x52>
     c32:	90 e2       	ldi	r25, 0x20	; 32
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <dtoa_prf+0x54>
     c36:	9d e2       	ldi	r25, 0x2D	; 45
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <dtoa_prf+0x54>
     c3a:	9b e2       	ldi	r25, 0x2B	; 43
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <dtoa_prf+0x54>
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	5e 2d       	mov	r21, r14
     c42:	50 71       	andi	r21, 0x10	; 16
     c44:	43 ff       	sbrs	r20, 3
     c46:	3c c0       	rjmp	.+120    	; 0xcc0 <dtoa_prf+0xd4>
     c48:	91 11       	cpse	r25, r1
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <dtoa_prf+0x64>
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <dtoa_prf+0x66>
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	81 17       	cp	r24, r17
     c54:	18 f4       	brcc	.+6      	; 0xc5c <dtoa_prf+0x70>
     c56:	21 2f       	mov	r18, r17
     c58:	28 1b       	sub	r18, r24
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <dtoa_prf+0x72>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	51 11       	cpse	r21, r1
     c60:	0b c0       	rjmp	.+22     	; 0xc78 <dtoa_prf+0x8c>
     c62:	f6 01       	movw	r30, r12
     c64:	82 2f       	mov	r24, r18
     c66:	30 e2       	ldi	r19, 0x20	; 32
     c68:	88 23       	and	r24, r24
     c6a:	19 f0       	breq	.+6      	; 0xc72 <dtoa_prf+0x86>
     c6c:	31 93       	st	Z+, r19
     c6e:	81 50       	subi	r24, 0x01	; 1
     c70:	fb cf       	rjmp	.-10     	; 0xc68 <dtoa_prf+0x7c>
     c72:	c2 0e       	add	r12, r18
     c74:	d1 1c       	adc	r13, r1
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	99 23       	and	r25, r25
     c7a:	29 f0       	breq	.+10     	; 0xc86 <dtoa_prf+0x9a>
     c7c:	d6 01       	movw	r26, r12
     c7e:	9c 93       	st	X, r25
     c80:	f6 01       	movw	r30, r12
     c82:	31 96       	adiw	r30, 0x01	; 1
     c84:	6f 01       	movw	r12, r30
     c86:	c6 01       	movw	r24, r12
     c88:	03 96       	adiw	r24, 0x03	; 3
     c8a:	e2 fe       	sbrs	r14, 2
     c8c:	0a c0       	rjmp	.+20     	; 0xca2 <dtoa_prf+0xb6>
     c8e:	3e e4       	ldi	r19, 0x4E	; 78
     c90:	d6 01       	movw	r26, r12
     c92:	3c 93       	st	X, r19
     c94:	41 e4       	ldi	r20, 0x41	; 65
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	4c 93       	st	X, r20
     c9a:	11 97       	sbiw	r26, 0x01	; 1
     c9c:	12 96       	adiw	r26, 0x02	; 2
     c9e:	3c 93       	st	X, r19
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <dtoa_prf+0xc2>
     ca2:	3e e6       	ldi	r19, 0x6E	; 110
     ca4:	f6 01       	movw	r30, r12
     ca6:	30 83       	st	Z, r19
     ca8:	41 e6       	ldi	r20, 0x61	; 97
     caa:	41 83       	std	Z+1, r20	; 0x01
     cac:	32 83       	std	Z+2, r19	; 0x02
     cae:	fc 01       	movw	r30, r24
     cb0:	32 2f       	mov	r19, r18
     cb2:	40 e2       	ldi	r20, 0x20	; 32
     cb4:	33 23       	and	r19, r19
     cb6:	09 f4       	brne	.+2      	; 0xcba <dtoa_prf+0xce>
     cb8:	42 c0       	rjmp	.+132    	; 0xd3e <dtoa_prf+0x152>
     cba:	41 93       	st	Z+, r20
     cbc:	31 50       	subi	r19, 0x01	; 1
     cbe:	fa cf       	rjmp	.-12     	; 0xcb4 <dtoa_prf+0xc8>
     cc0:	42 ff       	sbrs	r20, 2
     cc2:	44 c0       	rjmp	.+136    	; 0xd4c <dtoa_prf+0x160>
     cc4:	91 11       	cpse	r25, r1
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <dtoa_prf+0xe0>
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	01 c0       	rjmp	.+2      	; 0xcce <dtoa_prf+0xe2>
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	81 17       	cp	r24, r17
     cd0:	18 f4       	brcc	.+6      	; 0xcd8 <dtoa_prf+0xec>
     cd2:	21 2f       	mov	r18, r17
     cd4:	28 1b       	sub	r18, r24
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <dtoa_prf+0xee>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	51 11       	cpse	r21, r1
     cdc:	0b c0       	rjmp	.+22     	; 0xcf4 <dtoa_prf+0x108>
     cde:	f6 01       	movw	r30, r12
     ce0:	82 2f       	mov	r24, r18
     ce2:	30 e2       	ldi	r19, 0x20	; 32
     ce4:	88 23       	and	r24, r24
     ce6:	19 f0       	breq	.+6      	; 0xcee <dtoa_prf+0x102>
     ce8:	31 93       	st	Z+, r19
     cea:	81 50       	subi	r24, 0x01	; 1
     cec:	fb cf       	rjmp	.-10     	; 0xce4 <dtoa_prf+0xf8>
     cee:	c2 0e       	add	r12, r18
     cf0:	d1 1c       	adc	r13, r1
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	99 23       	and	r25, r25
     cf6:	29 f0       	breq	.+10     	; 0xd02 <dtoa_prf+0x116>
     cf8:	d6 01       	movw	r26, r12
     cfa:	9c 93       	st	X, r25
     cfc:	f6 01       	movw	r30, r12
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	6f 01       	movw	r12, r30
     d02:	c6 01       	movw	r24, r12
     d04:	03 96       	adiw	r24, 0x03	; 3
     d06:	e2 fe       	sbrs	r14, 2
     d08:	0b c0       	rjmp	.+22     	; 0xd20 <dtoa_prf+0x134>
     d0a:	39 e4       	ldi	r19, 0x49	; 73
     d0c:	d6 01       	movw	r26, r12
     d0e:	3c 93       	st	X, r19
     d10:	3e e4       	ldi	r19, 0x4E	; 78
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	3c 93       	st	X, r19
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	36 e4       	ldi	r19, 0x46	; 70
     d1a:	12 96       	adiw	r26, 0x02	; 2
     d1c:	3c 93       	st	X, r19
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <dtoa_prf+0x142>
     d20:	39 e6       	ldi	r19, 0x69	; 105
     d22:	f6 01       	movw	r30, r12
     d24:	30 83       	st	Z, r19
     d26:	3e e6       	ldi	r19, 0x6E	; 110
     d28:	31 83       	std	Z+1, r19	; 0x01
     d2a:	36 e6       	ldi	r19, 0x66	; 102
     d2c:	32 83       	std	Z+2, r19	; 0x02
     d2e:	fc 01       	movw	r30, r24
     d30:	32 2f       	mov	r19, r18
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	33 23       	and	r19, r19
     d36:	19 f0       	breq	.+6      	; 0xd3e <dtoa_prf+0x152>
     d38:	41 93       	st	Z+, r20
     d3a:	31 50       	subi	r19, 0x01	; 1
     d3c:	fb cf       	rjmp	.-10     	; 0xd34 <dtoa_prf+0x148>
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f1 1d       	adc	r31, r1
     d44:	10 82       	st	Z, r1
     d46:	8e ef       	ldi	r24, 0xFE	; 254
     d48:	9f ef       	ldi	r25, 0xFF	; 255
     d4a:	a6 c0       	rjmp	.+332    	; 0xe98 <dtoa_prf+0x2ac>
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	91 11       	cpse	r25, r1
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <dtoa_prf+0x16c>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	16 16       	cp	r1, r22
     d5a:	17 06       	cpc	r1, r23
     d5c:	1c f4       	brge	.+6      	; 0xd64 <dtoa_prf+0x178>
     d5e:	fb 01       	movw	r30, r22
     d60:	31 96       	adiw	r30, 0x01	; 1
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <dtoa_prf+0x17c>
     d64:	e1 e0       	ldi	r30, 0x01	; 1
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	2e 0f       	add	r18, r30
     d6a:	3f 1f       	adc	r19, r31
     d6c:	bb 20       	and	r11, r11
     d6e:	21 f0       	breq	.+8      	; 0xd78 <dtoa_prf+0x18c>
     d70:	eb 2d       	mov	r30, r11
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	31 96       	adiw	r30, 0x01	; 1
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <dtoa_prf+0x190>
     d78:	e0 e0       	ldi	r30, 0x00	; 0
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	2e 0f       	add	r18, r30
     d7e:	3f 1f       	adc	r19, r31
     d80:	e1 2f       	mov	r30, r17
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	2e 17       	cp	r18, r30
     d86:	3f 07       	cpc	r19, r31
     d88:	1c f4       	brge	.+6      	; 0xd90 <dtoa_prf+0x1a4>
     d8a:	12 1b       	sub	r17, r18
     d8c:	21 2f       	mov	r18, r17
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <dtoa_prf+0x1a6>
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	8e 2d       	mov	r24, r14
     d94:	88 71       	andi	r24, 0x18	; 24
     d96:	59 f4       	brne	.+22     	; 0xdae <dtoa_prf+0x1c2>
     d98:	f6 01       	movw	r30, r12
     d9a:	82 2f       	mov	r24, r18
     d9c:	30 e2       	ldi	r19, 0x20	; 32
     d9e:	88 23       	and	r24, r24
     da0:	19 f0       	breq	.+6      	; 0xda8 <dtoa_prf+0x1bc>
     da2:	31 93       	st	Z+, r19
     da4:	81 50       	subi	r24, 0x01	; 1
     da6:	fb cf       	rjmp	.-10     	; 0xd9e <dtoa_prf+0x1b2>
     da8:	c2 0e       	add	r12, r18
     daa:	d1 1c       	adc	r13, r1
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	99 23       	and	r25, r25
     db0:	29 f0       	breq	.+10     	; 0xdbc <dtoa_prf+0x1d0>
     db2:	d6 01       	movw	r26, r12
     db4:	9c 93       	st	X, r25
     db6:	f6 01       	movw	r30, r12
     db8:	31 96       	adiw	r30, 0x01	; 1
     dba:	6f 01       	movw	r12, r30
     dbc:	51 11       	cpse	r21, r1
     dbe:	0b c0       	rjmp	.+22     	; 0xdd6 <dtoa_prf+0x1ea>
     dc0:	f6 01       	movw	r30, r12
     dc2:	82 2f       	mov	r24, r18
     dc4:	90 e3       	ldi	r25, 0x30	; 48
     dc6:	88 23       	and	r24, r24
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <dtoa_prf+0x1e4>
     dca:	91 93       	st	Z+, r25
     dcc:	81 50       	subi	r24, 0x01	; 1
     dce:	fb cf       	rjmp	.-10     	; 0xdc6 <dtoa_prf+0x1da>
     dd0:	c2 0e       	add	r12, r18
     dd2:	d1 1c       	adc	r13, r1
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	0f 2d       	mov	r16, r15
     dd8:	06 0f       	add	r16, r22
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	34 2f       	mov	r19, r20
     dde:	30 71       	andi	r19, 0x10	; 16
     de0:	44 ff       	sbrs	r20, 4
     de2:	03 c0       	rjmp	.+6      	; 0xdea <dtoa_prf+0x1fe>
     de4:	91 33       	cpi	r25, 0x31	; 49
     de6:	09 f4       	brne	.+2      	; 0xdea <dtoa_prf+0x1fe>
     de8:	01 50       	subi	r16, 0x01	; 1
     dea:	10 16       	cp	r1, r16
     dec:	24 f4       	brge	.+8      	; 0xdf6 <dtoa_prf+0x20a>
     dee:	09 30       	cpi	r16, 0x09	; 9
     df0:	18 f0       	brcs	.+6      	; 0xdf8 <dtoa_prf+0x20c>
     df2:	08 e0       	ldi	r16, 0x08	; 8
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <dtoa_prf+0x20c>
     df6:	01 e0       	ldi	r16, 0x01	; 1
     df8:	ab 01       	movw	r20, r22
     dfa:	77 ff       	sbrs	r23, 7
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <dtoa_prf+0x216>
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	fb 01       	movw	r30, r22
     e04:	e4 1b       	sub	r30, r20
     e06:	f5 0b       	sbc	r31, r21
     e08:	a1 e0       	ldi	r26, 0x01	; 1
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ac 0f       	add	r26, r28
     e0e:	bd 1f       	adc	r27, r29
     e10:	ea 0f       	add	r30, r26
     e12:	fb 1f       	adc	r31, r27
     e14:	8e e2       	ldi	r24, 0x2E	; 46
     e16:	a8 2e       	mov	r10, r24
     e18:	4b 01       	movw	r8, r22
     e1a:	80 1a       	sub	r8, r16
     e1c:	91 08       	sbc	r9, r1
     e1e:	0b 2d       	mov	r16, r11
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	11 95       	neg	r17
     e24:	01 95       	neg	r16
     e26:	11 09       	sbc	r17, r1
     e28:	4f 3f       	cpi	r20, 0xFF	; 255
     e2a:	bf ef       	ldi	r27, 0xFF	; 255
     e2c:	5b 07       	cpc	r21, r27
     e2e:	21 f4       	brne	.+8      	; 0xe38 <dtoa_prf+0x24c>
     e30:	d6 01       	movw	r26, r12
     e32:	ac 92       	st	X, r10
     e34:	11 96       	adiw	r26, 0x01	; 1
     e36:	6d 01       	movw	r12, r26
     e38:	64 17       	cp	r22, r20
     e3a:	75 07       	cpc	r23, r21
     e3c:	2c f0       	brlt	.+10     	; 0xe48 <dtoa_prf+0x25c>
     e3e:	84 16       	cp	r8, r20
     e40:	95 06       	cpc	r9, r21
     e42:	14 f4       	brge	.+4      	; 0xe48 <dtoa_prf+0x25c>
     e44:	81 81       	ldd	r24, Z+1	; 0x01
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <dtoa_prf+0x25e>
     e48:	80 e3       	ldi	r24, 0x30	; 48
     e4a:	41 50       	subi	r20, 0x01	; 1
     e4c:	51 09       	sbc	r21, r1
     e4e:	31 96       	adiw	r30, 0x01	; 1
     e50:	d6 01       	movw	r26, r12
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	7d 01       	movw	r14, r26
     e56:	40 17       	cp	r20, r16
     e58:	51 07       	cpc	r21, r17
     e5a:	24 f0       	brlt	.+8      	; 0xe64 <dtoa_prf+0x278>
     e5c:	d6 01       	movw	r26, r12
     e5e:	8c 93       	st	X, r24
     e60:	67 01       	movw	r12, r14
     e62:	e2 cf       	rjmp	.-60     	; 0xe28 <dtoa_prf+0x23c>
     e64:	64 17       	cp	r22, r20
     e66:	75 07       	cpc	r23, r21
     e68:	39 f4       	brne	.+14     	; 0xe78 <dtoa_prf+0x28c>
     e6a:	96 33       	cpi	r25, 0x36	; 54
     e6c:	20 f4       	brcc	.+8      	; 0xe76 <dtoa_prf+0x28a>
     e6e:	95 33       	cpi	r25, 0x35	; 53
     e70:	19 f4       	brne	.+6      	; 0xe78 <dtoa_prf+0x28c>
     e72:	31 11       	cpse	r19, r1
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <dtoa_prf+0x28c>
     e76:	81 e3       	ldi	r24, 0x31	; 49
     e78:	f6 01       	movw	r30, r12
     e7a:	80 83       	st	Z, r24
     e7c:	f7 01       	movw	r30, r14
     e7e:	82 2f       	mov	r24, r18
     e80:	90 e2       	ldi	r25, 0x20	; 32
     e82:	88 23       	and	r24, r24
     e84:	19 f0       	breq	.+6      	; 0xe8c <dtoa_prf+0x2a0>
     e86:	91 93       	st	Z+, r25
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	fb cf       	rjmp	.-10     	; 0xe82 <dtoa_prf+0x296>
     e8c:	f7 01       	movw	r30, r14
     e8e:	e2 0f       	add	r30, r18
     e90:	f1 1d       	adc	r31, r1
     e92:	10 82       	st	Z, r1
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	29 96       	adiw	r28, 0x09	; 9
     e9a:	ec e0       	ldi	r30, 0x0C	; 12
     e9c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__epilogue_restores__+0xc>

00000ea0 <__ftoa_engine>:
     ea0:	28 30       	cpi	r18, 0x08	; 8
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <__ftoa_engine+0x6>
     ea4:	27 e0       	ldi	r18, 0x07	; 7
     ea6:	33 27       	eor	r19, r19
     ea8:	da 01       	movw	r26, r20
     eaa:	99 0f       	add	r25, r25
     eac:	31 1d       	adc	r19, r1
     eae:	87 fd       	sbrc	r24, 7
     eb0:	91 60       	ori	r25, 0x01	; 1
     eb2:	00 96       	adiw	r24, 0x00	; 0
     eb4:	61 05       	cpc	r22, r1
     eb6:	71 05       	cpc	r23, r1
     eb8:	39 f4       	brne	.+14     	; 0xec8 <__ftoa_engine+0x28>
     eba:	32 60       	ori	r19, 0x02	; 2
     ebc:	2e 5f       	subi	r18, 0xFE	; 254
     ebe:	3d 93       	st	X+, r19
     ec0:	30 e3       	ldi	r19, 0x30	; 48
     ec2:	2a 95       	dec	r18
     ec4:	e1 f7       	brne	.-8      	; 0xebe <__ftoa_engine+0x1e>
     ec6:	08 95       	ret
     ec8:	9f 3f       	cpi	r25, 0xFF	; 255
     eca:	30 f0       	brcs	.+12     	; 0xed8 <__ftoa_engine+0x38>
     ecc:	80 38       	cpi	r24, 0x80	; 128
     ece:	71 05       	cpc	r23, r1
     ed0:	61 05       	cpc	r22, r1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <__ftoa_engine+0x36>
     ed4:	3c 5f       	subi	r19, 0xFC	; 252
     ed6:	3c 5f       	subi	r19, 0xFC	; 252
     ed8:	3d 93       	st	X+, r19
     eda:	91 30       	cpi	r25, 0x01	; 1
     edc:	08 f0       	brcs	.+2      	; 0xee0 <__ftoa_engine+0x40>
     ede:	80 68       	ori	r24, 0x80	; 128
     ee0:	91 1d       	adc	r25, r1
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	1f 93       	push	r17
     ee8:	0f 93       	push	r16
     eea:	ff 92       	push	r15
     eec:	ef 92       	push	r14
     eee:	19 2f       	mov	r17, r25
     ef0:	98 7f       	andi	r25, 0xF8	; 248
     ef2:	96 95       	lsr	r25
     ef4:	e9 2f       	mov	r30, r25
     ef6:	96 95       	lsr	r25
     ef8:	96 95       	lsr	r25
     efa:	e9 0f       	add	r30, r25
     efc:	ff 27       	eor	r31, r31
     efe:	ee 53       	subi	r30, 0x3E	; 62
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	99 27       	eor	r25, r25
     f04:	33 27       	eor	r19, r19
     f06:	ee 24       	eor	r14, r14
     f08:	ff 24       	eor	r15, r15
     f0a:	a7 01       	movw	r20, r14
     f0c:	e7 01       	movw	r28, r14
     f0e:	05 90       	lpm	r0, Z+
     f10:	08 94       	sec
     f12:	07 94       	ror	r0
     f14:	28 f4       	brcc	.+10     	; 0xf20 <__ftoa_engine+0x80>
     f16:	36 0f       	add	r19, r22
     f18:	e7 1e       	adc	r14, r23
     f1a:	f8 1e       	adc	r15, r24
     f1c:	49 1f       	adc	r20, r25
     f1e:	51 1d       	adc	r21, r1
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	88 1f       	adc	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	06 94       	lsr	r0
     f2a:	a1 f7       	brne	.-24     	; 0xf14 <__ftoa_engine+0x74>
     f2c:	05 90       	lpm	r0, Z+
     f2e:	07 94       	ror	r0
     f30:	28 f4       	brcc	.+10     	; 0xf3c <__ftoa_engine+0x9c>
     f32:	e7 0e       	add	r14, r23
     f34:	f8 1e       	adc	r15, r24
     f36:	49 1f       	adc	r20, r25
     f38:	56 1f       	adc	r21, r22
     f3a:	c1 1d       	adc	r28, r1
     f3c:	77 0f       	add	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	66 1f       	adc	r22, r22
     f44:	06 94       	lsr	r0
     f46:	a1 f7       	brne	.-24     	; 0xf30 <__ftoa_engine+0x90>
     f48:	05 90       	lpm	r0, Z+
     f4a:	07 94       	ror	r0
     f4c:	28 f4       	brcc	.+10     	; 0xf58 <__ftoa_engine+0xb8>
     f4e:	f8 0e       	add	r15, r24
     f50:	49 1f       	adc	r20, r25
     f52:	56 1f       	adc	r21, r22
     f54:	c7 1f       	adc	r28, r23
     f56:	d1 1d       	adc	r29, r1
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	66 1f       	adc	r22, r22
     f5e:	77 1f       	adc	r23, r23
     f60:	06 94       	lsr	r0
     f62:	a1 f7       	brne	.-24     	; 0xf4c <__ftoa_engine+0xac>
     f64:	05 90       	lpm	r0, Z+
     f66:	07 94       	ror	r0
     f68:	20 f4       	brcc	.+8      	; 0xf72 <__ftoa_engine+0xd2>
     f6a:	49 0f       	add	r20, r25
     f6c:	56 1f       	adc	r21, r22
     f6e:	c7 1f       	adc	r28, r23
     f70:	d8 1f       	adc	r29, r24
     f72:	99 0f       	add	r25, r25
     f74:	66 1f       	adc	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	88 1f       	adc	r24, r24
     f7a:	06 94       	lsr	r0
     f7c:	a9 f7       	brne	.-22     	; 0xf68 <__ftoa_engine+0xc8>
     f7e:	84 91       	lpm	r24, Z
     f80:	10 95       	com	r17
     f82:	17 70       	andi	r17, 0x07	; 7
     f84:	41 f0       	breq	.+16     	; 0xf96 <__ftoa_engine+0xf6>
     f86:	d6 95       	lsr	r29
     f88:	c7 95       	ror	r28
     f8a:	57 95       	ror	r21
     f8c:	47 95       	ror	r20
     f8e:	f7 94       	ror	r15
     f90:	e7 94       	ror	r14
     f92:	1a 95       	dec	r17
     f94:	c1 f7       	brne	.-16     	; 0xf86 <__ftoa_engine+0xe6>
     f96:	e8 e6       	ldi	r30, 0x68	; 104
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	68 94       	set
     f9c:	15 90       	lpm	r1, Z+
     f9e:	15 91       	lpm	r17, Z+
     fa0:	35 91       	lpm	r19, Z+
     fa2:	65 91       	lpm	r22, Z+
     fa4:	95 91       	lpm	r25, Z+
     fa6:	05 90       	lpm	r0, Z+
     fa8:	7f e2       	ldi	r23, 0x2F	; 47
     faa:	73 95       	inc	r23
     fac:	e1 18       	sub	r14, r1
     fae:	f1 0a       	sbc	r15, r17
     fb0:	43 0b       	sbc	r20, r19
     fb2:	56 0b       	sbc	r21, r22
     fb4:	c9 0b       	sbc	r28, r25
     fb6:	d0 09       	sbc	r29, r0
     fb8:	c0 f7       	brcc	.-16     	; 0xfaa <__ftoa_engine+0x10a>
     fba:	e1 0c       	add	r14, r1
     fbc:	f1 1e       	adc	r15, r17
     fbe:	43 1f       	adc	r20, r19
     fc0:	56 1f       	adc	r21, r22
     fc2:	c9 1f       	adc	r28, r25
     fc4:	d0 1d       	adc	r29, r0
     fc6:	7e f4       	brtc	.+30     	; 0xfe6 <__ftoa_engine+0x146>
     fc8:	70 33       	cpi	r23, 0x30	; 48
     fca:	11 f4       	brne	.+4      	; 0xfd0 <__ftoa_engine+0x130>
     fcc:	8a 95       	dec	r24
     fce:	e6 cf       	rjmp	.-52     	; 0xf9c <__ftoa_engine+0xfc>
     fd0:	e8 94       	clt
     fd2:	01 50       	subi	r16, 0x01	; 1
     fd4:	30 f0       	brcs	.+12     	; 0xfe2 <__ftoa_engine+0x142>
     fd6:	08 0f       	add	r16, r24
     fd8:	0a f4       	brpl	.+2      	; 0xfdc <__ftoa_engine+0x13c>
     fda:	00 27       	eor	r16, r16
     fdc:	02 17       	cp	r16, r18
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <__ftoa_engine+0x142>
     fe0:	20 2f       	mov	r18, r16
     fe2:	23 95       	inc	r18
     fe4:	02 2f       	mov	r16, r18
     fe6:	7a 33       	cpi	r23, 0x3A	; 58
     fe8:	28 f0       	brcs	.+10     	; 0xff4 <__ftoa_engine+0x154>
     fea:	79 e3       	ldi	r23, 0x39	; 57
     fec:	7d 93       	st	X+, r23
     fee:	2a 95       	dec	r18
     ff0:	e9 f7       	brne	.-6      	; 0xfec <__ftoa_engine+0x14c>
     ff2:	10 c0       	rjmp	.+32     	; 0x1014 <__ftoa_engine+0x174>
     ff4:	7d 93       	st	X+, r23
     ff6:	2a 95       	dec	r18
     ff8:	89 f6       	brne	.-94     	; 0xf9c <__ftoa_engine+0xfc>
     ffa:	06 94       	lsr	r0
     ffc:	97 95       	ror	r25
     ffe:	67 95       	ror	r22
    1000:	37 95       	ror	r19
    1002:	17 95       	ror	r17
    1004:	17 94       	ror	r1
    1006:	e1 18       	sub	r14, r1
    1008:	f1 0a       	sbc	r15, r17
    100a:	43 0b       	sbc	r20, r19
    100c:	56 0b       	sbc	r21, r22
    100e:	c9 0b       	sbc	r28, r25
    1010:	d0 09       	sbc	r29, r0
    1012:	98 f0       	brcs	.+38     	; 0x103a <__ftoa_engine+0x19a>
    1014:	23 95       	inc	r18
    1016:	7e 91       	ld	r23, -X
    1018:	73 95       	inc	r23
    101a:	7a 33       	cpi	r23, 0x3A	; 58
    101c:	08 f0       	brcs	.+2      	; 0x1020 <__ftoa_engine+0x180>
    101e:	70 e3       	ldi	r23, 0x30	; 48
    1020:	7c 93       	st	X, r23
    1022:	20 13       	cpse	r18, r16
    1024:	b8 f7       	brcc	.-18     	; 0x1014 <__ftoa_engine+0x174>
    1026:	7e 91       	ld	r23, -X
    1028:	70 61       	ori	r23, 0x10	; 16
    102a:	7d 93       	st	X+, r23
    102c:	30 f0       	brcs	.+12     	; 0x103a <__ftoa_engine+0x19a>
    102e:	83 95       	inc	r24
    1030:	71 e3       	ldi	r23, 0x31	; 49
    1032:	7d 93       	st	X+, r23
    1034:	70 e3       	ldi	r23, 0x30	; 48
    1036:	2a 95       	dec	r18
    1038:	e1 f7       	brne	.-8      	; 0x1032 <__ftoa_engine+0x192>
    103a:	11 24       	eor	r1, r1
    103c:	ef 90       	pop	r14
    103e:	ff 90       	pop	r15
    1040:	0f 91       	pop	r16
    1042:	1f 91       	pop	r17
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	99 27       	eor	r25, r25
    104a:	87 fd       	sbrc	r24, 7
    104c:	90 95       	com	r25
    104e:	08 95       	ret

00001050 <strrev>:
    1050:	dc 01       	movw	r26, r24
    1052:	fc 01       	movw	r30, r24
    1054:	67 2f       	mov	r22, r23
    1056:	71 91       	ld	r23, Z+
    1058:	77 23       	and	r23, r23
    105a:	e1 f7       	brne	.-8      	; 0x1054 <strrev+0x4>
    105c:	32 97       	sbiw	r30, 0x02	; 2
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <strrev+0x18>
    1060:	7c 91       	ld	r23, X
    1062:	6d 93       	st	X+, r22
    1064:	70 83       	st	Z, r23
    1066:	62 91       	ld	r22, -Z
    1068:	ae 17       	cp	r26, r30
    106a:	bf 07       	cpc	r27, r31
    106c:	c8 f3       	brcs	.-14     	; 0x1060 <strrev+0x10>
    106e:	08 95       	ret

00001070 <__prologue_saves__>:
    1070:	2f 92       	push	r2
    1072:	3f 92       	push	r3
    1074:	4f 92       	push	r4
    1076:	5f 92       	push	r5
    1078:	6f 92       	push	r6
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	ca 1b       	sub	r28, r26
    109a:	db 0b       	sbc	r29, r27
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	09 94       	ijmp

000010a8 <__epilogue_restores__>:
    10a8:	2a 88       	ldd	r2, Y+18	; 0x12
    10aa:	39 88       	ldd	r3, Y+17	; 0x11
    10ac:	48 88       	ldd	r4, Y+16	; 0x10
    10ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    10b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    10ba:	b9 84       	ldd	r11, Y+9	; 0x09
    10bc:	c8 84       	ldd	r12, Y+8	; 0x08
    10be:	df 80       	ldd	r13, Y+7	; 0x07
    10c0:	ee 80       	ldd	r14, Y+6	; 0x06
    10c2:	fd 80       	ldd	r15, Y+5	; 0x05
    10c4:	0c 81       	ldd	r16, Y+4	; 0x04
    10c6:	1b 81       	ldd	r17, Y+3	; 0x03
    10c8:	aa 81       	ldd	r26, Y+2	; 0x02
    10ca:	b9 81       	ldd	r27, Y+1	; 0x01
    10cc:	ce 0f       	add	r28, r30
    10ce:	d1 1d       	adc	r29, r1
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	ed 01       	movw	r28, r26
    10dc:	08 95       	ret

000010de <_exit>:
    10de:	f8 94       	cli

000010e0 <__stop_program>:
    10e0:	ff cf       	rjmp	.-2      	; 0x10e0 <__stop_program>

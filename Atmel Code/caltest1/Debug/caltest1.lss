
caltest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000010b6  0000112a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000150d  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000834  00000000  00000000  00002735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ad  00000000  00000000  00002f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ea  00000000  00000000  000038fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ed6  00000000  00000000  00003de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
       8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
       c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      10:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      14:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      18:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      1c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      20:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      24:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      28:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      30:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      34:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      38:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      3c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      44:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      4c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      50:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      54:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      58:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      5c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__fp_pscA>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_Z10Calculatorv+0x184>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <_Z11Keypad_Readv+0x90>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <__bad_interrupt>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <_Z11LCD_Commandh+0x3e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e6 eb       	ldi	r30, 0xB6	; 182
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a4 33       	cpi	r26, 0x34	; 52
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>
     184:	0e 94 08 04 	call	0x810	; 0x810 <main>
     188:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_exit>

0000018c <__bad_interrupt>:
     18c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000190 <_Z11LCD_Commandh>:
		Calculator();
	}
}

void LCD_Command(unsigned char cmnd) {
	PORTC &= ~((1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7));
     190:	98 b1       	in	r25, 0x08	; 8
     192:	90 7f       	andi	r25, 0xF0	; 240
     194:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x10) PORTC |= (1 << LCD_D4);
     196:	84 ff       	sbrs	r24, 4
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <_Z11LCD_Commandh+0x10>
     19a:	98 b1       	in	r25, 0x08	; 8
     19c:	91 60       	ori	r25, 0x01	; 1
     19e:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x20) PORTC |= (1 << LCD_D5);
     1a0:	85 ff       	sbrs	r24, 5
     1a2:	03 c0       	rjmp	.+6      	; 0x1aa <_Z11LCD_Commandh+0x1a>
     1a4:	98 b1       	in	r25, 0x08	; 8
     1a6:	92 60       	ori	r25, 0x02	; 2
     1a8:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x40) PORTC |= (1 << LCD_D6);
     1aa:	86 ff       	sbrs	r24, 6
     1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <_Z11LCD_Commandh+0x24>
     1ae:	98 b1       	in	r25, 0x08	; 8
     1b0:	94 60       	ori	r25, 0x04	; 4
     1b2:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x80) PORTC |= (1 << LCD_D7);
     1b4:	88 23       	and	r24, r24
     1b6:	1c f4       	brge	.+6      	; 0x1be <_Z11LCD_Commandh+0x2e>
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	98 60       	ori	r25, 0x08	; 8
     1bc:	98 b9       	out	0x08, r25	; 8
	PORTB &= ~(1 << LCD_RS); // Command mode
     1be:	95 b1       	in	r25, 0x05	; 5
     1c0:	9b 7f       	andi	r25, 0xFB	; 251
     1c2:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1 << LCD_RW); // Write mode
     1c4:	95 b1       	in	r25, 0x05	; 5
     1c6:	9d 7f       	andi	r25, 0xFD	; 253
     1c8:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << LCD_EN);
     1ca:	95 b1       	in	r25, 0x05	; 5
     1cc:	91 60       	ori	r25, 0x01	; 1
     1ce:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d0:	95 e0       	ldi	r25, 0x05	; 5
     1d2:	9a 95       	dec	r25
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z11LCD_Commandh+0x42>
     1d6:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN);
     1d8:	95 b1       	in	r25, 0x05	; 5
     1da:	9e 7f       	andi	r25, 0xFE	; 254
     1dc:	95 b9       	out	0x05, r25	; 5
     1de:	e7 ec       	ldi	r30, 0xC7	; 199
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <_Z11LCD_Commandh+0x52>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_Z11LCD_Commandh+0x58>
     1e8:	00 00       	nop
	_delay_us(50);

	PORTC &= ~((1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7));
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 7f       	andi	r25, 0xF0	; 240
     1ee:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x01) PORTC |= (1 << LCD_D4);
     1f0:	80 ff       	sbrs	r24, 0
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <_Z11LCD_Commandh+0x6a>
     1f4:	98 b1       	in	r25, 0x08	; 8
     1f6:	91 60       	ori	r25, 0x01	; 1
     1f8:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x02) PORTC |= (1 << LCD_D5);
     1fa:	81 ff       	sbrs	r24, 1
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <_Z11LCD_Commandh+0x74>
     1fe:	98 b1       	in	r25, 0x08	; 8
     200:	92 60       	ori	r25, 0x02	; 2
     202:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x04) PORTC |= (1 << LCD_D6);
     204:	82 ff       	sbrs	r24, 2
     206:	03 c0       	rjmp	.+6      	; 0x20e <_Z11LCD_Commandh+0x7e>
     208:	98 b1       	in	r25, 0x08	; 8
     20a:	94 60       	ori	r25, 0x04	; 4
     20c:	98 b9       	out	0x08, r25	; 8
	if (cmnd & 0x08) PORTC |= (1 << LCD_D7);
     20e:	83 ff       	sbrs	r24, 3
     210:	03 c0       	rjmp	.+6      	; 0x218 <_Z11LCD_Commandh+0x88>
     212:	88 b1       	in	r24, 0x08	; 8
     214:	88 60       	ori	r24, 0x08	; 8
     216:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1 << LCD_EN);
     218:	85 b1       	in	r24, 0x05	; 5
     21a:	81 60       	ori	r24, 0x01	; 1
     21c:	85 b9       	out	0x05, r24	; 5
     21e:	f5 e0       	ldi	r31, 0x05	; 5
     220:	fa 95       	dec	r31
     222:	f1 f7       	brne	.-4      	; 0x220 <_Z11LCD_Commandh+0x90>
     224:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN);
     226:	85 b1       	in	r24, 0x05	; 5
     228:	8e 7f       	andi	r24, 0xFE	; 254
     22a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	8f e3       	ldi	r24, 0x3F	; 63
     22e:	9f e1       	ldi	r25, 0x1F	; 31
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <_Z11LCD_Commandh+0xa0>
     234:	00 c0       	rjmp	.+0      	; 0x236 <_Z11LCD_Commandh+0xa6>
     236:	00 00       	nop
     238:	08 95       	ret

0000023a <_Z8LCD_Datah>:
	_delay_ms(2);
}

void LCD_Data(unsigned char data) {
	PORTC &= ~((1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7));
     23a:	98 b1       	in	r25, 0x08	; 8
     23c:	90 7f       	andi	r25, 0xF0	; 240
     23e:	98 b9       	out	0x08, r25	; 8
	if (data & 0x10) PORTC |= (1 << LCD_D4);
     240:	84 ff       	sbrs	r24, 4
     242:	03 c0       	rjmp	.+6      	; 0x24a <_Z8LCD_Datah+0x10>
     244:	98 b1       	in	r25, 0x08	; 8
     246:	91 60       	ori	r25, 0x01	; 1
     248:	98 b9       	out	0x08, r25	; 8
	if (data & 0x20) PORTC |= (1 << LCD_D5);
     24a:	85 ff       	sbrs	r24, 5
     24c:	03 c0       	rjmp	.+6      	; 0x254 <_Z8LCD_Datah+0x1a>
     24e:	98 b1       	in	r25, 0x08	; 8
     250:	92 60       	ori	r25, 0x02	; 2
     252:	98 b9       	out	0x08, r25	; 8
	if (data & 0x40) PORTC |= (1 << LCD_D6);
     254:	86 ff       	sbrs	r24, 6
     256:	03 c0       	rjmp	.+6      	; 0x25e <_Z8LCD_Datah+0x24>
     258:	98 b1       	in	r25, 0x08	; 8
     25a:	94 60       	ori	r25, 0x04	; 4
     25c:	98 b9       	out	0x08, r25	; 8
	if (data & 0x80) PORTC |= (1 << LCD_D7);
     25e:	88 23       	and	r24, r24
     260:	1c f4       	brge	.+6      	; 0x268 <_Z8LCD_Datah+0x2e>
     262:	98 b1       	in	r25, 0x08	; 8
     264:	98 60       	ori	r25, 0x08	; 8
     266:	98 b9       	out	0x08, r25	; 8
	PORTB |= (1 << LCD_RS);  // Data mode
     268:	95 b1       	in	r25, 0x05	; 5
     26a:	94 60       	ori	r25, 0x04	; 4
     26c:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1 << LCD_RW); // Write mode
     26e:	95 b1       	in	r25, 0x05	; 5
     270:	9d 7f       	andi	r25, 0xFD	; 253
     272:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << LCD_EN);
     274:	95 b1       	in	r25, 0x05	; 5
     276:	91 60       	ori	r25, 0x01	; 1
     278:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27a:	95 e0       	ldi	r25, 0x05	; 5
     27c:	9a 95       	dec	r25
     27e:	f1 f7       	brne	.-4      	; 0x27c <_Z8LCD_Datah+0x42>
     280:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN);
     282:	95 b1       	in	r25, 0x05	; 5
     284:	9e 7f       	andi	r25, 0xFE	; 254
     286:	95 b9       	out	0x05, r25	; 5
     288:	e7 ec       	ldi	r30, 0xC7	; 199
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <_Z8LCD_Datah+0x52>
     290:	00 c0       	rjmp	.+0      	; 0x292 <_Z8LCD_Datah+0x58>
     292:	00 00       	nop
	_delay_us(50);

	PORTC &= ~((1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7));
     294:	98 b1       	in	r25, 0x08	; 8
     296:	90 7f       	andi	r25, 0xF0	; 240
     298:	98 b9       	out	0x08, r25	; 8
	if (data & 0x01) PORTC |= (1 << LCD_D4);
     29a:	80 ff       	sbrs	r24, 0
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <_Z8LCD_Datah+0x6a>
     29e:	98 b1       	in	r25, 0x08	; 8
     2a0:	91 60       	ori	r25, 0x01	; 1
     2a2:	98 b9       	out	0x08, r25	; 8
	if (data & 0x02) PORTC |= (1 << LCD_D5);
     2a4:	81 ff       	sbrs	r24, 1
     2a6:	03 c0       	rjmp	.+6      	; 0x2ae <_Z8LCD_Datah+0x74>
     2a8:	98 b1       	in	r25, 0x08	; 8
     2aa:	92 60       	ori	r25, 0x02	; 2
     2ac:	98 b9       	out	0x08, r25	; 8
	if (data & 0x04) PORTC |= (1 << LCD_D6);
     2ae:	82 ff       	sbrs	r24, 2
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_Z8LCD_Datah+0x7e>
     2b2:	98 b1       	in	r25, 0x08	; 8
     2b4:	94 60       	ori	r25, 0x04	; 4
     2b6:	98 b9       	out	0x08, r25	; 8
	if (data & 0x08) PORTC |= (1 << LCD_D7);
     2b8:	83 ff       	sbrs	r24, 3
     2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <_Z8LCD_Datah+0x88>
     2bc:	88 b1       	in	r24, 0x08	; 8
     2be:	88 60       	ori	r24, 0x08	; 8
     2c0:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1 << LCD_EN);
     2c2:	85 b1       	in	r24, 0x05	; 5
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	85 b9       	out	0x05, r24	; 5
     2c8:	f5 e0       	ldi	r31, 0x05	; 5
     2ca:	fa 95       	dec	r31
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <_Z8LCD_Datah+0x90>
     2ce:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << LCD_EN);
     2d0:	85 b1       	in	r24, 0x05	; 5
     2d2:	8e 7f       	andi	r24, 0xFE	; 254
     2d4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d6:	8f e3       	ldi	r24, 0x3F	; 63
     2d8:	9f e1       	ldi	r25, 0x1F	; 31
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <_Z8LCD_Datah+0xa0>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <_Z8LCD_Datah+0xa6>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <_Z8LCD_Initv>:
     2e4:	2f ef       	ldi	r18, 0xFF	; 255
     2e6:	89 ef       	ldi	r24, 0xF9	; 249
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	80 40       	sbci	r24, 0x00	; 0
     2ee:	90 40       	sbci	r25, 0x00	; 0
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <_Z8LCD_Initv+0x6>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <_Z8LCD_Initv+0x10>
     2f4:	00 00       	nop
	_delay_ms(2);
}

void LCD_Init(void) {
	_delay_ms(20);       // Wait for LCD to power up
	LCD_Command(0x02);   // 4-bit mode
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	0e 94 c8 00 	call	0x190	; 0x190 <_Z11LCD_Commandh>
	LCD_Command(0x28);   // 2 lines, 5x8 font
     2fc:	88 e2       	ldi	r24, 0x28	; 40
     2fe:	0e 94 c8 00 	call	0x190	; 0x190 <_Z11LCD_Commandh>
	LCD_Command(0x0C);   // Display on, cursor off
     302:	8c e0       	ldi	r24, 0x0C	; 12
     304:	0e 94 c8 00 	call	0x190	; 0x190 <_Z11LCD_Commandh>
	LCD_Command(0x06);   // Increment cursor
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	0e 94 c8 00 	call	0x190	; 0x190 <_Z11LCD_Commandh>
	LCD_Command(0x01);   // Clear display
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	0e 94 c8 00 	call	0x190	; 0x190 <_Z11LCD_Commandh>
     314:	8f e3       	ldi	r24, 0x3F	; 63
     316:	9f e1       	ldi	r25, 0x1F	; 31
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <_Z8LCD_Initv+0x34>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <_Z8LCD_Initv+0x3a>
     31e:	00 00       	nop
     320:	08 95       	ret

00000322 <_Z10LCD_StringPKc>:
	_delay_ms(2);
}

void LCD_String(const char *str) {
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	ec 01       	movw	r28, r24
	while (*str) {
     328:	88 81       	ld	r24, Y
     32a:	88 23       	and	r24, r24
     32c:	21 f0       	breq	.+8      	; 0x336 <_Z10LCD_StringPKc+0x14>
		LCD_Data(*str++);
     32e:	21 96       	adiw	r28, 0x01	; 1
     330:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z8LCD_Datah>
	LCD_Command(0x01);   // Clear display
	_delay_ms(2);
}

void LCD_String(const char *str) {
	while (*str) {
     334:	f9 cf       	rjmp	.-14     	; 0x328 <_Z10LCD_StringPKc+0x6>
		LCD_Data(*str++);
	}
}
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <_Z9LCD_Clearv>:

void LCD_Clear(void) {
	LCD_Command(0x01); // Clear display
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0e 94 c8 00 	call	0x190	; 0x190 <_Z11LCD_Commandh>
     342:	8f e3       	ldi	r24, 0x3F	; 63
     344:	9f e1       	ldi	r25, 0x1F	; 31
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <_Z9LCD_Clearv+0xa>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <_Z9LCD_Clearv+0x10>
     34c:	00 00       	nop
     34e:	08 95       	ret

00000350 <_Z11Keypad_Readv>:
	_delay_ms(2);
}

char Keypad_Read(void) {
	PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4); // All columns high
     350:	8b b1       	in	r24, 0x0b	; 11
     352:	80 6f       	ori	r24, 0xF0	; 240
     354:	8b b9       	out	0x0b, r24	; 11
	
	// Check Column 1
	PORTD &= ~(1 << COL1);
     356:	8b b1       	in	r24, 0x0b	; 11
     358:	8f 7e       	andi	r24, 0xEF	; 239
     35a:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '7'; }
     35c:	48 99       	sbic	0x09, 0	; 9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_Z11Keypad_Readv+0x26>
     360:	2f ef       	ldi	r18, 0xFF	; 255
     362:	80 e7       	ldi	r24, 0x70	; 112
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	21 50       	subi	r18, 0x01	; 1
     368:	80 40       	sbci	r24, 0x00	; 0
     36a:	90 40       	sbci	r25, 0x00	; 0
     36c:	e1 f7       	brne	.-8      	; 0x366 <_Z11Keypad_Readv+0x16>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <_Z11Keypad_Readv+0x20>
     370:	00 00       	nop
     372:	87 e3       	ldi	r24, 0x37	; 55
     374:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return '4'; }
     376:	49 99       	sbic	0x09, 1	; 9
     378:	0b c0       	rjmp	.+22     	; 0x390 <_Z11Keypad_Readv+0x40>
     37a:	2f ef       	ldi	r18, 0xFF	; 255
     37c:	80 e7       	ldi	r24, 0x70	; 112
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	21 50       	subi	r18, 0x01	; 1
     382:	80 40       	sbci	r24, 0x00	; 0
     384:	90 40       	sbci	r25, 0x00	; 0
     386:	e1 f7       	brne	.-8      	; 0x380 <_Z11Keypad_Readv+0x30>
     388:	00 c0       	rjmp	.+0      	; 0x38a <_Z11Keypad_Readv+0x3a>
     38a:	00 00       	nop
     38c:	84 e3       	ldi	r24, 0x34	; 52
     38e:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '1'; }
     390:	4a 99       	sbic	0x09, 2	; 9
     392:	0b c0       	rjmp	.+22     	; 0x3aa <_Z11Keypad_Readv+0x5a>
     394:	2f ef       	ldi	r18, 0xFF	; 255
     396:	80 e7       	ldi	r24, 0x70	; 112
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	80 40       	sbci	r24, 0x00	; 0
     39e:	90 40       	sbci	r25, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <_Z11Keypad_Readv+0x4a>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <_Z11Keypad_Readv+0x54>
     3a4:	00 00       	nop
     3a6:	81 e3       	ldi	r24, 0x31	; 49
     3a8:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return 'C'; } // Clear/ON
     3aa:	4b 99       	sbic	0x09, 3	; 9
     3ac:	0b c0       	rjmp	.+22     	; 0x3c4 <_Z11Keypad_Readv+0x74>
     3ae:	2f ef       	ldi	r18, 0xFF	; 255
     3b0:	80 e7       	ldi	r24, 0x70	; 112
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	21 50       	subi	r18, 0x01	; 1
     3b6:	80 40       	sbci	r24, 0x00	; 0
     3b8:	90 40       	sbci	r25, 0x00	; 0
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <_Z11Keypad_Readv+0x64>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <_Z11Keypad_Readv+0x6e>
     3be:	00 00       	nop
     3c0:	83 e4       	ldi	r24, 0x43	; 67
     3c2:	08 95       	ret
	
	// Check Column 2
	PORTD |= (1 << COL1);
     3c4:	8b b1       	in	r24, 0x0b	; 11
     3c6:	80 61       	ori	r24, 0x10	; 16
     3c8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << COL2);
     3ca:	8b b1       	in	r24, 0x0b	; 11
     3cc:	8f 7d       	andi	r24, 0xDF	; 223
     3ce:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '8'; }
     3d0:	48 99       	sbic	0x09, 0	; 9
     3d2:	0b c0       	rjmp	.+22     	; 0x3ea <_Z11Keypad_Readv+0x9a>
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	80 e7       	ldi	r24, 0x70	; 112
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	90 40       	sbci	r25, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <_Z11Keypad_Readv+0x8a>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_Z11Keypad_Readv+0x94>
     3e4:	00 00       	nop
     3e6:	88 e3       	ldi	r24, 0x38	; 56
     3e8:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return '5'; }
     3ea:	49 99       	sbic	0x09, 1	; 9
     3ec:	0b c0       	rjmp	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	80 e7       	ldi	r24, 0x70	; 112
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	80 40       	sbci	r24, 0x00	; 0
     3f8:	90 40       	sbci	r25, 0x00	; 0
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <_Z11Keypad_Readv+0xa4>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <_Z11Keypad_Readv+0xae>
     3fe:	00 00       	nop
     400:	85 e3       	ldi	r24, 0x35	; 53
     402:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '2'; }
     404:	4a 99       	sbic	0x09, 2	; 9
     406:	0b c0       	rjmp	.+22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     408:	2f ef       	ldi	r18, 0xFF	; 255
     40a:	80 e7       	ldi	r24, 0x70	; 112
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	21 50       	subi	r18, 0x01	; 1
     410:	80 40       	sbci	r24, 0x00	; 0
     412:	90 40       	sbci	r25, 0x00	; 0
     414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     418:	00 00       	nop
     41a:	82 e3       	ldi	r24, 0x32	; 50
     41c:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return '0'; }
     41e:	4b 99       	sbic	0x09, 3	; 9
     420:	0b c0       	rjmp	.+22     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     422:	2f ef       	ldi	r18, 0xFF	; 255
     424:	80 e7       	ldi	r24, 0x70	; 112
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	21 50       	subi	r18, 0x01	; 1
     42a:	80 40       	sbci	r24, 0x00	; 0
     42c:	90 40       	sbci	r25, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     432:	00 00       	nop
     434:	80 e3       	ldi	r24, 0x30	; 48
     436:	08 95       	ret
	
	// Check Column 3
	PORTD |= (1 << COL2);
     438:	8b b1       	in	r24, 0x0b	; 11
     43a:	80 62       	ori	r24, 0x20	; 32
     43c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << COL3);
     43e:	8b b1       	in	r24, 0x0b	; 11
     440:	8f 7b       	andi	r24, 0xBF	; 191
     442:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '9'; }
     444:	48 99       	sbic	0x09, 0	; 9
     446:	0b c0       	rjmp	.+22     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     448:	2f ef       	ldi	r18, 0xFF	; 255
     44a:	80 e7       	ldi	r24, 0x70	; 112
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	80 40       	sbci	r24, 0x00	; 0
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     458:	00 00       	nop
     45a:	89 e3       	ldi	r24, 0x39	; 57
     45c:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return '6'; }
     45e:	49 99       	sbic	0x09, 1	; 9
     460:	0b c0       	rjmp	.+22     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     462:	2f ef       	ldi	r18, 0xFF	; 255
     464:	80 e7       	ldi	r24, 0x70	; 112
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	21 50       	subi	r18, 0x01	; 1
     46a:	80 40       	sbci	r24, 0x00	; 0
     46c:	90 40       	sbci	r25, 0x00	; 0
     46e:	e1 f7       	brne	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     472:	00 00       	nop
     474:	86 e3       	ldi	r24, 0x36	; 54
     476:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '3'; }
     478:	4a 99       	sbic	0x09, 2	; 9
     47a:	0b c0       	rjmp	.+22     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	80 e7       	ldi	r24, 0x70	; 112
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	21 50       	subi	r18, 0x01	; 1
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     48c:	00 00       	nop
     48e:	83 e3       	ldi	r24, 0x33	; 51
     490:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return '='; }
     492:	4b 99       	sbic	0x09, 3	; 9
     494:	0b c0       	rjmp	.+22     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     496:	2f ef       	ldi	r18, 0xFF	; 255
     498:	80 e7       	ldi	r24, 0x70	; 112
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	21 50       	subi	r18, 0x01	; 1
     49e:	80 40       	sbci	r24, 0x00	; 0
     4a0:	90 40       	sbci	r25, 0x00	; 0
     4a2:	e1 f7       	brne	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4a6:	00 00       	nop
     4a8:	8d e3       	ldi	r24, 0x3D	; 61
     4aa:	08 95       	ret
	
	// Check Column 4
	PORTD |= (1 << COL3);
     4ac:	8b b1       	in	r24, 0x0b	; 11
     4ae:	80 64       	ori	r24, 0x40	; 64
     4b0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << COL4);
     4b2:	8b b1       	in	r24, 0x0b	; 11
     4b4:	8f 77       	andi	r24, 0x7F	; 127
     4b6:	8b b9       	out	0x0b, r24	; 11
	if (!(PIND & (1 << ROW1))) { _delay_ms(50); return '/'; }
     4b8:	48 99       	sbic	0x09, 0	; 9
     4ba:	0b c0       	rjmp	.+22     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4bc:	2f ef       	ldi	r18, 0xFF	; 255
     4be:	80 e7       	ldi	r24, 0x70	; 112
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	90 40       	sbci	r25, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4cc:	00 00       	nop
     4ce:	8f e2       	ldi	r24, 0x2F	; 47
     4d0:	08 95       	ret
	if (!(PIND & (1 << ROW2))) { _delay_ms(50); return '*'; }
     4d2:	49 99       	sbic	0x09, 1	; 9
     4d4:	0b c0       	rjmp	.+22     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	80 e7       	ldi	r24, 0x70	; 112
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e6:	00 00       	nop
     4e8:	8a e2       	ldi	r24, 0x2A	; 42
     4ea:	08 95       	ret
	if (!(PIND & (1 << ROW3))) { _delay_ms(50); return '-'; }
     4ec:	4a 99       	sbic	0x09, 2	; 9
     4ee:	0b c0       	rjmp	.+22     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	80 e7       	ldi	r24, 0x70	; 112
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     500:	00 00       	nop
     502:	8d e2       	ldi	r24, 0x2D	; 45
     504:	08 95       	ret
	if (!(PIND & (1 << ROW4))) { _delay_ms(50); return '+'; }
     506:	4b 99       	sbic	0x09, 3	; 9
     508:	0b c0       	rjmp	.+22     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	80 e7       	ldi	r24, 0x70	; 112
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	21 50       	subi	r18, 0x01	; 1
     512:	80 40       	sbci	r24, 0x00	; 0
     514:	90 40       	sbci	r25, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     51a:	00 00       	nop
     51c:	8b e2       	ldi	r24, 0x2B	; 43
     51e:	08 95       	ret
	
	PORTD |= (1 << COL4); // Reset columns
     520:	8b b1       	in	r24, 0x0b	; 11
     522:	80 68       	ori	r24, 0x80	; 128
     524:	8b b9       	out	0x0b, r24	; 11
	return 0;             // No key pressed
     526:	80 e0       	ldi	r24, 0x00	; 0
}
     528:	08 95       	ret

0000052a <_Z10Calculatorv>:

void Calculator(void) {
     52a:	8f 92       	push	r8
     52c:	9f 92       	push	r9
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	6c 97       	sbiw	r28, 0x1c	; 28
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
	char key, num1[6] = {0}, num2[6] = {0}, op = 0;
     552:	86 e0       	ldi	r24, 0x06	; 6
     554:	fe 01       	movw	r30, r28
     556:	31 96       	adiw	r30, 0x01	; 1
     558:	df 01       	movw	r26, r30
     55a:	28 2f       	mov	r18, r24
     55c:	1d 92       	st	X+, r1
     55e:	2a 95       	dec	r18
     560:	e9 f7       	brne	.-6      	; 0x55c <_Z10Calculatorv+0x32>
     562:	36 96       	adiw	r30, 0x06	; 6
     564:	df 01       	movw	r26, r30
     566:	1d 92       	st	X+, r1
     568:	8a 95       	dec	r24
     56a:	e9 f7       	brne	.-6      	; 0x566 <_Z10Calculatorv+0x3c>
	int i = 0, j = 0;
	long result = 0;
	float result_float = 0.0;
	char result_str[16] = {0};
     56c:	36 96       	adiw	r30, 0x06	; 6
     56e:	80 e1       	ldi	r24, 0x10	; 16
     570:	df 01       	movw	r26, r30
     572:	1d 92       	st	X+, r1
     574:	8a 95       	dec	r24
     576:	e9 f7       	brne	.-6      	; 0x572 <_Z10Calculatorv+0x48>

	LCD_Clear();
     578:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z9LCD_Clearv>
	return 0;             // No key pressed
}

void Calculator(void) {
	char key, num1[6] = {0}, num2[6] = {0}, op = 0;
	int i = 0, j = 0;
     57c:	e1 2c       	mov	r14, r1
     57e:	f1 2c       	mov	r15, r1

	LCD_Clear();

	// Get first number
	while (1) {
		key = Keypad_Read();
     580:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11Keypad_Readv>
     584:	18 2f       	mov	r17, r24
		if (key && (key >= '0' && key <= '9') && i < 5) {
     586:	80 ed       	ldi	r24, 0xD0	; 208
     588:	81 0f       	add	r24, r17
     58a:	8a 30       	cpi	r24, 0x0A	; 10
     58c:	e8 f4       	brcc	.+58     	; 0x5c8 <_Z10Calculatorv+0x9e>
     58e:	b5 e0       	ldi	r27, 0x05	; 5
     590:	eb 16       	cp	r14, r27
     592:	f1 04       	cpc	r15, r1
     594:	cc f4       	brge	.+50     	; 0x5c8 <_Z10Calculatorv+0x9e>
			num1[i++] = key;
     596:	67 01       	movw	r12, r14
     598:	2f ef       	ldi	r18, 0xFF	; 255
     59a:	c2 1a       	sub	r12, r18
     59c:	d2 0a       	sbc	r13, r18
     59e:	e1 e0       	ldi	r30, 0x01	; 1
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ec 0f       	add	r30, r28
     5a4:	fd 1f       	adc	r31, r29
     5a6:	ee 0d       	add	r30, r14
     5a8:	ff 1d       	adc	r31, r15
     5aa:	10 83       	st	Z, r17
			LCD_Data(key);
     5ac:	81 2f       	mov	r24, r17
     5ae:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z8LCD_Datah>
			while (Keypad_Read()) _delay_ms(10); // Debounce
     5b2:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11Keypad_Readv>
     5b6:	88 23       	and	r24, r24
     5b8:	91 f0       	breq	.+36     	; 0x5de <_Z10Calculatorv+0xb4>
     5ba:	8f e3       	ldi	r24, 0x3F	; 63
     5bc:	9c e9       	ldi	r25, 0x9C	; 156
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <_Z10Calculatorv+0x94>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <_Z10Calculatorv+0x9a>
     5c4:	00 00       	nop
     5c6:	f5 cf       	rjmp	.-22     	; 0x5b2 <_Z10Calculatorv+0x88>
			} else if (key == '+' || key == '-' || key == '*' || key == '/' || key == 'C') {
     5c8:	1b 32       	cpi	r17, 0x2B	; 43
     5ca:	89 f0       	breq	.+34     	; 0x5ee <_Z10Calculatorv+0xc4>
     5cc:	1d 32       	cpi	r17, 0x2D	; 45
     5ce:	79 f0       	breq	.+30     	; 0x5ee <_Z10Calculatorv+0xc4>
     5d0:	1a 32       	cpi	r17, 0x2A	; 42
     5d2:	69 f0       	breq	.+26     	; 0x5ee <_Z10Calculatorv+0xc4>
     5d4:	1f 32       	cpi	r17, 0x2F	; 47
     5d6:	59 f0       	breq	.+22     	; 0x5ee <_Z10Calculatorv+0xc4>
     5d8:	13 34       	cpi	r17, 0x43	; 67
     5da:	11 f4       	brne	.+4      	; 0x5e0 <_Z10Calculatorv+0xb6>
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <_Z10Calculatorv+0xc4>

	// Get first number
	while (1) {
		key = Keypad_Read();
		if (key && (key >= '0' && key <= '9') && i < 5) {
			num1[i++] = key;
     5de:	76 01       	movw	r14, r12
     5e0:	af e3       	ldi	r26, 0x3F	; 63
     5e2:	bc e9       	ldi	r27, 0x9C	; 156
     5e4:	11 97       	sbiw	r26, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <_Z10Calculatorv+0xba>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <_Z10Calculatorv+0xc0>
     5ea:	00 00       	nop
     5ec:	c9 cf       	rjmp	.-110    	; 0x580 <_Z10Calculatorv+0x56>
			} else if (key == '+' || key == '-' || key == '*' || key == '/' || key == 'C') {
			break;
		}
		_delay_ms(10);
	}
	num1[i] = '\0';
     5ee:	e1 e0       	ldi	r30, 0x01	; 1
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	ec 0f       	add	r30, r28
     5f4:	fd 1f       	adc	r31, r29
     5f6:	ee 0d       	add	r30, r14
     5f8:	ff 1d       	adc	r31, r15
     5fa:	10 82       	st	Z, r1

	if (key == 'C') { // Reset
     5fc:	13 34       	cpi	r17, 0x43	; 67
     5fe:	81 f4       	brne	.+32     	; 0x620 <_Z10Calculatorv+0xf6>
		LCD_Clear();
     600:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z9LCD_Clearv>
		LCD_String("Calculator Ready");
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 91 01 	call	0x322	; 0x322 <_Z10LCD_StringPKc>
     60c:	bf ef       	ldi	r27, 0xFF	; 255
     60e:	23 ed       	ldi	r18, 0xD3	; 211
     610:	80 e3       	ldi	r24, 0x30	; 48
     612:	b1 50       	subi	r27, 0x01	; 1
     614:	20 40       	sbci	r18, 0x00	; 0
     616:	80 40       	sbci	r24, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <_Z10Calculatorv+0xe8>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <_Z10Calculatorv+0xf2>
     61c:	00 00       	nop
     61e:	e5 c0       	rjmp	.+458    	; 0x7ea <_Z10Calculatorv+0x2c0>
		return;
	}

	// Store operator
	op = key;
	LCD_Data(op);
     620:	81 2f       	mov	r24, r17
     622:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z8LCD_Datah>
	return 0;             // No key pressed
}

void Calculator(void) {
	char key, num1[6] = {0}, num2[6] = {0}, op = 0;
	int i = 0, j = 0;
     626:	e1 2c       	mov	r14, r1
     628:	f1 2c       	mov	r15, r1
	op = key;
	LCD_Data(op);

	// Get second number
	while (1) {
		key = Keypad_Read();
     62a:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11Keypad_Readv>
		if (key && (key >= '0' && key <= '9') && j < 5) {
     62e:	90 ed       	ldi	r25, 0xD0	; 208
     630:	98 0f       	add	r25, r24
     632:	9a 30       	cpi	r25, 0x0A	; 10
     634:	e0 f4       	brcc	.+56     	; 0x66e <_Z10Calculatorv+0x144>
     636:	95 e0       	ldi	r25, 0x05	; 5
     638:	e9 16       	cp	r14, r25
     63a:	f1 04       	cpc	r15, r1
     63c:	c4 f4       	brge	.+48     	; 0x66e <_Z10Calculatorv+0x144>
			num2[j++] = key;
     63e:	67 01       	movw	r12, r14
     640:	af ef       	ldi	r26, 0xFF	; 255
     642:	ca 1a       	sub	r12, r26
     644:	da 0a       	sbc	r13, r26
     646:	e7 e0       	ldi	r30, 0x07	; 7
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ec 0f       	add	r30, r28
     64c:	fd 1f       	adc	r31, r29
     64e:	ee 0d       	add	r30, r14
     650:	ff 1d       	adc	r31, r15
     652:	80 83       	st	Z, r24
			LCD_Data(key);
     654:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z8LCD_Datah>
			while (Keypad_Read()) _delay_ms(10); // Debounce
     658:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11Keypad_Readv>
     65c:	88 23       	and	r24, r24
     65e:	d9 f0       	breq	.+54     	; 0x696 <_Z10Calculatorv+0x16c>
     660:	8f e3       	ldi	r24, 0x3F	; 63
     662:	9c e9       	ldi	r25, 0x9C	; 156
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <_Z10Calculatorv+0x13a>
     668:	00 c0       	rjmp	.+0      	; 0x66a <_Z10Calculatorv+0x140>
     66a:	00 00       	nop
     66c:	f5 cf       	rjmp	.-22     	; 0x658 <_Z10Calculatorv+0x12e>
			} else if (key == '=') {
     66e:	8d 33       	cpi	r24, 0x3D	; 61
     670:	d1 f0       	breq	.+52     	; 0x6a6 <_Z10Calculatorv+0x17c>
			break;
			} else if (key == 'C') {
     672:	83 34       	cpi	r24, 0x43	; 67
     674:	89 f4       	brne	.+34     	; 0x698 <_Z10Calculatorv+0x16e>
			LCD_Clear();
     676:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z9LCD_Clearv>
			LCD_String("Calculator Ready");
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 91 01 	call	0x322	; 0x322 <_Z10LCD_StringPKc>
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	a3 ed       	ldi	r26, 0xD3	; 211
     686:	b0 e3       	ldi	r27, 0x30	; 48
     688:	91 50       	subi	r25, 0x01	; 1
     68a:	a0 40       	sbci	r26, 0x00	; 0
     68c:	b0 40       	sbci	r27, 0x00	; 0
     68e:	e1 f7       	brne	.-8      	; 0x688 <_Z10Calculatorv+0x15e>
     690:	00 c0       	rjmp	.+0      	; 0x692 <_Z10Calculatorv+0x168>
     692:	00 00       	nop
     694:	aa c0       	rjmp	.+340    	; 0x7ea <_Z10Calculatorv+0x2c0>

	// Get second number
	while (1) {
		key = Keypad_Read();
		if (key && (key >= '0' && key <= '9') && j < 5) {
			num2[j++] = key;
     696:	76 01       	movw	r14, r12
     698:	8f e3       	ldi	r24, 0x3F	; 63
     69a:	9c e9       	ldi	r25, 0x9C	; 156
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <_Z10Calculatorv+0x172>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <_Z10Calculatorv+0x178>
     6a2:	00 00       	nop
     6a4:	c2 cf       	rjmp	.-124    	; 0x62a <_Z10Calculatorv+0x100>
			_delay_ms(1000);
			return;
		}
		_delay_ms(10);
	}
	num2[j] = '\0';
     6a6:	e7 e0       	ldi	r30, 0x07	; 7
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	ee 0d       	add	r30, r14
     6b0:	ff 1d       	adc	r31, r15
     6b2:	10 82       	st	Z, r1

	// Calculate result
	long n1 = atol(num1);
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	0e 94 73 05 	call	0xae6	; 0xae6 <atol>
     6bc:	4b 01       	movw	r8, r22
     6be:	5c 01       	movw	r10, r24
	long n2 = atol(num2);
     6c0:	ce 01       	movw	r24, r28
     6c2:	07 96       	adiw	r24, 0x07	; 7
     6c4:	0e 94 73 05 	call	0xae6	; 0xae6 <atol>
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
	LCD_Data('=');
     6cc:	8d e3       	ldi	r24, 0x3D	; 61
     6ce:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z8LCD_Datah>

	switch (op) {
     6d2:	1b 32       	cpi	r17, 0x2B	; 43
     6d4:	49 f0       	breq	.+18     	; 0x6e8 <_Z10Calculatorv+0x1be>
     6d6:	18 f4       	brcc	.+6      	; 0x6de <_Z10Calculatorv+0x1b4>
     6d8:	1a 32       	cpi	r17, 0x2A	; 42
     6da:	01 f1       	breq	.+64     	; 0x71c <_Z10Calculatorv+0x1f2>
     6dc:	53 c0       	rjmp	.+166    	; 0x784 <_Z10Calculatorv+0x25a>
     6de:	1d 32       	cpi	r17, 0x2D	; 45
     6e0:	81 f0       	breq	.+32     	; 0x702 <_Z10Calculatorv+0x1d8>
     6e2:	1f 32       	cpi	r17, 0x2F	; 47
     6e4:	41 f1       	breq	.+80     	; 0x736 <_Z10Calculatorv+0x20c>
     6e6:	4e c0       	rjmp	.+156    	; 0x784 <_Z10Calculatorv+0x25a>
		case '+':
		result = n1 + n2;
     6e8:	c5 01       	movw	r24, r10
     6ea:	b4 01       	movw	r22, r8
     6ec:	6c 0d       	add	r22, r12
     6ee:	7d 1d       	adc	r23, r13
     6f0:	8e 1d       	adc	r24, r14
     6f2:	9f 1d       	adc	r25, r15
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     6f4:	2a e0       	ldi	r18, 0x0A	; 10
     6f6:	ae 01       	movw	r20, r28
     6f8:	43 5f       	subi	r20, 0xF3	; 243
     6fa:	5f 4f       	sbci	r21, 0xFF	; 255
     6fc:	0e 94 9a 05 	call	0xb34	; 0xb34 <__ltoa_ncheck>
     700:	4a c0       	rjmp	.+148    	; 0x796 <_Z10Calculatorv+0x26c>
		ltoa(result, result_str, 10);
		break;
		case '-':
		result = n1 - n2;
     702:	c5 01       	movw	r24, r10
     704:	b4 01       	movw	r22, r8
     706:	6c 19       	sub	r22, r12
     708:	7d 09       	sbc	r23, r13
     70a:	8e 09       	sbc	r24, r14
     70c:	9f 09       	sbc	r25, r15
     70e:	2a e0       	ldi	r18, 0x0A	; 10
     710:	ae 01       	movw	r20, r28
     712:	43 5f       	subi	r20, 0xF3	; 243
     714:	5f 4f       	sbci	r21, 0xFF	; 255
     716:	0e 94 9a 05 	call	0xb34	; 0xb34 <__ltoa_ncheck>
     71a:	3d c0       	rjmp	.+122    	; 0x796 <_Z10Calculatorv+0x26c>
		ltoa(result, result_str, 10);
		break;
		case '*':
		result = n1 * n2;
     71c:	a5 01       	movw	r20, r10
     71e:	94 01       	movw	r18, r8
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 29 05 	call	0xa52	; 0xa52 <__mulsi3>
     728:	2a e0       	ldi	r18, 0x0A	; 10
     72a:	ae 01       	movw	r20, r28
     72c:	43 5f       	subi	r20, 0xF3	; 243
     72e:	5f 4f       	sbci	r21, 0xFF	; 255
     730:	0e 94 9a 05 	call	0xb34	; 0xb34 <__ltoa_ncheck>
     734:	30 c0       	rjmp	.+96     	; 0x796 <_Z10Calculatorv+0x26c>
		ltoa(result, result_str, 10);
		break;
		case '/':
		if (n2 != 0) {
     736:	c1 14       	cp	r12, r1
     738:	d1 04       	cpc	r13, r1
     73a:	e1 04       	cpc	r14, r1
     73c:	f1 04       	cpc	r15, r1
     73e:	c1 f0       	breq	.+48     	; 0x770 <_Z10Calculatorv+0x246>
			result_float = (float)n1 / n2;
     740:	c5 01       	movw	r24, r10
     742:	b4 01       	movw	r22, r8
     744:	0e 94 9d 04 	call	0x93a	; 0x93a <__floatsisf>
     748:	4b 01       	movw	r8, r22
     74a:	5c 01       	movw	r10, r24
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	0e 94 9d 04 	call	0x93a	; 0x93a <__floatsisf>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c5 01       	movw	r24, r10
     75a:	b4 01       	movw	r22, r8
     75c:	0e 94 29 04 	call	0x852	; 0x852 <__divsf3>
			dtostrf(result_float, 6, 2, result_str); // 6 chars, 2 decimals
     760:	8e 01       	movw	r16, r28
     762:	03 5f       	subi	r16, 0xF3	; 243
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	22 e0       	ldi	r18, 0x02	; 2
     768:	46 e0       	ldi	r20, 0x06	; 6
     76a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <dtostrf>
     76e:	13 c0       	rjmp	.+38     	; 0x796 <_Z10Calculatorv+0x26c>
			} else {
			strcpy(result_str, "Error: Div by 0");
     770:	80 e1       	ldi	r24, 0x10	; 16
     772:	e3 e2       	ldi	r30, 0x23	; 35
     774:	f1 e0       	ldi	r31, 0x01	; 1
     776:	de 01       	movw	r26, r28
     778:	1d 96       	adiw	r26, 0x0d	; 13
     77a:	01 90       	ld	r0, Z+
     77c:	0d 92       	st	X+, r0
     77e:	8a 95       	dec	r24
     780:	e1 f7       	brne	.-8      	; 0x77a <_Z10Calculatorv+0x250>
     782:	09 c0       	rjmp	.+18     	; 0x796 <_Z10Calculatorv+0x26c>
		}
		break;
		default:
		strcpy(result_str, "Error: Invalid Op");
     784:	82 e1       	ldi	r24, 0x12	; 18
     786:	e1 e1       	ldi	r30, 0x11	; 17
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	de 01       	movw	r26, r28
     78c:	1d 96       	adiw	r26, 0x0d	; 13
     78e:	01 90       	ld	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	8a 95       	dec	r24
     794:	e1 f7       	brne	.-8      	; 0x78e <_Z10Calculatorv+0x264>
		break;
	}

	// Display result and wait for 'C'
	LCD_String(result_str);
     796:	ce 01       	movw	r24, r28
     798:	0d 96       	adiw	r24, 0x0d	; 13
     79a:	0e 94 91 01 	call	0x322	; 0x322 <_Z10LCD_StringPKc>

	// Wait until 'C' is pressed to clear and reset
	while (1) {
		key = Keypad_Read();
     79e:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11Keypad_Readv>
		if (key == 'C') {
     7a2:	83 34       	cpi	r24, 0x43	; 67
     7a4:	d9 f4       	brne	.+54     	; 0x7dc <_Z10Calculatorv+0x2b2>
			while (Keypad_Read()) _delay_ms(10); // Debounce
     7a6:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11Keypad_Readv>
     7aa:	88 23       	and	r24, r24
     7ac:	39 f0       	breq	.+14     	; 0x7bc <_Z10Calculatorv+0x292>
     7ae:	af e3       	ldi	r26, 0x3F	; 63
     7b0:	bc e9       	ldi	r27, 0x9C	; 156
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <_Z10Calculatorv+0x288>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <_Z10Calculatorv+0x28e>
     7b8:	00 00       	nop
     7ba:	f5 cf       	rjmp	.-22     	; 0x7a6 <_Z10Calculatorv+0x27c>
			LCD_Clear();
     7bc:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z9LCD_Clearv>
			LCD_String("Calculator Ready");
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 91 01 	call	0x322	; 0x322 <_Z10LCD_StringPKc>
     7c8:	bf ef       	ldi	r27, 0xFF	; 255
     7ca:	23 ed       	ldi	r18, 0xD3	; 211
     7cc:	80 e3       	ldi	r24, 0x30	; 48
     7ce:	b1 50       	subi	r27, 0x01	; 1
     7d0:	20 40       	sbci	r18, 0x00	; 0
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <_Z10Calculatorv+0x2a4>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <_Z10Calculatorv+0x2ae>
     7d8:	00 00       	nop
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <_Z10Calculatorv+0x2c0>
     7dc:	af e3       	ldi	r26, 0x3F	; 63
     7de:	bc e9       	ldi	r27, 0x9C	; 156
     7e0:	11 97       	sbiw	r26, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <_Z10Calculatorv+0x2b6>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <_Z10Calculatorv+0x2bc>
     7e6:	00 00       	nop
     7e8:	da cf       	rjmp	.-76     	; 0x79e <_Z10Calculatorv+0x274>
			_delay_ms(1000);
			break;
		}
		_delay_ms(10);
	}
     7ea:	6c 96       	adiw	r28, 0x1c	; 28
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	9f 90       	pop	r9
     80c:	8f 90       	pop	r8
     80e:	08 95       	ret

00000810 <main>:
char Keypad_Read(void);
void Calculator(void);

int main(void) {
	// Configure LCD pins as outputs
	DDRB |= (1 << LCD_RS) | (1 << LCD_RW) | (1 << LCD_EN);
     810:	84 b1       	in	r24, 0x04	; 4
     812:	87 60       	ori	r24, 0x07	; 7
     814:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7);
     816:	87 b1       	in	r24, 0x07	; 7
     818:	8f 60       	ori	r24, 0x0F	; 15
     81a:	87 b9       	out	0x07, r24	; 7
	
	// Configure Keypad: Rows as inputs, Columns as outputs
	DDRD &= ~((1 << ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4)); // Inputs
     81c:	8a b1       	in	r24, 0x0a	; 10
     81e:	80 7f       	andi	r24, 0xF0	; 240
     820:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);    // Outputs
     822:	8a b1       	in	r24, 0x0a	; 10
     824:	80 6f       	ori	r24, 0xF0	; 240
     826:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4);   // Enable pull-ups on rows
     828:	8b b1       	in	r24, 0x0b	; 11
     82a:	8f 60       	ori	r24, 0x0F	; 15
     82c:	8b b9       	out	0x0b, r24	; 11

	LCD_Init();
     82e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z8LCD_Initv>
	LCD_String("Calculator Ready");
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 91 01 	call	0x322	; 0x322 <_Z10LCD_StringPKc>
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	80 e7       	ldi	r24, 0x70	; 112
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <main+0x30>
     848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x3a>
     84a:	00 00       	nop
	_delay_ms(50);

	while (1) {
		Calculator();
     84c:	0e 94 95 02 	call	0x52a	; 0x52a <_Z10Calculatorv>
     850:	fd cf       	rjmp	.-6      	; 0x84c <main+0x3c>

00000852 <__divsf3>:
     852:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3x>
     856:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
     85a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
     85e:	58 f0       	brcs	.+22     	; 0x876 <__divsf3+0x24>
     860:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
     864:	40 f0       	brcs	.+16     	; 0x876 <__divsf3+0x24>
     866:	29 f4       	brne	.+10     	; 0x872 <__divsf3+0x20>
     868:	5f 3f       	cpi	r21, 0xFF	; 255
     86a:	29 f0       	breq	.+10     	; 0x876 <__divsf3+0x24>
     86c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
     870:	51 11       	cpse	r21, r1
     872:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
     876:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>

0000087a <__divsf3x>:
     87a:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
     87e:	68 f3       	brcs	.-38     	; 0x85a <__divsf3+0x8>

00000880 <__divsf3_pse>:
     880:	99 23       	and	r25, r25
     882:	b1 f3       	breq	.-20     	; 0x870 <__divsf3+0x1e>
     884:	55 23       	and	r21, r21
     886:	91 f3       	breq	.-28     	; 0x86c <__divsf3+0x1a>
     888:	95 1b       	sub	r25, r21
     88a:	55 0b       	sbc	r21, r21
     88c:	bb 27       	eor	r27, r27
     88e:	aa 27       	eor	r26, r26
     890:	62 17       	cp	r22, r18
     892:	73 07       	cpc	r23, r19
     894:	84 07       	cpc	r24, r20
     896:	38 f0       	brcs	.+14     	; 0x8a6 <__divsf3_pse+0x26>
     898:	9f 5f       	subi	r25, 0xFF	; 255
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
     89c:	22 0f       	add	r18, r18
     89e:	33 1f       	adc	r19, r19
     8a0:	44 1f       	adc	r20, r20
     8a2:	aa 1f       	adc	r26, r26
     8a4:	a9 f3       	breq	.-22     	; 0x890 <__divsf3_pse+0x10>
     8a6:	35 d0       	rcall	.+106    	; 0x912 <__stack+0x13>
     8a8:	0e 2e       	mov	r0, r30
     8aa:	3a f0       	brmi	.+14     	; 0x8ba <__divsf3_pse+0x3a>
     8ac:	e0 e8       	ldi	r30, 0x80	; 128
     8ae:	32 d0       	rcall	.+100    	; 0x914 <__stack+0x15>
     8b0:	91 50       	subi	r25, 0x01	; 1
     8b2:	50 40       	sbci	r21, 0x00	; 0
     8b4:	e6 95       	lsr	r30
     8b6:	00 1c       	adc	r0, r0
     8b8:	ca f7       	brpl	.-14     	; 0x8ac <__divsf3_pse+0x2c>
     8ba:	2b d0       	rcall	.+86     	; 0x912 <__stack+0x13>
     8bc:	fe 2f       	mov	r31, r30
     8be:	29 d0       	rcall	.+82     	; 0x912 <__stack+0x13>
     8c0:	66 0f       	add	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	88 1f       	adc	r24, r24
     8c6:	bb 1f       	adc	r27, r27
     8c8:	26 17       	cp	r18, r22
     8ca:	37 07       	cpc	r19, r23
     8cc:	48 07       	cpc	r20, r24
     8ce:	ab 07       	cpc	r26, r27
     8d0:	b0 e8       	ldi	r27, 0x80	; 128
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <__divsf3_pse+0x56>
     8d4:	bb 0b       	sbc	r27, r27
     8d6:	80 2d       	mov	r24, r0
     8d8:	bf 01       	movw	r22, r30
     8da:	ff 27       	eor	r31, r31
     8dc:	93 58       	subi	r25, 0x83	; 131
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	3a f0       	brmi	.+14     	; 0x8f0 <__divsf3_pse+0x70>
     8e2:	9e 3f       	cpi	r25, 0xFE	; 254
     8e4:	51 05       	cpc	r21, r1
     8e6:	78 f0       	brcs	.+30     	; 0x906 <__stack+0x7>
     8e8:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
     8ec:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
     8f0:	5f 3f       	cpi	r21, 0xFF	; 255
     8f2:	e4 f3       	brlt	.-8      	; 0x8ec <__divsf3_pse+0x6c>
     8f4:	98 3e       	cpi	r25, 0xE8	; 232
     8f6:	d4 f3       	brlt	.-12     	; 0x8ec <__divsf3_pse+0x6c>
     8f8:	86 95       	lsr	r24
     8fa:	77 95       	ror	r23
     8fc:	67 95       	ror	r22
     8fe:	b7 95       	ror	r27
     900:	f7 95       	ror	r31
     902:	9f 5f       	subi	r25, 0xFF	; 255
     904:	c9 f7       	brne	.-14     	; 0x8f8 <__divsf3_pse+0x78>
     906:	88 0f       	add	r24, r24
     908:	91 1d       	adc	r25, r1
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	97 f9       	bld	r25, 7
     910:	08 95       	ret
     912:	e1 e0       	ldi	r30, 0x01	; 1
     914:	66 0f       	add	r22, r22
     916:	77 1f       	adc	r23, r23
     918:	88 1f       	adc	r24, r24
     91a:	bb 1f       	adc	r27, r27
     91c:	62 17       	cp	r22, r18
     91e:	73 07       	cpc	r23, r19
     920:	84 07       	cpc	r24, r20
     922:	ba 07       	cpc	r27, r26
     924:	20 f0       	brcs	.+8      	; 0x92e <__stack+0x2f>
     926:	62 1b       	sub	r22, r18
     928:	73 0b       	sbc	r23, r19
     92a:	84 0b       	sbc	r24, r20
     92c:	ba 0b       	sbc	r27, r26
     92e:	ee 1f       	adc	r30, r30
     930:	88 f7       	brcc	.-30     	; 0x914 <__stack+0x15>
     932:	e0 95       	com	r30
     934:	08 95       	ret

00000936 <__floatunsisf>:
     936:	e8 94       	clt
     938:	09 c0       	rjmp	.+18     	; 0x94c <__floatsisf+0x12>

0000093a <__floatsisf>:
     93a:	97 fb       	bst	r25, 7
     93c:	3e f4       	brtc	.+14     	; 0x94c <__floatsisf+0x12>
     93e:	90 95       	com	r25
     940:	80 95       	com	r24
     942:	70 95       	com	r23
     944:	61 95       	neg	r22
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	8f 4f       	sbci	r24, 0xFF	; 255
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	99 23       	and	r25, r25
     94e:	a9 f0       	breq	.+42     	; 0x97a <__floatsisf+0x40>
     950:	f9 2f       	mov	r31, r25
     952:	96 e9       	ldi	r25, 0x96	; 150
     954:	bb 27       	eor	r27, r27
     956:	93 95       	inc	r25
     958:	f6 95       	lsr	r31
     95a:	87 95       	ror	r24
     95c:	77 95       	ror	r23
     95e:	67 95       	ror	r22
     960:	b7 95       	ror	r27
     962:	f1 11       	cpse	r31, r1
     964:	f8 cf       	rjmp	.-16     	; 0x956 <__floatsisf+0x1c>
     966:	fa f4       	brpl	.+62     	; 0x9a6 <__floatsisf+0x6c>
     968:	bb 0f       	add	r27, r27
     96a:	11 f4       	brne	.+4      	; 0x970 <__floatsisf+0x36>
     96c:	60 ff       	sbrs	r22, 0
     96e:	1b c0       	rjmp	.+54     	; 0x9a6 <__floatsisf+0x6c>
     970:	6f 5f       	subi	r22, 0xFF	; 255
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	8f 4f       	sbci	r24, 0xFF	; 255
     976:	9f 4f       	sbci	r25, 0xFF	; 255
     978:	16 c0       	rjmp	.+44     	; 0x9a6 <__floatsisf+0x6c>
     97a:	88 23       	and	r24, r24
     97c:	11 f0       	breq	.+4      	; 0x982 <__floatsisf+0x48>
     97e:	96 e9       	ldi	r25, 0x96	; 150
     980:	11 c0       	rjmp	.+34     	; 0x9a4 <__floatsisf+0x6a>
     982:	77 23       	and	r23, r23
     984:	21 f0       	breq	.+8      	; 0x98e <__floatsisf+0x54>
     986:	9e e8       	ldi	r25, 0x8E	; 142
     988:	87 2f       	mov	r24, r23
     98a:	76 2f       	mov	r23, r22
     98c:	05 c0       	rjmp	.+10     	; 0x998 <__floatsisf+0x5e>
     98e:	66 23       	and	r22, r22
     990:	71 f0       	breq	.+28     	; 0x9ae <__floatsisf+0x74>
     992:	96 e8       	ldi	r25, 0x86	; 134
     994:	86 2f       	mov	r24, r22
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	2a f0       	brmi	.+10     	; 0x9a6 <__floatsisf+0x6c>
     99c:	9a 95       	dec	r25
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	88 1f       	adc	r24, r24
     9a4:	da f7       	brpl	.-10     	; 0x99c <__floatsisf+0x62>
     9a6:	88 0f       	add	r24, r24
     9a8:	96 95       	lsr	r25
     9aa:	87 95       	ror	r24
     9ac:	97 f9       	bld	r25, 7
     9ae:	08 95       	ret

000009b0 <__fp_inf>:
     9b0:	97 f9       	bld	r25, 7
     9b2:	9f 67       	ori	r25, 0x7F	; 127
     9b4:	80 e8       	ldi	r24, 0x80	; 128
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	08 95       	ret

000009bc <__fp_nan>:
     9bc:	9f ef       	ldi	r25, 0xFF	; 255
     9be:	80 ec       	ldi	r24, 0xC0	; 192
     9c0:	08 95       	ret

000009c2 <__fp_pscA>:
     9c2:	00 24       	eor	r0, r0
     9c4:	0a 94       	dec	r0
     9c6:	16 16       	cp	r1, r22
     9c8:	17 06       	cpc	r1, r23
     9ca:	18 06       	cpc	r1, r24
     9cc:	09 06       	cpc	r0, r25
     9ce:	08 95       	ret

000009d0 <__fp_pscB>:
     9d0:	00 24       	eor	r0, r0
     9d2:	0a 94       	dec	r0
     9d4:	12 16       	cp	r1, r18
     9d6:	13 06       	cpc	r1, r19
     9d8:	14 06       	cpc	r1, r20
     9da:	05 06       	cpc	r0, r21
     9dc:	08 95       	ret

000009de <__fp_round>:
     9de:	09 2e       	mov	r0, r25
     9e0:	03 94       	inc	r0
     9e2:	00 0c       	add	r0, r0
     9e4:	11 f4       	brne	.+4      	; 0x9ea <__fp_round+0xc>
     9e6:	88 23       	and	r24, r24
     9e8:	52 f0       	brmi	.+20     	; 0x9fe <__fp_round+0x20>
     9ea:	bb 0f       	add	r27, r27
     9ec:	40 f4       	brcc	.+16     	; 0x9fe <__fp_round+0x20>
     9ee:	bf 2b       	or	r27, r31
     9f0:	11 f4       	brne	.+4      	; 0x9f6 <__fp_round+0x18>
     9f2:	60 ff       	sbrs	r22, 0
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__fp_round+0x20>
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	8f 4f       	sbci	r24, 0xFF	; 255
     9fc:	9f 4f       	sbci	r25, 0xFF	; 255
     9fe:	08 95       	ret

00000a00 <__fp_split3>:
     a00:	57 fd       	sbrc	r21, 7
     a02:	90 58       	subi	r25, 0x80	; 128
     a04:	44 0f       	add	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	59 f0       	breq	.+22     	; 0xa20 <__fp_splitA+0x10>
     a0a:	5f 3f       	cpi	r21, 0xFF	; 255
     a0c:	71 f0       	breq	.+28     	; 0xa2a <__fp_splitA+0x1a>
     a0e:	47 95       	ror	r20

00000a10 <__fp_splitA>:
     a10:	88 0f       	add	r24, r24
     a12:	97 fb       	bst	r25, 7
     a14:	99 1f       	adc	r25, r25
     a16:	61 f0       	breq	.+24     	; 0xa30 <__fp_splitA+0x20>
     a18:	9f 3f       	cpi	r25, 0xFF	; 255
     a1a:	79 f0       	breq	.+30     	; 0xa3a <__fp_splitA+0x2a>
     a1c:	87 95       	ror	r24
     a1e:	08 95       	ret
     a20:	12 16       	cp	r1, r18
     a22:	13 06       	cpc	r1, r19
     a24:	14 06       	cpc	r1, r20
     a26:	55 1f       	adc	r21, r21
     a28:	f2 cf       	rjmp	.-28     	; 0xa0e <__fp_split3+0xe>
     a2a:	46 95       	lsr	r20
     a2c:	f1 df       	rcall	.-30     	; 0xa10 <__fp_splitA>
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__fp_splitA+0x30>
     a30:	16 16       	cp	r1, r22
     a32:	17 06       	cpc	r1, r23
     a34:	18 06       	cpc	r1, r24
     a36:	99 1f       	adc	r25, r25
     a38:	f1 cf       	rjmp	.-30     	; 0xa1c <__fp_splitA+0xc>
     a3a:	86 95       	lsr	r24
     a3c:	71 05       	cpc	r23, r1
     a3e:	61 05       	cpc	r22, r1
     a40:	08 94       	sec
     a42:	08 95       	ret

00000a44 <__fp_zero>:
     a44:	e8 94       	clt

00000a46 <__fp_szero>:
     a46:	bb 27       	eor	r27, r27
     a48:	66 27       	eor	r22, r22
     a4a:	77 27       	eor	r23, r23
     a4c:	cb 01       	movw	r24, r22
     a4e:	97 f9       	bld	r25, 7
     a50:	08 95       	ret

00000a52 <__mulsi3>:
     a52:	db 01       	movw	r26, r22
     a54:	8f 93       	push	r24
     a56:	9f 93       	push	r25
     a58:	0e 94 39 05 	call	0xa72	; 0xa72 <__muluhisi3>
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	a2 9f       	mul	r26, r18
     a62:	80 0d       	add	r24, r0
     a64:	91 1d       	adc	r25, r1
     a66:	a3 9f       	mul	r26, r19
     a68:	90 0d       	add	r25, r0
     a6a:	b2 9f       	mul	r27, r18
     a6c:	90 0d       	add	r25, r0
     a6e:	11 24       	eor	r1, r1
     a70:	08 95       	ret

00000a72 <__muluhisi3>:
     a72:	0e 94 44 05 	call	0xa88	; 0xa88 <__umulhisi3>
     a76:	a5 9f       	mul	r26, r21
     a78:	90 0d       	add	r25, r0
     a7a:	b4 9f       	mul	r27, r20
     a7c:	90 0d       	add	r25, r0
     a7e:	a4 9f       	mul	r26, r20
     a80:	80 0d       	add	r24, r0
     a82:	91 1d       	adc	r25, r1
     a84:	11 24       	eor	r1, r1
     a86:	08 95       	ret

00000a88 <__umulhisi3>:
     a88:	a2 9f       	mul	r26, r18
     a8a:	b0 01       	movw	r22, r0
     a8c:	b3 9f       	mul	r27, r19
     a8e:	c0 01       	movw	r24, r0
     a90:	a3 9f       	mul	r26, r19
     a92:	70 0d       	add	r23, r0
     a94:	81 1d       	adc	r24, r1
     a96:	11 24       	eor	r1, r1
     a98:	91 1d       	adc	r25, r1
     a9a:	b2 9f       	mul	r27, r18
     a9c:	70 0d       	add	r23, r0
     a9e:	81 1d       	adc	r24, r1
     aa0:	11 24       	eor	r1, r1
     aa2:	91 1d       	adc	r25, r1
     aa4:	08 95       	ret

00000aa6 <dtostrf>:
     aa6:	ef 92       	push	r14
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	e8 01       	movw	r28, r16
     ab2:	47 fd       	sbrc	r20, 7
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <dtostrf+0x14>
     ab6:	34 e0       	ldi	r19, 0x04	; 4
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <dtostrf+0x16>
     aba:	34 e1       	ldi	r19, 0x14	; 20
     abc:	04 2e       	mov	r0, r20
     abe:	00 0c       	add	r0, r0
     ac0:	55 0b       	sbc	r21, r21
     ac2:	57 ff       	sbrs	r21, 7
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <dtostrf+0x26>
     ac6:	51 95       	neg	r21
     ac8:	41 95       	neg	r20
     aca:	51 09       	sbc	r21, r1
     acc:	e3 2e       	mov	r14, r19
     ace:	02 2f       	mov	r16, r18
     ad0:	24 2f       	mov	r18, r20
     ad2:	ae 01       	movw	r20, r28
     ad4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <dtoa_prf>
     ad8:	ce 01       	movw	r24, r28
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ef 90       	pop	r14
     ae4:	08 95       	ret

00000ae6 <atol>:
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	99 27       	eor	r25, r25
     aec:	88 27       	eor	r24, r24
     aee:	bc 01       	movw	r22, r24
     af0:	e8 94       	clt
     af2:	11 91       	ld	r17, Z+
     af4:	10 32       	cpi	r17, 0x20	; 32
     af6:	e9 f3       	breq	.-6      	; 0xaf2 <atol+0xc>
     af8:	19 30       	cpi	r17, 0x09	; 9
     afa:	10 f0       	brcs	.+4      	; 0xb00 <atol+0x1a>
     afc:	1e 30       	cpi	r17, 0x0E	; 14
     afe:	c8 f3       	brcs	.-14     	; 0xaf2 <atol+0xc>
     b00:	1b 32       	cpi	r17, 0x2B	; 43
     b02:	51 f0       	breq	.+20     	; 0xb18 <atol+0x32>
     b04:	1d 32       	cpi	r17, 0x2D	; 45
     b06:	49 f4       	brne	.+18     	; 0xb1a <atol+0x34>
     b08:	68 94       	set
     b0a:	06 c0       	rjmp	.+12     	; 0xb18 <atol+0x32>
     b0c:	0e 94 a9 05 	call	0xb52	; 0xb52 <__mulsi_const_10>
     b10:	61 0f       	add	r22, r17
     b12:	71 1d       	adc	r23, r1
     b14:	81 1d       	adc	r24, r1
     b16:	91 1d       	adc	r25, r1
     b18:	11 91       	ld	r17, Z+
     b1a:	10 53       	subi	r17, 0x30	; 48
     b1c:	1a 30       	cpi	r17, 0x0A	; 10
     b1e:	b0 f3       	brcs	.-20     	; 0xb0c <atol+0x26>
     b20:	3e f4       	brtc	.+14     	; 0xb30 <atol+0x4a>
     b22:	90 95       	com	r25
     b24:	80 95       	com	r24
     b26:	70 95       	com	r23
     b28:	61 95       	neg	r22
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	1f 91       	pop	r17
     b32:	08 95       	ret

00000b34 <__ltoa_ncheck>:
     b34:	bb 27       	eor	r27, r27
     b36:	2a 30       	cpi	r18, 0x0A	; 10
     b38:	51 f4       	brne	.+20     	; 0xb4e <__ltoa_ncheck+0x1a>
     b3a:	99 23       	and	r25, r25
     b3c:	42 f4       	brpl	.+16     	; 0xb4e <__ltoa_ncheck+0x1a>
     b3e:	bd e2       	ldi	r27, 0x2D	; 45
     b40:	90 95       	com	r25
     b42:	80 95       	com	r24
     b44:	70 95       	com	r23
     b46:	61 95       	neg	r22
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	8f 4f       	sbci	r24, 0xFF	; 255
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__ultoa_common>

00000b52 <__mulsi_const_10>:
     b52:	59 2f       	mov	r21, r25
     b54:	48 2f       	mov	r20, r24
     b56:	37 2f       	mov	r19, r23
     b58:	26 2f       	mov	r18, r22
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	88 1f       	adc	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	88 1f       	adc	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	62 0f       	add	r22, r18
     b6c:	73 1f       	adc	r23, r19
     b6e:	84 1f       	adc	r24, r20
     b70:	95 1f       	adc	r25, r21
     b72:	66 0f       	add	r22, r22
     b74:	77 1f       	adc	r23, r23
     b76:	88 1f       	adc	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	08 95       	ret

00000b7c <__ultoa_ncheck>:
     b7c:	bb 27       	eor	r27, r27

00000b7e <__ultoa_common>:
     b7e:	fa 01       	movw	r30, r20
     b80:	a6 2f       	mov	r26, r22
     b82:	62 17       	cp	r22, r18
     b84:	71 05       	cpc	r23, r1
     b86:	81 05       	cpc	r24, r1
     b88:	91 05       	cpc	r25, r1
     b8a:	33 0b       	sbc	r19, r19
     b8c:	30 fb       	bst	r19, 0
     b8e:	66 f0       	brts	.+24     	; 0xba8 <__ultoa_common+0x2a>
     b90:	aa 27       	eor	r26, r26
     b92:	66 0f       	add	r22, r22
     b94:	77 1f       	adc	r23, r23
     b96:	88 1f       	adc	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	aa 1f       	adc	r26, r26
     b9c:	a2 17       	cp	r26, r18
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <__ultoa_common+0x26>
     ba0:	a2 1b       	sub	r26, r18
     ba2:	63 95       	inc	r22
     ba4:	38 50       	subi	r19, 0x08	; 8
     ba6:	a9 f7       	brne	.-22     	; 0xb92 <__ultoa_common+0x14>
     ba8:	a0 5d       	subi	r26, 0xD0	; 208
     baa:	aa 33       	cpi	r26, 0x3A	; 58
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <__ultoa_common+0x32>
     bae:	a9 5d       	subi	r26, 0xD9	; 217
     bb0:	a1 93       	st	Z+, r26
     bb2:	36 f7       	brtc	.-52     	; 0xb80 <__ultoa_common+0x2>
     bb4:	b1 11       	cpse	r27, r1
     bb6:	b1 93       	st	Z+, r27
     bb8:	10 82       	st	Z, r1
     bba:	ca 01       	movw	r24, r20
     bbc:	0c 94 12 08 	jmp	0x1024	; 0x1024 <strrev>

00000bc0 <dtoa_prf>:
     bc0:	a9 e0       	ldi	r26, 0x09	; 9
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 ee       	ldi	r30, 0xE6	; 230
     bc6:	f5 e0       	ldi	r31, 0x05	; 5
     bc8:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__prologue_saves__+0xc>
     bcc:	6a 01       	movw	r12, r20
     bce:	12 2f       	mov	r17, r18
     bd0:	b0 2e       	mov	r11, r16
     bd2:	2b e3       	ldi	r18, 0x3B	; 59
     bd4:	20 17       	cp	r18, r16
     bd6:	20 f0       	brcs	.+8      	; 0xbe0 <dtoa_prf+0x20>
     bd8:	ff 24       	eor	r15, r15
     bda:	f3 94       	inc	r15
     bdc:	f0 0e       	add	r15, r16
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <dtoa_prf+0x24>
     be0:	2c e3       	ldi	r18, 0x3C	; 60
     be2:	f2 2e       	mov	r15, r18
     be4:	0f 2d       	mov	r16, r15
     be6:	27 e0       	ldi	r18, 0x07	; 7
     be8:	ae 01       	movw	r20, r28
     bea:	4f 5f       	subi	r20, 0xFF	; 255
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	0e 94 3a 07 	call	0xe74	; 0xe74 <__ftoa_engine>
     bf2:	bc 01       	movw	r22, r24
     bf4:	49 81       	ldd	r20, Y+1	; 0x01
     bf6:	84 2f       	mov	r24, r20
     bf8:	89 70       	andi	r24, 0x09	; 9
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	31 f0       	breq	.+12     	; 0xc0a <dtoa_prf+0x4a>
     bfe:	e1 fc       	sbrc	r14, 1
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <dtoa_prf+0x4e>
     c02:	e0 fe       	sbrs	r14, 0
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <dtoa_prf+0x52>
     c06:	90 e2       	ldi	r25, 0x20	; 32
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <dtoa_prf+0x54>
     c0a:	9d e2       	ldi	r25, 0x2D	; 45
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <dtoa_prf+0x54>
     c0e:	9b e2       	ldi	r25, 0x2B	; 43
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <dtoa_prf+0x54>
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	5e 2d       	mov	r21, r14
     c16:	50 71       	andi	r21, 0x10	; 16
     c18:	43 ff       	sbrs	r20, 3
     c1a:	3c c0       	rjmp	.+120    	; 0xc94 <dtoa_prf+0xd4>
     c1c:	91 11       	cpse	r25, r1
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <dtoa_prf+0x64>
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <dtoa_prf+0x66>
     c24:	84 e0       	ldi	r24, 0x04	; 4
     c26:	81 17       	cp	r24, r17
     c28:	18 f4       	brcc	.+6      	; 0xc30 <dtoa_prf+0x70>
     c2a:	21 2f       	mov	r18, r17
     c2c:	28 1b       	sub	r18, r24
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <dtoa_prf+0x72>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	51 11       	cpse	r21, r1
     c34:	0b c0       	rjmp	.+22     	; 0xc4c <dtoa_prf+0x8c>
     c36:	f6 01       	movw	r30, r12
     c38:	82 2f       	mov	r24, r18
     c3a:	30 e2       	ldi	r19, 0x20	; 32
     c3c:	88 23       	and	r24, r24
     c3e:	19 f0       	breq	.+6      	; 0xc46 <dtoa_prf+0x86>
     c40:	31 93       	st	Z+, r19
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	fb cf       	rjmp	.-10     	; 0xc3c <dtoa_prf+0x7c>
     c46:	c2 0e       	add	r12, r18
     c48:	d1 1c       	adc	r13, r1
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	99 23       	and	r25, r25
     c4e:	29 f0       	breq	.+10     	; 0xc5a <dtoa_prf+0x9a>
     c50:	d6 01       	movw	r26, r12
     c52:	9c 93       	st	X, r25
     c54:	f6 01       	movw	r30, r12
     c56:	31 96       	adiw	r30, 0x01	; 1
     c58:	6f 01       	movw	r12, r30
     c5a:	c6 01       	movw	r24, r12
     c5c:	03 96       	adiw	r24, 0x03	; 3
     c5e:	e2 fe       	sbrs	r14, 2
     c60:	0a c0       	rjmp	.+20     	; 0xc76 <dtoa_prf+0xb6>
     c62:	3e e4       	ldi	r19, 0x4E	; 78
     c64:	d6 01       	movw	r26, r12
     c66:	3c 93       	st	X, r19
     c68:	41 e4       	ldi	r20, 0x41	; 65
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	4c 93       	st	X, r20
     c6e:	11 97       	sbiw	r26, 0x01	; 1
     c70:	12 96       	adiw	r26, 0x02	; 2
     c72:	3c 93       	st	X, r19
     c74:	06 c0       	rjmp	.+12     	; 0xc82 <dtoa_prf+0xc2>
     c76:	3e e6       	ldi	r19, 0x6E	; 110
     c78:	f6 01       	movw	r30, r12
     c7a:	30 83       	st	Z, r19
     c7c:	41 e6       	ldi	r20, 0x61	; 97
     c7e:	41 83       	std	Z+1, r20	; 0x01
     c80:	32 83       	std	Z+2, r19	; 0x02
     c82:	fc 01       	movw	r30, r24
     c84:	32 2f       	mov	r19, r18
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	33 23       	and	r19, r19
     c8a:	09 f4       	brne	.+2      	; 0xc8e <dtoa_prf+0xce>
     c8c:	42 c0       	rjmp	.+132    	; 0xd12 <dtoa_prf+0x152>
     c8e:	41 93       	st	Z+, r20
     c90:	31 50       	subi	r19, 0x01	; 1
     c92:	fa cf       	rjmp	.-12     	; 0xc88 <dtoa_prf+0xc8>
     c94:	42 ff       	sbrs	r20, 2
     c96:	44 c0       	rjmp	.+136    	; 0xd20 <dtoa_prf+0x160>
     c98:	91 11       	cpse	r25, r1
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <dtoa_prf+0xe0>
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <dtoa_prf+0xe2>
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	81 17       	cp	r24, r17
     ca4:	18 f4       	brcc	.+6      	; 0xcac <dtoa_prf+0xec>
     ca6:	21 2f       	mov	r18, r17
     ca8:	28 1b       	sub	r18, r24
     caa:	01 c0       	rjmp	.+2      	; 0xcae <dtoa_prf+0xee>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	51 11       	cpse	r21, r1
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <dtoa_prf+0x108>
     cb2:	f6 01       	movw	r30, r12
     cb4:	82 2f       	mov	r24, r18
     cb6:	30 e2       	ldi	r19, 0x20	; 32
     cb8:	88 23       	and	r24, r24
     cba:	19 f0       	breq	.+6      	; 0xcc2 <dtoa_prf+0x102>
     cbc:	31 93       	st	Z+, r19
     cbe:	81 50       	subi	r24, 0x01	; 1
     cc0:	fb cf       	rjmp	.-10     	; 0xcb8 <dtoa_prf+0xf8>
     cc2:	c2 0e       	add	r12, r18
     cc4:	d1 1c       	adc	r13, r1
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	99 23       	and	r25, r25
     cca:	29 f0       	breq	.+10     	; 0xcd6 <dtoa_prf+0x116>
     ccc:	d6 01       	movw	r26, r12
     cce:	9c 93       	st	X, r25
     cd0:	f6 01       	movw	r30, r12
     cd2:	31 96       	adiw	r30, 0x01	; 1
     cd4:	6f 01       	movw	r12, r30
     cd6:	c6 01       	movw	r24, r12
     cd8:	03 96       	adiw	r24, 0x03	; 3
     cda:	e2 fe       	sbrs	r14, 2
     cdc:	0b c0       	rjmp	.+22     	; 0xcf4 <dtoa_prf+0x134>
     cde:	39 e4       	ldi	r19, 0x49	; 73
     ce0:	d6 01       	movw	r26, r12
     ce2:	3c 93       	st	X, r19
     ce4:	3e e4       	ldi	r19, 0x4E	; 78
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	3c 93       	st	X, r19
     cea:	11 97       	sbiw	r26, 0x01	; 1
     cec:	36 e4       	ldi	r19, 0x46	; 70
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	3c 93       	st	X, r19
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <dtoa_prf+0x142>
     cf4:	39 e6       	ldi	r19, 0x69	; 105
     cf6:	f6 01       	movw	r30, r12
     cf8:	30 83       	st	Z, r19
     cfa:	3e e6       	ldi	r19, 0x6E	; 110
     cfc:	31 83       	std	Z+1, r19	; 0x01
     cfe:	36 e6       	ldi	r19, 0x66	; 102
     d00:	32 83       	std	Z+2, r19	; 0x02
     d02:	fc 01       	movw	r30, r24
     d04:	32 2f       	mov	r19, r18
     d06:	40 e2       	ldi	r20, 0x20	; 32
     d08:	33 23       	and	r19, r19
     d0a:	19 f0       	breq	.+6      	; 0xd12 <dtoa_prf+0x152>
     d0c:	41 93       	st	Z+, r20
     d0e:	31 50       	subi	r19, 0x01	; 1
     d10:	fb cf       	rjmp	.-10     	; 0xd08 <dtoa_prf+0x148>
     d12:	fc 01       	movw	r30, r24
     d14:	e2 0f       	add	r30, r18
     d16:	f1 1d       	adc	r31, r1
     d18:	10 82       	st	Z, r1
     d1a:	8e ef       	ldi	r24, 0xFE	; 254
     d1c:	9f ef       	ldi	r25, 0xFF	; 255
     d1e:	a6 c0       	rjmp	.+332    	; 0xe6c <dtoa_prf+0x2ac>
     d20:	21 e0       	ldi	r18, 0x01	; 1
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	91 11       	cpse	r25, r1
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <dtoa_prf+0x16c>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	16 16       	cp	r1, r22
     d2e:	17 06       	cpc	r1, r23
     d30:	1c f4       	brge	.+6      	; 0xd38 <dtoa_prf+0x178>
     d32:	fb 01       	movw	r30, r22
     d34:	31 96       	adiw	r30, 0x01	; 1
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <dtoa_prf+0x17c>
     d38:	e1 e0       	ldi	r30, 0x01	; 1
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	2e 0f       	add	r18, r30
     d3e:	3f 1f       	adc	r19, r31
     d40:	bb 20       	and	r11, r11
     d42:	21 f0       	breq	.+8      	; 0xd4c <dtoa_prf+0x18c>
     d44:	eb 2d       	mov	r30, r11
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	31 96       	adiw	r30, 0x01	; 1
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <dtoa_prf+0x190>
     d4c:	e0 e0       	ldi	r30, 0x00	; 0
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	2e 0f       	add	r18, r30
     d52:	3f 1f       	adc	r19, r31
     d54:	e1 2f       	mov	r30, r17
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	2e 17       	cp	r18, r30
     d5a:	3f 07       	cpc	r19, r31
     d5c:	1c f4       	brge	.+6      	; 0xd64 <dtoa_prf+0x1a4>
     d5e:	12 1b       	sub	r17, r18
     d60:	21 2f       	mov	r18, r17
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <dtoa_prf+0x1a6>
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	8e 2d       	mov	r24, r14
     d68:	88 71       	andi	r24, 0x18	; 24
     d6a:	59 f4       	brne	.+22     	; 0xd82 <dtoa_prf+0x1c2>
     d6c:	f6 01       	movw	r30, r12
     d6e:	82 2f       	mov	r24, r18
     d70:	30 e2       	ldi	r19, 0x20	; 32
     d72:	88 23       	and	r24, r24
     d74:	19 f0       	breq	.+6      	; 0xd7c <dtoa_prf+0x1bc>
     d76:	31 93       	st	Z+, r19
     d78:	81 50       	subi	r24, 0x01	; 1
     d7a:	fb cf       	rjmp	.-10     	; 0xd72 <dtoa_prf+0x1b2>
     d7c:	c2 0e       	add	r12, r18
     d7e:	d1 1c       	adc	r13, r1
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	99 23       	and	r25, r25
     d84:	29 f0       	breq	.+10     	; 0xd90 <dtoa_prf+0x1d0>
     d86:	d6 01       	movw	r26, r12
     d88:	9c 93       	st	X, r25
     d8a:	f6 01       	movw	r30, r12
     d8c:	31 96       	adiw	r30, 0x01	; 1
     d8e:	6f 01       	movw	r12, r30
     d90:	51 11       	cpse	r21, r1
     d92:	0b c0       	rjmp	.+22     	; 0xdaa <dtoa_prf+0x1ea>
     d94:	f6 01       	movw	r30, r12
     d96:	82 2f       	mov	r24, r18
     d98:	90 e3       	ldi	r25, 0x30	; 48
     d9a:	88 23       	and	r24, r24
     d9c:	19 f0       	breq	.+6      	; 0xda4 <dtoa_prf+0x1e4>
     d9e:	91 93       	st	Z+, r25
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	fb cf       	rjmp	.-10     	; 0xd9a <dtoa_prf+0x1da>
     da4:	c2 0e       	add	r12, r18
     da6:	d1 1c       	adc	r13, r1
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	0f 2d       	mov	r16, r15
     dac:	06 0f       	add	r16, r22
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	34 2f       	mov	r19, r20
     db2:	30 71       	andi	r19, 0x10	; 16
     db4:	44 ff       	sbrs	r20, 4
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <dtoa_prf+0x1fe>
     db8:	91 33       	cpi	r25, 0x31	; 49
     dba:	09 f4       	brne	.+2      	; 0xdbe <dtoa_prf+0x1fe>
     dbc:	01 50       	subi	r16, 0x01	; 1
     dbe:	10 16       	cp	r1, r16
     dc0:	24 f4       	brge	.+8      	; 0xdca <dtoa_prf+0x20a>
     dc2:	09 30       	cpi	r16, 0x09	; 9
     dc4:	18 f0       	brcs	.+6      	; 0xdcc <dtoa_prf+0x20c>
     dc6:	08 e0       	ldi	r16, 0x08	; 8
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <dtoa_prf+0x20c>
     dca:	01 e0       	ldi	r16, 0x01	; 1
     dcc:	ab 01       	movw	r20, r22
     dce:	77 ff       	sbrs	r23, 7
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <dtoa_prf+0x216>
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	fb 01       	movw	r30, r22
     dd8:	e4 1b       	sub	r30, r20
     dda:	f5 0b       	sbc	r31, r21
     ddc:	a1 e0       	ldi	r26, 0x01	; 1
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ac 0f       	add	r26, r28
     de2:	bd 1f       	adc	r27, r29
     de4:	ea 0f       	add	r30, r26
     de6:	fb 1f       	adc	r31, r27
     de8:	8e e2       	ldi	r24, 0x2E	; 46
     dea:	a8 2e       	mov	r10, r24
     dec:	4b 01       	movw	r8, r22
     dee:	80 1a       	sub	r8, r16
     df0:	91 08       	sbc	r9, r1
     df2:	0b 2d       	mov	r16, r11
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	11 95       	neg	r17
     df8:	01 95       	neg	r16
     dfa:	11 09       	sbc	r17, r1
     dfc:	4f 3f       	cpi	r20, 0xFF	; 255
     dfe:	bf ef       	ldi	r27, 0xFF	; 255
     e00:	5b 07       	cpc	r21, r27
     e02:	21 f4       	brne	.+8      	; 0xe0c <dtoa_prf+0x24c>
     e04:	d6 01       	movw	r26, r12
     e06:	ac 92       	st	X, r10
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	6d 01       	movw	r12, r26
     e0c:	64 17       	cp	r22, r20
     e0e:	75 07       	cpc	r23, r21
     e10:	2c f0       	brlt	.+10     	; 0xe1c <dtoa_prf+0x25c>
     e12:	84 16       	cp	r8, r20
     e14:	95 06       	cpc	r9, r21
     e16:	14 f4       	brge	.+4      	; 0xe1c <dtoa_prf+0x25c>
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <dtoa_prf+0x25e>
     e1c:	80 e3       	ldi	r24, 0x30	; 48
     e1e:	41 50       	subi	r20, 0x01	; 1
     e20:	51 09       	sbc	r21, r1
     e22:	31 96       	adiw	r30, 0x01	; 1
     e24:	d6 01       	movw	r26, r12
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	7d 01       	movw	r14, r26
     e2a:	40 17       	cp	r20, r16
     e2c:	51 07       	cpc	r21, r17
     e2e:	24 f0       	brlt	.+8      	; 0xe38 <dtoa_prf+0x278>
     e30:	d6 01       	movw	r26, r12
     e32:	8c 93       	st	X, r24
     e34:	67 01       	movw	r12, r14
     e36:	e2 cf       	rjmp	.-60     	; 0xdfc <dtoa_prf+0x23c>
     e38:	64 17       	cp	r22, r20
     e3a:	75 07       	cpc	r23, r21
     e3c:	39 f4       	brne	.+14     	; 0xe4c <dtoa_prf+0x28c>
     e3e:	96 33       	cpi	r25, 0x36	; 54
     e40:	20 f4       	brcc	.+8      	; 0xe4a <dtoa_prf+0x28a>
     e42:	95 33       	cpi	r25, 0x35	; 53
     e44:	19 f4       	brne	.+6      	; 0xe4c <dtoa_prf+0x28c>
     e46:	31 11       	cpse	r19, r1
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <dtoa_prf+0x28c>
     e4a:	81 e3       	ldi	r24, 0x31	; 49
     e4c:	f6 01       	movw	r30, r12
     e4e:	80 83       	st	Z, r24
     e50:	f7 01       	movw	r30, r14
     e52:	82 2f       	mov	r24, r18
     e54:	90 e2       	ldi	r25, 0x20	; 32
     e56:	88 23       	and	r24, r24
     e58:	19 f0       	breq	.+6      	; 0xe60 <dtoa_prf+0x2a0>
     e5a:	91 93       	st	Z+, r25
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	fb cf       	rjmp	.-10     	; 0xe56 <dtoa_prf+0x296>
     e60:	f7 01       	movw	r30, r14
     e62:	e2 0f       	add	r30, r18
     e64:	f1 1d       	adc	r31, r1
     e66:	10 82       	st	Z, r1
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	29 96       	adiw	r28, 0x09	; 9
     e6e:	ec e0       	ldi	r30, 0x0C	; 12
     e70:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__epilogue_restores__+0xc>

00000e74 <__ftoa_engine>:
     e74:	28 30       	cpi	r18, 0x08	; 8
     e76:	08 f0       	brcs	.+2      	; 0xe7a <__ftoa_engine+0x6>
     e78:	27 e0       	ldi	r18, 0x07	; 7
     e7a:	33 27       	eor	r19, r19
     e7c:	da 01       	movw	r26, r20
     e7e:	99 0f       	add	r25, r25
     e80:	31 1d       	adc	r19, r1
     e82:	87 fd       	sbrc	r24, 7
     e84:	91 60       	ori	r25, 0x01	; 1
     e86:	00 96       	adiw	r24, 0x00	; 0
     e88:	61 05       	cpc	r22, r1
     e8a:	71 05       	cpc	r23, r1
     e8c:	39 f4       	brne	.+14     	; 0xe9c <__ftoa_engine+0x28>
     e8e:	32 60       	ori	r19, 0x02	; 2
     e90:	2e 5f       	subi	r18, 0xFE	; 254
     e92:	3d 93       	st	X+, r19
     e94:	30 e3       	ldi	r19, 0x30	; 48
     e96:	2a 95       	dec	r18
     e98:	e1 f7       	brne	.-8      	; 0xe92 <__ftoa_engine+0x1e>
     e9a:	08 95       	ret
     e9c:	9f 3f       	cpi	r25, 0xFF	; 255
     e9e:	30 f0       	brcs	.+12     	; 0xeac <__ftoa_engine+0x38>
     ea0:	80 38       	cpi	r24, 0x80	; 128
     ea2:	71 05       	cpc	r23, r1
     ea4:	61 05       	cpc	r22, r1
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__ftoa_engine+0x36>
     ea8:	3c 5f       	subi	r19, 0xFC	; 252
     eaa:	3c 5f       	subi	r19, 0xFC	; 252
     eac:	3d 93       	st	X+, r19
     eae:	91 30       	cpi	r25, 0x01	; 1
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <__ftoa_engine+0x40>
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	91 1d       	adc	r25, r1
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	1f 93       	push	r17
     ebc:	0f 93       	push	r16
     ebe:	ff 92       	push	r15
     ec0:	ef 92       	push	r14
     ec2:	19 2f       	mov	r17, r25
     ec4:	98 7f       	andi	r25, 0xF8	; 248
     ec6:	96 95       	lsr	r25
     ec8:	e9 2f       	mov	r30, r25
     eca:	96 95       	lsr	r25
     ecc:	96 95       	lsr	r25
     ece:	e9 0f       	add	r30, r25
     ed0:	ff 27       	eor	r31, r31
     ed2:	ee 53       	subi	r30, 0x3E	; 62
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	99 27       	eor	r25, r25
     ed8:	33 27       	eor	r19, r19
     eda:	ee 24       	eor	r14, r14
     edc:	ff 24       	eor	r15, r15
     ede:	a7 01       	movw	r20, r14
     ee0:	e7 01       	movw	r28, r14
     ee2:	05 90       	lpm	r0, Z+
     ee4:	08 94       	sec
     ee6:	07 94       	ror	r0
     ee8:	28 f4       	brcc	.+10     	; 0xef4 <__ftoa_engine+0x80>
     eea:	36 0f       	add	r19, r22
     eec:	e7 1e       	adc	r14, r23
     eee:	f8 1e       	adc	r15, r24
     ef0:	49 1f       	adc	r20, r25
     ef2:	51 1d       	adc	r21, r1
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	06 94       	lsr	r0
     efe:	a1 f7       	brne	.-24     	; 0xee8 <__ftoa_engine+0x74>
     f00:	05 90       	lpm	r0, Z+
     f02:	07 94       	ror	r0
     f04:	28 f4       	brcc	.+10     	; 0xf10 <__ftoa_engine+0x9c>
     f06:	e7 0e       	add	r14, r23
     f08:	f8 1e       	adc	r15, r24
     f0a:	49 1f       	adc	r20, r25
     f0c:	56 1f       	adc	r21, r22
     f0e:	c1 1d       	adc	r28, r1
     f10:	77 0f       	add	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	66 1f       	adc	r22, r22
     f18:	06 94       	lsr	r0
     f1a:	a1 f7       	brne	.-24     	; 0xf04 <__ftoa_engine+0x90>
     f1c:	05 90       	lpm	r0, Z+
     f1e:	07 94       	ror	r0
     f20:	28 f4       	brcc	.+10     	; 0xf2c <__ftoa_engine+0xb8>
     f22:	f8 0e       	add	r15, r24
     f24:	49 1f       	adc	r20, r25
     f26:	56 1f       	adc	r21, r22
     f28:	c7 1f       	adc	r28, r23
     f2a:	d1 1d       	adc	r29, r1
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	66 1f       	adc	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	06 94       	lsr	r0
     f36:	a1 f7       	brne	.-24     	; 0xf20 <__ftoa_engine+0xac>
     f38:	05 90       	lpm	r0, Z+
     f3a:	07 94       	ror	r0
     f3c:	20 f4       	brcc	.+8      	; 0xf46 <__ftoa_engine+0xd2>
     f3e:	49 0f       	add	r20, r25
     f40:	56 1f       	adc	r21, r22
     f42:	c7 1f       	adc	r28, r23
     f44:	d8 1f       	adc	r29, r24
     f46:	99 0f       	add	r25, r25
     f48:	66 1f       	adc	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	06 94       	lsr	r0
     f50:	a9 f7       	brne	.-22     	; 0xf3c <__ftoa_engine+0xc8>
     f52:	84 91       	lpm	r24, Z
     f54:	10 95       	com	r17
     f56:	17 70       	andi	r17, 0x07	; 7
     f58:	41 f0       	breq	.+16     	; 0xf6a <__ftoa_engine+0xf6>
     f5a:	d6 95       	lsr	r29
     f5c:	c7 95       	ror	r28
     f5e:	57 95       	ror	r21
     f60:	47 95       	ror	r20
     f62:	f7 94       	ror	r15
     f64:	e7 94       	ror	r14
     f66:	1a 95       	dec	r17
     f68:	c1 f7       	brne	.-16     	; 0xf5a <__ftoa_engine+0xe6>
     f6a:	e8 e6       	ldi	r30, 0x68	; 104
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	68 94       	set
     f70:	15 90       	lpm	r1, Z+
     f72:	15 91       	lpm	r17, Z+
     f74:	35 91       	lpm	r19, Z+
     f76:	65 91       	lpm	r22, Z+
     f78:	95 91       	lpm	r25, Z+
     f7a:	05 90       	lpm	r0, Z+
     f7c:	7f e2       	ldi	r23, 0x2F	; 47
     f7e:	73 95       	inc	r23
     f80:	e1 18       	sub	r14, r1
     f82:	f1 0a       	sbc	r15, r17
     f84:	43 0b       	sbc	r20, r19
     f86:	56 0b       	sbc	r21, r22
     f88:	c9 0b       	sbc	r28, r25
     f8a:	d0 09       	sbc	r29, r0
     f8c:	c0 f7       	brcc	.-16     	; 0xf7e <__ftoa_engine+0x10a>
     f8e:	e1 0c       	add	r14, r1
     f90:	f1 1e       	adc	r15, r17
     f92:	43 1f       	adc	r20, r19
     f94:	56 1f       	adc	r21, r22
     f96:	c9 1f       	adc	r28, r25
     f98:	d0 1d       	adc	r29, r0
     f9a:	7e f4       	brtc	.+30     	; 0xfba <__ftoa_engine+0x146>
     f9c:	70 33       	cpi	r23, 0x30	; 48
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__ftoa_engine+0x130>
     fa0:	8a 95       	dec	r24
     fa2:	e6 cf       	rjmp	.-52     	; 0xf70 <__ftoa_engine+0xfc>
     fa4:	e8 94       	clt
     fa6:	01 50       	subi	r16, 0x01	; 1
     fa8:	30 f0       	brcs	.+12     	; 0xfb6 <__ftoa_engine+0x142>
     faa:	08 0f       	add	r16, r24
     fac:	0a f4       	brpl	.+2      	; 0xfb0 <__ftoa_engine+0x13c>
     fae:	00 27       	eor	r16, r16
     fb0:	02 17       	cp	r16, r18
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <__ftoa_engine+0x142>
     fb4:	20 2f       	mov	r18, r16
     fb6:	23 95       	inc	r18
     fb8:	02 2f       	mov	r16, r18
     fba:	7a 33       	cpi	r23, 0x3A	; 58
     fbc:	28 f0       	brcs	.+10     	; 0xfc8 <__ftoa_engine+0x154>
     fbe:	79 e3       	ldi	r23, 0x39	; 57
     fc0:	7d 93       	st	X+, r23
     fc2:	2a 95       	dec	r18
     fc4:	e9 f7       	brne	.-6      	; 0xfc0 <__ftoa_engine+0x14c>
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <__ftoa_engine+0x174>
     fc8:	7d 93       	st	X+, r23
     fca:	2a 95       	dec	r18
     fcc:	89 f6       	brne	.-94     	; 0xf70 <__ftoa_engine+0xfc>
     fce:	06 94       	lsr	r0
     fd0:	97 95       	ror	r25
     fd2:	67 95       	ror	r22
     fd4:	37 95       	ror	r19
     fd6:	17 95       	ror	r17
     fd8:	17 94       	ror	r1
     fda:	e1 18       	sub	r14, r1
     fdc:	f1 0a       	sbc	r15, r17
     fde:	43 0b       	sbc	r20, r19
     fe0:	56 0b       	sbc	r21, r22
     fe2:	c9 0b       	sbc	r28, r25
     fe4:	d0 09       	sbc	r29, r0
     fe6:	98 f0       	brcs	.+38     	; 0x100e <__ftoa_engine+0x19a>
     fe8:	23 95       	inc	r18
     fea:	7e 91       	ld	r23, -X
     fec:	73 95       	inc	r23
     fee:	7a 33       	cpi	r23, 0x3A	; 58
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <__ftoa_engine+0x180>
     ff2:	70 e3       	ldi	r23, 0x30	; 48
     ff4:	7c 93       	st	X, r23
     ff6:	20 13       	cpse	r18, r16
     ff8:	b8 f7       	brcc	.-18     	; 0xfe8 <__ftoa_engine+0x174>
     ffa:	7e 91       	ld	r23, -X
     ffc:	70 61       	ori	r23, 0x10	; 16
     ffe:	7d 93       	st	X+, r23
    1000:	30 f0       	brcs	.+12     	; 0x100e <__ftoa_engine+0x19a>
    1002:	83 95       	inc	r24
    1004:	71 e3       	ldi	r23, 0x31	; 49
    1006:	7d 93       	st	X+, r23
    1008:	70 e3       	ldi	r23, 0x30	; 48
    100a:	2a 95       	dec	r18
    100c:	e1 f7       	brne	.-8      	; 0x1006 <__ftoa_engine+0x192>
    100e:	11 24       	eor	r1, r1
    1010:	ef 90       	pop	r14
    1012:	ff 90       	pop	r15
    1014:	0f 91       	pop	r16
    1016:	1f 91       	pop	r17
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	99 27       	eor	r25, r25
    101e:	87 fd       	sbrc	r24, 7
    1020:	90 95       	com	r25
    1022:	08 95       	ret

00001024 <strrev>:
    1024:	dc 01       	movw	r26, r24
    1026:	fc 01       	movw	r30, r24
    1028:	67 2f       	mov	r22, r23
    102a:	71 91       	ld	r23, Z+
    102c:	77 23       	and	r23, r23
    102e:	e1 f7       	brne	.-8      	; 0x1028 <strrev+0x4>
    1030:	32 97       	sbiw	r30, 0x02	; 2
    1032:	04 c0       	rjmp	.+8      	; 0x103c <strrev+0x18>
    1034:	7c 91       	ld	r23, X
    1036:	6d 93       	st	X+, r22
    1038:	70 83       	st	Z, r23
    103a:	62 91       	ld	r22, -Z
    103c:	ae 17       	cp	r26, r30
    103e:	bf 07       	cpc	r27, r31
    1040:	c8 f3       	brcs	.-14     	; 0x1034 <strrev+0x10>
    1042:	08 95       	ret

00001044 <__prologue_saves__>:
    1044:	2f 92       	push	r2
    1046:	3f 92       	push	r3
    1048:	4f 92       	push	r4
    104a:	5f 92       	push	r5
    104c:	6f 92       	push	r6
    104e:	7f 92       	push	r7
    1050:	8f 92       	push	r8
    1052:	9f 92       	push	r9
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	ca 1b       	sub	r28, r26
    106e:	db 0b       	sbc	r29, r27
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	09 94       	ijmp

0000107c <__epilogue_restores__>:
    107c:	2a 88       	ldd	r2, Y+18	; 0x12
    107e:	39 88       	ldd	r3, Y+17	; 0x11
    1080:	48 88       	ldd	r4, Y+16	; 0x10
    1082:	5f 84       	ldd	r5, Y+15	; 0x0f
    1084:	6e 84       	ldd	r6, Y+14	; 0x0e
    1086:	7d 84       	ldd	r7, Y+13	; 0x0d
    1088:	8c 84       	ldd	r8, Y+12	; 0x0c
    108a:	9b 84       	ldd	r9, Y+11	; 0x0b
    108c:	aa 84       	ldd	r10, Y+10	; 0x0a
    108e:	b9 84       	ldd	r11, Y+9	; 0x09
    1090:	c8 84       	ldd	r12, Y+8	; 0x08
    1092:	df 80       	ldd	r13, Y+7	; 0x07
    1094:	ee 80       	ldd	r14, Y+6	; 0x06
    1096:	fd 80       	ldd	r15, Y+5	; 0x05
    1098:	0c 81       	ldd	r16, Y+4	; 0x04
    109a:	1b 81       	ldd	r17, Y+3	; 0x03
    109c:	aa 81       	ldd	r26, Y+2	; 0x02
    109e:	b9 81       	ldd	r27, Y+1	; 0x01
    10a0:	ce 0f       	add	r28, r30
    10a2:	d1 1d       	adc	r29, r1
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	ed 01       	movw	r28, r26
    10b0:	08 95       	ret

000010b2 <_exit>:
    10b2:	f8 94       	cli

000010b4 <__stop_program>:
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <__stop_program>

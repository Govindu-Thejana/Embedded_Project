
real_time_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  000013bc  00001450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  008001ae  008001ae  000014fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000160d  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba9  00000000  00000000  00002cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b27  00000000  00000000  0000386a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00004394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  000045cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000697  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000051db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	ec eb       	ldi	r30, 0xBC	; 188
      88:	f3 e1       	ldi	r31, 0x13	; 19
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	ae 3a       	cpi	r26, 0xAE	; 174
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	ae ea       	ldi	r26, 0xAE	; 174
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a1 3c       	cpi	r26, 0xC1	; 193
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <main>
      aa:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <I2C_Init>:
#include "i2c.h"
#define F_CPU 16000000UL
#define SCL_CLOCK 100000UL  // 100kHz I2C clock

void I2C_Init(void) {
	TWSR = 0x00;  // Prescaler = 1
      b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2;
      b6:	88 e4       	ldi	r24, 0x48	; 72
      b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN);  // Enable TWI
      bc:	84 e0       	ldi	r24, 0x04	; 4
      be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      c2:	08 95       	ret

000000c4 <I2C_Start>:
}

void I2C_Start(void) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
      c4:	84 ea       	ldi	r24, 0xA4	; 164
      c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
      ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ce:	88 23       	and	r24, r24
      d0:	e4 f7       	brge	.-8      	; 0xca <I2C_Start+0x6>
}
      d2:	08 95       	ret

000000d4 <I2C_Stop>:

void I2C_Stop(void) {
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
      d4:	84 e9       	ldi	r24, 0x94	; 148
      d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      da:	08 95       	ret

000000dc <I2C_Write>:
}

void I2C_Write(uint8_t data) {
	TWDR = data;
      dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
      e0:	84 e8       	ldi	r24, 0x84	; 132
      e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
      e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ea:	88 23       	and	r24, r24
      ec:	e4 f7       	brge	.-8      	; 0xe6 <I2C_Write+0xa>
}
      ee:	08 95       	ret

000000f0 <I2C_ReadAck>:

uint8_t I2C_ReadAck(void) {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
      f0:	84 ec       	ldi	r24, 0xC4	; 196
      f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
      f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      fa:	88 23       	and	r24, r24
      fc:	e4 f7       	brge	.-8      	; 0xf6 <I2C_ReadAck+0x6>
	return TWDR;
      fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     102:	08 95       	ret

00000104 <I2C_ReadNack>:

uint8_t I2C_ReadNack(void) {
	TWCR = (1 << TWEN) | (1 << TWINT);
     104:	84 e8       	ldi	r24, 0x84	; 132
     106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
     10a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     10e:	88 23       	and	r24, r24
     110:	e4 f7       	brge	.-8      	; 0x10a <I2C_ReadNack+0x6>
	return TWDR;
     112:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     116:	08 95       	ret

00000118 <Keypad_Init>:
	{'C', '0', '=', '+'}
};

void Keypad_Init() {
	// Configure Rows (PD4 - PD7) as outputs, initially HIGH
	ROW_DDR |= 0xF0;  // PD4-PD7 as outputs
     118:	8a b1       	in	r24, 0x0a	; 10
     11a:	80 6f       	ori	r24, 0xF0	; 240
     11c:	8a b9       	out	0x0a, r24	; 10
	ROW_PORT |= 0xF0; // Set to HIGH
     11e:	8b b1       	in	r24, 0x0b	; 11
     120:	80 6f       	ori	r24, 0xF0	; 240
     122:	8b b9       	out	0x0b, r24	; 11

	// Configure Columns (PB0 - PB3) as inputs with pull-ups
	COL_DDR &= ~0x0F;  // PB0-PB3 as inputs
     124:	84 b1       	in	r24, 0x04	; 4
     126:	80 7f       	andi	r24, 0xF0	; 240
     128:	84 b9       	out	0x04, r24	; 4
	COL_PORT |= 0x0F;  // Enable pull-ups
     12a:	85 b1       	in	r24, 0x05	; 5
     12c:	8f 60       	ori	r24, 0x0F	; 15
     12e:	85 b9       	out	0x05, r24	; 5
     130:	08 95       	ret

00000132 <Keypad_GetKey>:
}

char Keypad_GetKey() {
	for (uint8_t row = 0; row < 4; row++) {
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	44 c0       	rjmp	.+136    	; 0x1be <Keypad_GetKey+0x8c>
		ROW_PORT &= ~(1 << (row + 4));  // Set row LOW
     136:	8b b1       	in	r24, 0x0b	; 11
     138:	e3 2f       	mov	r30, r19
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	bf 01       	movw	r22, r30
     13e:	6c 5f       	subi	r22, 0xFC	; 252
     140:	7f 4f       	sbci	r23, 0xFF	; 255
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	02 c0       	rjmp	.+4      	; 0x14c <Keypad_GetKey+0x1a>
     148:	44 0f       	add	r20, r20
     14a:	55 1f       	adc	r21, r21
     14c:	6a 95       	dec	r22
     14e:	e2 f7       	brpl	.-8      	; 0x148 <Keypad_GetKey+0x16>
     150:	a4 2f       	mov	r26, r20
     152:	94 2f       	mov	r25, r20
     154:	90 95       	com	r25
     156:	89 23       	and	r24, r25
     158:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	81 ee       	ldi	r24, 0xE1	; 225
     15c:	94 e0       	ldi	r25, 0x04	; 4
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <Keypad_GetKey+0x2c>
     162:	00 c0       	rjmp	.+0      	; 0x164 <Keypad_GetKey+0x32>
     164:	00 00       	nop
		_delay_ms(5);

		for (uint8_t col = 0; col < 4; col++) {
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <Keypad_GetKey+0x80>
			if (!(COL_PIN & (1 << col))) {  // If column is LOW, key is pressed
     16a:	83 b1       	in	r24, 0x03	; 3
     16c:	62 2f       	mov	r22, r18
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	02 2e       	mov	r0, r18
     174:	02 c0       	rjmp	.+4      	; 0x17a <Keypad_GetKey+0x48>
     176:	95 95       	asr	r25
     178:	87 95       	ror	r24
     17a:	0a 94       	dec	r0
     17c:	e2 f7       	brpl	.-8      	; 0x176 <Keypad_GetKey+0x44>
     17e:	80 fd       	sbrc	r24, 0
     180:	17 c0       	rjmp	.+46     	; 0x1b0 <Keypad_GetKey+0x7e>
				while (!(COL_PIN & (1 << col)));  // Wait until key is released
     182:	83 b1       	in	r24, 0x03	; 3
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	06 2e       	mov	r0, r22
     188:	02 c0       	rjmp	.+4      	; 0x18e <Keypad_GetKey+0x5c>
     18a:	95 95       	asr	r25
     18c:	87 95       	ror	r24
     18e:	0a 94       	dec	r0
     190:	e2 f7       	brpl	.-8      	; 0x18a <Keypad_GetKey+0x58>
     192:	80 ff       	sbrs	r24, 0
     194:	f6 cf       	rjmp	.-20     	; 0x182 <Keypad_GetKey+0x50>
				ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
     196:	8b b1       	in	r24, 0x0b	; 11
     198:	a8 2b       	or	r26, r24
     19a:	ab b9       	out	0x0b, r26	; 11
				return keymap[row][col];  // Return key value
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	e0 50       	subi	r30, 0x00	; 0
     1a6:	ff 4f       	sbci	r31, 0xFF	; 255
     1a8:	e6 0f       	add	r30, r22
     1aa:	f7 1f       	adc	r31, r23
     1ac:	80 81       	ld	r24, Z
     1ae:	08 95       	ret
char Keypad_GetKey() {
	for (uint8_t row = 0; row < 4; row++) {
		ROW_PORT &= ~(1 << (row + 4));  // Set row LOW
		_delay_ms(5);

		for (uint8_t col = 0; col < 4; col++) {
     1b0:	2f 5f       	subi	r18, 0xFF	; 255
     1b2:	24 30       	cpi	r18, 0x04	; 4
     1b4:	d0 f2       	brcs	.-76     	; 0x16a <Keypad_GetKey+0x38>
				while (!(COL_PIN & (1 << col)));  // Wait until key is released
				ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
				return keymap[row][col];  // Return key value
			}
		}
		ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
     1b6:	8b b1       	in	r24, 0x0b	; 11
     1b8:	48 2b       	or	r20, r24
     1ba:	4b b9       	out	0x0b, r20	; 11
	COL_DDR &= ~0x0F;  // PB0-PB3 as inputs
	COL_PORT |= 0x0F;  // Enable pull-ups
}

char Keypad_GetKey() {
	for (uint8_t row = 0; row < 4; row++) {
     1bc:	3f 5f       	subi	r19, 0xFF	; 255
     1be:	34 30       	cpi	r19, 0x04	; 4
     1c0:	08 f4       	brcc	.+2      	; 0x1c4 <Keypad_GetKey+0x92>
     1c2:	b9 cf       	rjmp	.-142    	; 0x136 <Keypad_GetKey+0x4>
				return keymap[row][col];  // Return key value
			}
		}
		ROW_PORT |= (1 << (row + 4));  // Reset row HIGH
	}
	return 0;  // No key pressed
     1c4:	80 e0       	ldi	r24, 0x00	; 0
}
     1c6:	08 95       	ret

000001c8 <LCD_Command>:
	LCD_Command(0x01);  // Clear Display
	_delay_ms(2);
}


void LCD_Command(uint8_t cmd) {
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
	uint8_t upper_nibble = (cmd & 0xF0);  // Get upper nibble
     1ce:	18 2f       	mov	r17, r24
     1d0:	10 7f       	andi	r17, 0xF0	; 240
	uint8_t lower_nibble = ((cmd << 4) & 0xF0);  // Get lower nibble
     1d2:	90 e1       	ldi	r25, 0x10	; 16
     1d4:	89 9f       	mul	r24, r25
     1d6:	e0 01       	movw	r28, r0
     1d8:	11 24       	eor	r1, r1

	I2C_Start();
     1da:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(LCD_ADDR << 1);
     1de:	80 e4       	ldi	r24, 0x40	; 64
     1e0:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Write(0x00);  // Command mode
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>

	I2C_Write(upper_nibble | 0x04);  // Enable ON
     1ea:	81 2f       	mov	r24, r17
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Write(upper_nibble);  // Enable OFF
     1f2:	81 2f       	mov	r24, r17
     1f4:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>

	I2C_Write(lower_nibble | 0x04);  // Enable ON
     1f8:	8c 2f       	mov	r24, r28
     1fa:	84 60       	ori	r24, 0x04	; 4
     1fc:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Write(lower_nibble);  // Enable OFF
     200:	8c 2f       	mov	r24, r28
     202:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>

	I2C_Stop();
     206:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>
     20a:	83 ef       	ldi	r24, 0xF3	; 243
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Command+0x46>
     212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_Command+0x4c>
     214:	00 00       	nop
	_delay_ms(2);
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	08 95       	ret

0000021e <LCD_Init>:
     21e:	83 ed       	ldi	r24, 0xD3	; 211
     220:	90 e3       	ldi	r25, 0x30	; 48
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Init+0x4>
     226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Init+0xa>
     228:	00 00       	nop
#include <util/delay.h>

void LCD_Init() {
	_delay_ms(50);  // LCD Power-up time

	LCD_Command(0x33);  // Initialize in 4-bit mode
     22a:	83 e3       	ldi	r24, 0x33	; 51
     22c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x32);  // Set to 4-bit mode
     230:	82 e3       	ldi	r24, 0x32	; 50
     232:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x28);  // Function Set: 4-bit, 2 lines, 5x7 dots
     236:	88 e2       	ldi	r24, 0x28	; 40
     238:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x0C);  // Display ON, Cursor OFF
     23c:	8c e0       	ldi	r24, 0x0C	; 12
     23e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x06);  // Entry mode: Auto Increment
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x01);  // Clear Display
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
     24e:	83 ef       	ldi	r24, 0xF3	; 243
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <LCD_Init+0x34>
     256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_Init+0x3a>
     258:	00 00       	nop
     25a:	08 95       	ret

0000025c <LCD_Print>:
	I2C_Stop();
	_delay_ms(2);
}


void LCD_Print(char *str) {
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	00 d0       	rcall	.+0      	; 0x266 <LCD_Print+0xa>
     266:	00 d0       	rcall	.+0      	; 0x268 <LCD_Print+0xc>
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	8c 01       	movw	r16, r24
	I2C_Start();
     26e:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(LCD_ADDR << 1);
     272:	80 e4       	ldi	r24, 0x40	; 64
     274:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Write(0x40);  // Data mode
     278:	80 e4       	ldi	r24, 0x40	; 64
     27a:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	while (*str) {
     27e:	1c c0       	rjmp	.+56     	; 0x2b8 <LCD_Print+0x5c>
		uint8_t upper_nibble = (*str & 0xF0);
     280:	2a 81       	ldd	r18, Y+2	; 0x02
     282:	20 7f       	andi	r18, 0xF0	; 240
     284:	29 83       	std	Y+1, r18	; 0x01
		uint8_t lower_nibble = ((*str << 4) & 0xF0);
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	e0 e1       	ldi	r30, 0x10	; 16
     28a:	8e 9f       	mul	r24, r30
     28c:	c0 01       	movw	r24, r0
     28e:	11 24       	eor	r1, r1
     290:	9c 83       	std	Y+4, r25	; 0x04
     292:	8b 83       	std	Y+3, r24	; 0x03

		I2C_Write(upper_nibble | 0x05);  // RS=1, Enable=1
     294:	82 2f       	mov	r24, r18
     296:	85 60       	ori	r24, 0x05	; 5
     298:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
		I2C_Write(upper_nibble | 0x01);  // RS=1, Enable=0
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	81 60       	ori	r24, 0x01	; 1
     2a0:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>

		I2C_Write(lower_nibble | 0x05);  // RS=1, Enable=1
     2a4:	8b 81       	ldd	r24, Y+3	; 0x03
     2a6:	85 60       	ori	r24, 0x05	; 5
     2a8:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
		I2C_Write(lower_nibble | 0x01);  // RS=1, Enable=0
     2ac:	8b 81       	ldd	r24, Y+3	; 0x03
     2ae:	81 60       	ori	r24, 0x01	; 1
     2b0:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>

		str++;
     2b4:	0f 5f       	subi	r16, 0xFF	; 255
     2b6:	1f 4f       	sbci	r17, 0xFF	; 255

void LCD_Print(char *str) {
	I2C_Start();
	I2C_Write(LCD_ADDR << 1);
	I2C_Write(0x40);  // Data mode
	while (*str) {
     2b8:	f8 01       	movw	r30, r16
     2ba:	f0 81       	ld	r31, Z
     2bc:	fa 83       	std	Y+2, r31	; 0x02
     2be:	f1 11       	cpse	r31, r1
     2c0:	df cf       	rjmp	.-66     	; 0x280 <LCD_Print+0x24>
		I2C_Write(lower_nibble | 0x05);  // RS=1, Enable=1
		I2C_Write(lower_nibble | 0x01);  // RS=1, Enable=0

		str++;
	}
	I2C_Stop();
     2c2:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>
}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <LCD_SetCursor>:


void LCD_SetCursor(uint8_t col, uint8_t row) {
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <LCD_SetCursor+0x6>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <LCD_SetCursor+0x8>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
     2e4:	19 82       	std	Y+1, r1	; 0x01
     2e6:	90 e4       	ldi	r25, 0x40	; 64
     2e8:	9a 83       	std	Y+2, r25	; 0x02
     2ea:	94 e1       	ldi	r25, 0x14	; 20
     2ec:	9b 83       	std	Y+3, r25	; 0x03
     2ee:	94 e5       	ldi	r25, 0x54	; 84
     2f0:	9c 83       	std	Y+4, r25	; 0x04
	LCD_Command(0x80 | (col + row_offsets[row]));
     2f2:	e1 e0       	ldi	r30, 0x01	; 1
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	ec 0f       	add	r30, r28
     2f8:	fd 1f       	adc	r31, r29
     2fa:	e6 0f       	add	r30, r22
     2fc:	f1 1d       	adc	r31, r1
     2fe:	90 81       	ld	r25, Z
     300:	89 0f       	add	r24, r25
     302:	80 68       	ori	r24, 0x80	; 128
     304:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
}
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <LCD_Clear>:

void LCD_Clear() {
	LCD_Command(0x01);  // Clear display command
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
     31c:	83 ef       	ldi	r24, 0xF3	; 243
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <LCD_Clear+0xa>
     324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_Clear+0x10>
     326:	00 00       	nop
     328:	08 95       	ret

0000032a <Clear_Expression>:
char expression[16];
uint8_t expr_index = 0;
uint8_t result_shown = 0;  // Flag to track if result is displayed

void Clear_Expression() {
	expr_index = 0;
     32a:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <expr_index>
	expression[0] = '\0';
     32e:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <expression>
	result_shown = 0;
     332:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__data_end>
	LCD_Clear();
     336:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Clear>
	LCD_Print("Calculator Mode");
     33a:	80 e1       	ldi	r24, 0x10	; 16
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
	LCD_SetCursor(0, 1);
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
     34a:	08 95       	ret

0000034c <Evaluate_Expression>:
}

int Evaluate_Expression(char *expr) {
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	00 d0       	rcall	.+0      	; 0x356 <Evaluate_Expression+0xa>
     356:	00 d0       	rcall	.+0      	; 0x358 <Evaluate_Expression+0xc>
     358:	1f 92       	push	r1
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
	int num1 = 0, num2 = 0;
     35e:	1a 82       	std	Y+2, r1	; 0x02
     360:	19 82       	std	Y+1, r1	; 0x01
     362:	1c 82       	std	Y+4, r1	; 0x04
     364:	1b 82       	std	Y+3, r1	; 0x03
	char op = 0;
     366:	1d 82       	std	Y+5, r1	; 0x05
	sscanf(expr, "%d%c%d", &num1, &op, &num2);
     368:	9e 01       	movw	r18, r28
     36a:	2d 5f       	subi	r18, 0xFD	; 253
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	3f 93       	push	r19
     370:	2f 93       	push	r18
     372:	2e 5f       	subi	r18, 0xFE	; 254
     374:	3f 4f       	sbci	r19, 0xFF	; 255
     376:	3f 93       	push	r19
     378:	2f 93       	push	r18
     37a:	24 50       	subi	r18, 0x04	; 4
     37c:	31 09       	sbc	r19, r1
     37e:	3f 93       	push	r19
     380:	2f 93       	push	r18
     382:	20 e2       	ldi	r18, 0x20	; 32
     384:	31 e0       	ldi	r19, 0x01	; 1
     386:	3f 93       	push	r19
     388:	2f 93       	push	r18
     38a:	9f 93       	push	r25
     38c:	8f 93       	push	r24
     38e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <sscanf>
	
	switch (op) {
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	8d 81       	ldd	r24, Y+5	; 0x05
     39e:	8b 32       	cpi	r24, 0x2B	; 43
     3a0:	49 f0       	breq	.+18     	; 0x3b4 <Evaluate_Expression+0x68>
     3a2:	18 f4       	brcc	.+6      	; 0x3aa <Evaluate_Expression+0x5e>
     3a4:	8a 32       	cpi	r24, 0x2A	; 42
     3a6:	a1 f0       	breq	.+40     	; 0x3d0 <Evaluate_Expression+0x84>
     3a8:	34 c0       	rjmp	.+104    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     3aa:	8d 32       	cpi	r24, 0x2D	; 45
     3ac:	51 f0       	breq	.+20     	; 0x3c2 <Evaluate_Expression+0x76>
     3ae:	8f 32       	cpi	r24, 0x2F	; 47
     3b0:	d9 f0       	breq	.+54     	; 0x3e8 <Evaluate_Expression+0x9c>
     3b2:	2f c0       	rjmp	.+94     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		case '+': return num1 + num2;
     3b4:	09 81       	ldd	r16, Y+1	; 0x01
     3b6:	1a 81       	ldd	r17, Y+2	; 0x02
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	9c 81       	ldd	r25, Y+4	; 0x04
     3bc:	08 0f       	add	r16, r24
     3be:	19 1f       	adc	r17, r25
     3c0:	2a c0       	rjmp	.+84     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		case '-': return num1 - num2;
     3c2:	09 81       	ldd	r16, Y+1	; 0x01
     3c4:	1a 81       	ldd	r17, Y+2	; 0x02
     3c6:	8b 81       	ldd	r24, Y+3	; 0x03
     3c8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ca:	08 1b       	sub	r16, r24
     3cc:	19 0b       	sbc	r17, r25
     3ce:	23 c0       	rjmp	.+70     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		case '*': return num1 * num2;
     3d0:	29 81       	ldd	r18, Y+1	; 0x01
     3d2:	3a 81       	ldd	r19, Y+2	; 0x02
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	9c 81       	ldd	r25, Y+4	; 0x04
     3d8:	28 9f       	mul	r18, r24
     3da:	80 01       	movw	r16, r0
     3dc:	29 9f       	mul	r18, r25
     3de:	10 0d       	add	r17, r0
     3e0:	38 9f       	mul	r19, r24
     3e2:	10 0d       	add	r17, r0
     3e4:	11 24       	eor	r1, r1
     3e6:	17 c0       	rjmp	.+46     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		case '/':
		if (num2 != 0) return num1 / num2;
     3e8:	0b 81       	ldd	r16, Y+3	; 0x03
     3ea:	1c 81       	ldd	r17, Y+4	; 0x04
     3ec:	01 15       	cp	r16, r1
     3ee:	11 05       	cpc	r17, r1
     3f0:	39 f0       	breq	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	9a 81       	ldd	r25, Y+2	; 0x02
     3f6:	b8 01       	movw	r22, r16
     3f8:	0e 94 96 03 	call	0x72c	; 0x72c <__divmodhi4>
     3fc:	8b 01       	movw	r16, r22
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		else {
			LCD_SetCursor(0, 1);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
			LCD_Print("Error: Div by 0");
     408:	87 e2       	ldi	r24, 0x27	; 39
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
			return 0;
     410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		}
		default: return 0;
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	10 e0       	ldi	r17, 0x00	; 0
	}
}
     416:	c8 01       	movw	r24, r16
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <Calculator_Handler>:

void Calculator_Handler(char key) {
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	60 97       	sbiw	r28, 0x10	; 16
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
	if (key == 'C') {
     444:	83 34       	cpi	r24, 0x43	; 67
     446:	19 f4       	brne	.+6      	; 0x44e <Calculator_Handler+0x22>
		Clear_Expression();
     448:	0e 94 95 01 	call	0x32a	; 0x32a <Clear_Expression>
     44c:	61 c0       	rjmp	.+194    	; 0x510 <Calculator_Handler+0xe4>
	}
	else if (key == '=' && !result_shown) {
     44e:	8d 33       	cpi	r24, 0x3D	; 61
     450:	89 f5       	brne	.+98     	; 0x4b4 <Calculator_Handler+0x88>
     452:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <__data_end>
     456:	91 11       	cpse	r25, r1
     458:	2d c0       	rjmp	.+90     	; 0x4b4 <Calculator_Handler+0x88>
		int result = Evaluate_Expression(expression);
     45a:	81 eb       	ldi	r24, 0xB1	; 177
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 a6 01 	call	0x34c	; 0x34c <Evaluate_Expression>
		char buffer[16];  // Reduced buffer size to match LCD width
		sprintf(buffer, "%s=%d", expression, result);
     462:	9f 93       	push	r25
     464:	8f 93       	push	r24
     466:	81 eb       	ldi	r24, 0xB1	; 177
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	87 e3       	ldi	r24, 0x37	; 55
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	8e 01       	movw	r16, r28
     478:	0f 5f       	subi	r16, 0xFF	; 255
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	1f 93       	push	r17
     47e:	0f 93       	push	r16
     480:	0e 94 be 03 	call	0x77c	; 0x77c <sprintf>
		LCD_SetCursor(0, 1);
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
		LCD_Print("                ");  // Clear line
     48c:	8d e3       	ldi	r24, 0x3D	; 61
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
		LCD_SetCursor(0, 1);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
		LCD_Print(buffer);
     49c:	c8 01       	movw	r24, r16
     49e:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
		result_shown = 1;  // Mark result as shown
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>

void Calculator_Handler(char key) {
	if (key == 'C') {
		Clear_Expression();
	}
	else if (key == '=' && !result_shown) {
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	2e c0       	rjmp	.+92     	; 0x510 <Calculator_Handler+0xe4>
		LCD_Print("                ");  // Clear line
		LCD_SetCursor(0, 1);
		LCD_Print(buffer);
		result_shown = 1;  // Mark result as shown
	}
	else if (key == '=' && result_shown) {
     4b4:	8d 33       	cpi	r24, 0x3D	; 61
     4b6:	39 f4       	brne	.+14     	; 0x4c6 <Calculator_Handler+0x9a>
     4b8:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <__data_end>
     4bc:	99 23       	and	r25, r25
     4be:	19 f0       	breq	.+6      	; 0x4c6 <Calculator_Handler+0x9a>
		// Second press of '=' clears screen and resets
		Clear_Expression();
     4c0:	0e 94 95 01 	call	0x32a	; 0x32a <Clear_Expression>
     4c4:	25 c0       	rjmp	.+74     	; 0x510 <Calculator_Handler+0xe4>
	}
	else if (expr_index < 15 && !result_shown) {
     4c6:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <expr_index>
     4ca:	ef 30       	cpi	r30, 0x0F	; 15
     4cc:	08 f5       	brcc	.+66     	; 0x510 <Calculator_Handler+0xe4>
     4ce:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <__data_end>
     4d2:	91 11       	cpse	r25, r1
     4d4:	1d c0       	rjmp	.+58     	; 0x510 <Calculator_Handler+0xe4>
		expression[expr_index++] = key;
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	9e 0f       	add	r25, r30
     4da:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <expr_index>
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	ef 54       	subi	r30, 0x4F	; 79
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	80 83       	st	Z, r24
		expression[expr_index] = '\0';
     4e6:	e9 2f       	mov	r30, r25
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	ef 54       	subi	r30, 0x4F	; 79
     4ec:	fe 4f       	sbci	r31, 0xFE	; 254
     4ee:	10 82       	st	Z, r1
		LCD_SetCursor(0, 1);
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
		LCD_Print("                ");  // Clear line
     4f8:	8d e3       	ldi	r24, 0x3D	; 61
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
		LCD_SetCursor(0, 1);
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
		LCD_Print(expression);
     508:	81 eb       	ldi	r24, 0xB1	; 177
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
	}
}
     510:	60 96       	adiw	r28, 0x10	; 16
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <Mode_Handler>:

void Mode_Handler() {
	char key = Keypad_GetKey();
     526:	0e 94 99 00 	call	0x132	; 0x132 <Keypad_GetKey>

	if (key == 'C') {
     52a:	83 34       	cpi	r24, 0x43	; 67
     52c:	f9 f4       	brne	.+62     	; 0x56c <Mode_Handler+0x46>
		if (mode == MODE_TIME) {
     52e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <mode>
     532:	81 11       	cpse	r24, r1
     534:	12 c0       	rjmp	.+36     	; 0x55a <Mode_Handler+0x34>
			mode = MODE_SELECTION;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <mode>
			LCD_Clear();
     53c:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Clear>
			LCD_Print(" Select Mode:");
     540:	8e e4       	ldi	r24, 0x4E	; 78
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
			LCD_SetCursor(0, 1);
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
			LCD_Print("1-Calc  2-Alarm");
     550:	8c e5       	ldi	r24, 0x5C	; 92
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
     558:	08 95       	ret
			} else {
			mode = MODE_TIME;
     55a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <mode>
			LCD_Clear();
     55e:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Clear>
			LCD_Print("Time & Date");
     562:	8c e6       	ldi	r24, 0x6C	; 108
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
     56a:	08 95       	ret
		}
		} else if (mode == MODE_SELECTION) {
     56c:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <mode>
     570:	91 30       	cpi	r25, 0x01	; 1
     572:	a1 f4       	brne	.+40     	; 0x59c <Mode_Handler+0x76>
		if (key == '1') {
     574:	81 33       	cpi	r24, 0x31	; 49
     576:	31 f4       	brne	.+12     	; 0x584 <Mode_Handler+0x5e>
			mode = MODE_CALCULATOR;
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <mode>
			Clear_Expression();
     57e:	0e 94 95 01 	call	0x32a	; 0x32a <Clear_Expression>
     582:	08 95       	ret
			} else if (key == '2') {
     584:	82 33       	cpi	r24, 0x32	; 50
     586:	79 f4       	brne	.+30     	; 0x5a6 <Mode_Handler+0x80>
			mode = MODE_ALARM;
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <mode>
			LCD_Clear();
     58e:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Clear>
			LCD_Print("Alarm Mode");
     592:	88 e7       	ldi	r24, 0x78	; 120
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
     59a:	08 95       	ret
		}
		} else if (mode == MODE_CALCULATOR && key) {
     59c:	92 30       	cpi	r25, 0x02	; 2
     59e:	19 f4       	brne	.+6      	; 0x5a6 <Mode_Handler+0x80>
     5a0:	81 11       	cpse	r24, r1
		Calculator_Handler(key);
     5a2:	0e 94 16 02 	call	0x42c	; 0x42c <Calculator_Handler>
     5a6:	08 95       	ret

000005a8 <main>:
	}
}

int main(void) {
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	61 97       	sbiw	r28, 0x11	; 17
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];

	I2C_Init();
     5bc:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Init>
	LCD_Init();
     5c0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	RTC_Init();
     5c4:	0e 94 38 03 	call	0x670	; 0x670 <RTC_Init>
	Keypad_Init();
     5c8:	0e 94 8c 00 	call	0x118	; 0x118 <Keypad_Init>
	
	while (1) {
		Mode_Handler();
     5cc:	0e 94 93 02 	call	0x526	; 0x526 <Mode_Handler>
		
		if (mode == MODE_TIME) {
     5d0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <mode>
     5d4:	81 11       	cpse	r24, r1
     5d6:	fa cf       	rjmp	.-12     	; 0x5cc <main+0x24>
			RTC_Time time = RTC_GetTime();
     5d8:	0e 94 46 03 	call	0x68c	; 0x68c <RTC_GetTime>
     5dc:	2b 87       	std	Y+11, r18	; 0x0b
     5de:	3c 87       	std	Y+12, r19	; 0x0c
     5e0:	4d 87       	std	Y+13, r20	; 0x0d
     5e2:	5e 87       	std	Y+14, r21	; 0x0e
     5e4:	6f 87       	std	Y+15, r22	; 0x0f
     5e6:	78 8b       	std	Y+16, r23	; 0x10
     5e8:	89 8b       	std	Y+17, r24	; 0x11
			LCD_SetCursor(0, 0);
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
			sprintf(buffer, "Time: %02d:%02d:%02d", time.hour, time.min, time.sec);
     5f2:	2b 85       	ldd	r18, Y+11	; 0x0b
     5f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f8:	1f 92       	push	r1
     5fa:	2f 93       	push	r18
     5fc:	1f 92       	push	r1
     5fe:	9f 93       	push	r25
     600:	1f 92       	push	r1
     602:	8f 93       	push	r24
     604:	83 e8       	ldi	r24, 0x83	; 131
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	8e 01       	movw	r16, r28
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	1f 93       	push	r17
     614:	0f 93       	push	r16
     616:	0e 94 be 03 	call	0x77c	; 0x77c <sprintf>
			LCD_Print(buffer);
     61a:	c8 01       	movw	r24, r16
     61c:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
			
			LCD_SetCursor(0, 1);
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_SetCursor>
			sprintf(buffer, "Date: %02d/%02d/%04d", time.day, time.month, time.year);
     628:	9f 85       	ldd	r25, Y+15	; 0x0f
     62a:	8e 85       	ldd	r24, Y+14	; 0x0e
     62c:	29 89       	ldd	r18, Y+17	; 0x11
     62e:	2f 93       	push	r18
     630:	28 89       	ldd	r18, Y+16	; 0x10
     632:	2f 93       	push	r18
     634:	1f 92       	push	r1
     636:	9f 93       	push	r25
     638:	1f 92       	push	r1
     63a:	8f 93       	push	r24
     63c:	88 e9       	ldi	r24, 0x98	; 152
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	1f 93       	push	r17
     646:	0f 93       	push	r16
     648:	0e 94 be 03 	call	0x77c	; 0x77c <sprintf>
			LCD_Print(buffer);
     64c:	c8 01       	movw	r24, r16
     64e:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Print>
     652:	2f e3       	ldi	r18, 0x3F	; 63
     654:	8d e0       	ldi	r24, 0x0D	; 13
     656:	93 e0       	ldi	r25, 0x03	; 3
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	80 40       	sbci	r24, 0x00	; 0
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <main+0xb0>
     660:	00 c0       	rjmp	.+0      	; 0x662 <main+0xba>
     662:	00 00       	nop
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	ae cf       	rjmp	.-164    	; 0x5cc <main+0x24>

00000670 <RTC_Init>:
#include "i2c.h"

#define RTC_ADDR 0x51  // PCF8563 RTC I2C Address

void RTC_Init(void) {
	I2C_Start();
     670:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(RTC_ADDR << 1);
     674:	82 ea       	ldi	r24, 0xA2	; 162
     676:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Write(0x00);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Write(0x00);  // Start the RTC
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Stop();
     686:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>
     68a:	08 95       	ret

0000068c <RTC_GetTime>:
}

RTC_Time RTC_GetTime(void) {
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	2e 97       	sbiw	r28, 0x0e	; 14
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
	RTC_Time time;

	I2C_Start();
     6a0:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write(RTC_ADDR << 1);
     6a4:	82 ea       	ldi	r24, 0xA2	; 162
     6a6:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Write(0x02);
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	I2C_Stop();
     6b0:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>

	I2C_Start();
     6b4:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Start>
	I2C_Write((RTC_ADDR << 1) | 1);
     6b8:	83 ea       	ldi	r24, 0xA3	; 163
     6ba:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Write>
	time.sec = I2C_ReadAck() & 0x7F;
     6be:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_ReadAck>
     6c2:	8f 77       	andi	r24, 0x7F	; 127
     6c4:	88 87       	std	Y+8, r24	; 0x08
	time.min = I2C_ReadAck() & 0x7F;
     6c6:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_ReadAck>
     6ca:	8f 77       	andi	r24, 0x7F	; 127
     6cc:	89 87       	std	Y+9, r24	; 0x09
	time.hour = I2C_ReadAck() & 0x3F;
     6ce:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_ReadAck>
     6d2:	8f 73       	andi	r24, 0x3F	; 63
     6d4:	8a 87       	std	Y+10, r24	; 0x0a
	time.day = I2C_ReadAck() & 0x3F;
     6d6:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_ReadAck>
     6da:	8f 73       	andi	r24, 0x3F	; 63
     6dc:	8b 87       	std	Y+11, r24	; 0x0b
	time.month = I2C_ReadAck() & 0x1F;
     6de:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_ReadAck>
     6e2:	8f 71       	andi	r24, 0x1F	; 31
     6e4:	8c 87       	std	Y+12, r24	; 0x0c
	time.year = 2000 + I2C_ReadNack();
     6e6:	0e 94 82 00 	call	0x104	; 0x104 <I2C_ReadNack>
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	80 53       	subi	r24, 0x30	; 48
     6ee:	98 4f       	sbci	r25, 0xF8	; 248
     6f0:	9e 87       	std	Y+14, r25	; 0x0e
     6f2:	8d 87       	std	Y+13, r24	; 0x0d

	I2C_Stop();
     6f4:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>
	return time;
     6f8:	87 e0       	ldi	r24, 0x07	; 7
     6fa:	fe 01       	movw	r30, r28
     6fc:	38 96       	adiw	r30, 0x08	; 8
     6fe:	de 01       	movw	r26, r28
     700:	11 96       	adiw	r26, 0x01	; 1
     702:	01 90       	ld	r0, Z+
     704:	0d 92       	st	X+, r0
     706:	8a 95       	dec	r24
     708:	e1 f7       	brne	.-8      	; 0x702 <RTC_GetTime+0x76>
     70a:	29 81       	ldd	r18, Y+1	; 0x01
     70c:	3a 81       	ldd	r19, Y+2	; 0x02
     70e:	4b 81       	ldd	r20, Y+3	; 0x03
     710:	5c 81       	ldd	r21, Y+4	; 0x04
     712:	6d 81       	ldd	r22, Y+5	; 0x05
     714:	7e 81       	ldd	r23, Y+6	; 0x06
}
     716:	8f 81       	ldd	r24, Y+7	; 0x07
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	2e 96       	adiw	r28, 0x0e	; 14
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <__divmodhi4>:
     72c:	97 fb       	bst	r25, 7
     72e:	07 2e       	mov	r0, r23
     730:	16 f4       	brtc	.+4      	; 0x736 <__divmodhi4+0xa>
     732:	00 94       	com	r0
     734:	07 d0       	rcall	.+14     	; 0x744 <__divmodhi4_neg1>
     736:	77 fd       	sbrc	r23, 7
     738:	09 d0       	rcall	.+18     	; 0x74c <__divmodhi4_neg2>
     73a:	0e 94 aa 03 	call	0x754	; 0x754 <__udivmodhi4>
     73e:	07 fc       	sbrc	r0, 7
     740:	05 d0       	rcall	.+10     	; 0x74c <__divmodhi4_neg2>
     742:	3e f4       	brtc	.+14     	; 0x752 <__divmodhi4_exit>

00000744 <__divmodhi4_neg1>:
     744:	90 95       	com	r25
     746:	81 95       	neg	r24
     748:	9f 4f       	sbci	r25, 0xFF	; 255
     74a:	08 95       	ret

0000074c <__divmodhi4_neg2>:
     74c:	70 95       	com	r23
     74e:	61 95       	neg	r22
     750:	7f 4f       	sbci	r23, 0xFF	; 255

00000752 <__divmodhi4_exit>:
     752:	08 95       	ret

00000754 <__udivmodhi4>:
     754:	aa 1b       	sub	r26, r26
     756:	bb 1b       	sub	r27, r27
     758:	51 e1       	ldi	r21, 0x11	; 17
     75a:	07 c0       	rjmp	.+14     	; 0x76a <__udivmodhi4_ep>

0000075c <__udivmodhi4_loop>:
     75c:	aa 1f       	adc	r26, r26
     75e:	bb 1f       	adc	r27, r27
     760:	a6 17       	cp	r26, r22
     762:	b7 07       	cpc	r27, r23
     764:	10 f0       	brcs	.+4      	; 0x76a <__udivmodhi4_ep>
     766:	a6 1b       	sub	r26, r22
     768:	b7 0b       	sbc	r27, r23

0000076a <__udivmodhi4_ep>:
     76a:	88 1f       	adc	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	5a 95       	dec	r21
     770:	a9 f7       	brne	.-22     	; 0x75c <__udivmodhi4_loop>
     772:	80 95       	com	r24
     774:	90 95       	com	r25
     776:	bc 01       	movw	r22, r24
     778:	cd 01       	movw	r24, r26
     77a:	08 95       	ret

0000077c <sprintf>:
     77c:	ae e0       	ldi	r26, 0x0E	; 14
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e4 ec       	ldi	r30, 0xC4	; 196
     782:	f3 e0       	ldi	r31, 0x03	; 3
     784:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__prologue_saves__+0x1c>
     788:	0d 89       	ldd	r16, Y+21	; 0x15
     78a:	1e 89       	ldd	r17, Y+22	; 0x16
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	8c 83       	std	Y+4, r24	; 0x04
     790:	1a 83       	std	Y+2, r17	; 0x02
     792:	09 83       	std	Y+1, r16	; 0x01
     794:	8f ef       	ldi	r24, 0xFF	; 255
     796:	9f e7       	ldi	r25, 0x7F	; 127
     798:	9e 83       	std	Y+6, r25	; 0x06
     79a:	8d 83       	std	Y+5, r24	; 0x05
     79c:	ae 01       	movw	r20, r28
     79e:	47 5e       	subi	r20, 0xE7	; 231
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	6f 89       	ldd	r22, Y+23	; 0x17
     7a4:	78 8d       	ldd	r23, Y+24	; 0x18
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <vfprintf>
     7ae:	ef 81       	ldd	r30, Y+7	; 0x07
     7b0:	f8 85       	ldd	r31, Y+8	; 0x08
     7b2:	e0 0f       	add	r30, r16
     7b4:	f1 1f       	adc	r31, r17
     7b6:	10 82       	st	Z, r1
     7b8:	2e 96       	adiw	r28, 0x0e	; 14
     7ba:	e4 e0       	ldi	r30, 0x04	; 4
     7bc:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__epilogue_restores__+0x1c>

000007c0 <sscanf>:
     7c0:	ae e0       	ldi	r26, 0x0E	; 14
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e6 ee       	ldi	r30, 0xE6	; 230
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__prologue_saves__+0x20>
     7cc:	85 e0       	ldi	r24, 0x05	; 5
     7ce:	8c 83       	std	Y+4, r24	; 0x04
     7d0:	8b 89       	ldd	r24, Y+19	; 0x13
     7d2:	9c 89       	ldd	r25, Y+20	; 0x14
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	ae 01       	movw	r20, r28
     7da:	49 5e       	subi	r20, 0xE9	; 233
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	6d 89       	ldd	r22, Y+21	; 0x15
     7e0:	7e 89       	ldd	r23, Y+22	; 0x16
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 76 07 	call	0xeec	; 0xeec <vfscanf>
     7ea:	2e 96       	adiw	r28, 0x0e	; 14
     7ec:	e2 e0       	ldi	r30, 0x02	; 2
     7ee:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__epilogue_restores__+0x20>

000007f2 <vfprintf>:
     7f2:	ab e0       	ldi	r26, 0x0B	; 11
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	ef ef       	ldi	r30, 0xFF	; 255
     7f8:	f3 e0       	ldi	r31, 0x03	; 3
     7fa:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__prologue_saves__>
     7fe:	6c 01       	movw	r12, r24
     800:	7b 01       	movw	r14, r22
     802:	8a 01       	movw	r16, r20
     804:	fc 01       	movw	r30, r24
     806:	17 82       	std	Z+7, r1	; 0x07
     808:	16 82       	std	Z+6, r1	; 0x06
     80a:	83 81       	ldd	r24, Z+3	; 0x03
     80c:	81 ff       	sbrs	r24, 1
     80e:	cc c1       	rjmp	.+920    	; 0xba8 <__stack+0x2a9>
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	3c 01       	movw	r6, r24
     816:	f6 01       	movw	r30, r12
     818:	93 81       	ldd	r25, Z+3	; 0x03
     81a:	f7 01       	movw	r30, r14
     81c:	93 fd       	sbrc	r25, 3
     81e:	85 91       	lpm	r24, Z+
     820:	93 ff       	sbrs	r25, 3
     822:	81 91       	ld	r24, Z+
     824:	7f 01       	movw	r14, r30
     826:	88 23       	and	r24, r24
     828:	09 f4       	brne	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     82a:	ba c1       	rjmp	.+884    	; 0xba0 <__stack+0x2a1>
     82c:	85 32       	cpi	r24, 0x25	; 37
     82e:	39 f4       	brne	.+14     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     830:	93 fd       	sbrc	r25, 3
     832:	85 91       	lpm	r24, Z+
     834:	93 ff       	sbrs	r25, 3
     836:	81 91       	ld	r24, Z+
     838:	7f 01       	movw	r14, r30
     83a:	85 32       	cpi	r24, 0x25	; 37
     83c:	29 f4       	brne	.+10     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     83e:	b6 01       	movw	r22, r12
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     846:	e7 cf       	rjmp	.-50     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     848:	91 2c       	mov	r9, r1
     84a:	21 2c       	mov	r2, r1
     84c:	31 2c       	mov	r3, r1
     84e:	ff e1       	ldi	r31, 0x1F	; 31
     850:	f3 15       	cp	r31, r3
     852:	d8 f0       	brcs	.+54     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     854:	8b 32       	cpi	r24, 0x2B	; 43
     856:	79 f0       	breq	.+30     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     858:	38 f4       	brcc	.+14     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     85a:	80 32       	cpi	r24, 0x20	; 32
     85c:	79 f0       	breq	.+30     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     85e:	83 32       	cpi	r24, 0x23	; 35
     860:	a1 f4       	brne	.+40     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     862:	23 2d       	mov	r18, r3
     864:	20 61       	ori	r18, 0x10	; 16
     866:	1d c0       	rjmp	.+58     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     868:	8d 32       	cpi	r24, 0x2D	; 45
     86a:	61 f0       	breq	.+24     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     86c:	80 33       	cpi	r24, 0x30	; 48
     86e:	69 f4       	brne	.+26     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     870:	23 2d       	mov	r18, r3
     872:	21 60       	ori	r18, 0x01	; 1
     874:	16 c0       	rjmp	.+44     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     876:	83 2d       	mov	r24, r3
     878:	82 60       	ori	r24, 0x02	; 2
     87a:	38 2e       	mov	r3, r24
     87c:	e3 2d       	mov	r30, r3
     87e:	e4 60       	ori	r30, 0x04	; 4
     880:	3e 2e       	mov	r3, r30
     882:	2a c0       	rjmp	.+84     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     884:	f3 2d       	mov	r31, r3
     886:	f8 60       	ori	r31, 0x08	; 8
     888:	1d c0       	rjmp	.+58     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     88a:	37 fc       	sbrc	r3, 7
     88c:	2d c0       	rjmp	.+90     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     88e:	20 ed       	ldi	r18, 0xD0	; 208
     890:	28 0f       	add	r18, r24
     892:	2a 30       	cpi	r18, 0x0A	; 10
     894:	40 f0       	brcs	.+16     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     896:	8e 32       	cpi	r24, 0x2E	; 46
     898:	b9 f4       	brne	.+46     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
     89a:	36 fc       	sbrc	r3, 6
     89c:	81 c1       	rjmp	.+770    	; 0xba0 <__stack+0x2a1>
     89e:	23 2d       	mov	r18, r3
     8a0:	20 64       	ori	r18, 0x40	; 64
     8a2:	32 2e       	mov	r3, r18
     8a4:	19 c0       	rjmp	.+50     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     8a6:	36 fe       	sbrs	r3, 6
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     8aa:	8a e0       	ldi	r24, 0x0A	; 10
     8ac:	98 9e       	mul	r9, r24
     8ae:	20 0d       	add	r18, r0
     8b0:	11 24       	eor	r1, r1
     8b2:	92 2e       	mov	r9, r18
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     8b6:	ea e0       	ldi	r30, 0x0A	; 10
     8b8:	2e 9e       	mul	r2, r30
     8ba:	20 0d       	add	r18, r0
     8bc:	11 24       	eor	r1, r1
     8be:	22 2e       	mov	r2, r18
     8c0:	f3 2d       	mov	r31, r3
     8c2:	f0 62       	ori	r31, 0x20	; 32
     8c4:	3f 2e       	mov	r3, r31
     8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     8c8:	8c 36       	cpi	r24, 0x6C	; 108
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
     8cc:	83 2d       	mov	r24, r3
     8ce:	80 68       	ori	r24, 0x80	; 128
     8d0:	38 2e       	mov	r3, r24
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     8d4:	88 36       	cpi	r24, 0x68	; 104
     8d6:	41 f4       	brne	.+16     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     8d8:	f7 01       	movw	r30, r14
     8da:	93 fd       	sbrc	r25, 3
     8dc:	85 91       	lpm	r24, Z+
     8de:	93 ff       	sbrs	r25, 3
     8e0:	81 91       	ld	r24, Z+
     8e2:	7f 01       	movw	r14, r30
     8e4:	81 11       	cpse	r24, r1
     8e6:	b3 cf       	rjmp	.-154    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     8e8:	98 2f       	mov	r25, r24
     8ea:	9f 7d       	andi	r25, 0xDF	; 223
     8ec:	95 54       	subi	r25, 0x45	; 69
     8ee:	93 30       	cpi	r25, 0x03	; 3
     8f0:	28 f4       	brcc	.+10     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8f2:	0c 5f       	subi	r16, 0xFC	; 252
     8f4:	1f 4f       	sbci	r17, 0xFF	; 255
     8f6:	9f e3       	ldi	r25, 0x3F	; 63
     8f8:	99 83       	std	Y+1, r25	; 0x01
     8fa:	0d c0       	rjmp	.+26     	; 0x916 <__stack+0x17>
     8fc:	83 36       	cpi	r24, 0x63	; 99
     8fe:	31 f0       	breq	.+12     	; 0x90c <__stack+0xd>
     900:	83 37       	cpi	r24, 0x73	; 115
     902:	71 f0       	breq	.+28     	; 0x920 <__stack+0x21>
     904:	83 35       	cpi	r24, 0x53	; 83
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xb>
     908:	59 c0       	rjmp	.+178    	; 0x9bc <__stack+0xbd>
     90a:	21 c0       	rjmp	.+66     	; 0x94e <__stack+0x4f>
     90c:	f8 01       	movw	r30, r16
     90e:	80 81       	ld	r24, Z
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	0e 5f       	subi	r16, 0xFE	; 254
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	88 24       	eor	r8, r8
     918:	83 94       	inc	r8
     91a:	91 2c       	mov	r9, r1
     91c:	53 01       	movw	r10, r6
     91e:	13 c0       	rjmp	.+38     	; 0x946 <__stack+0x47>
     920:	28 01       	movw	r4, r16
     922:	f2 e0       	ldi	r31, 0x02	; 2
     924:	4f 0e       	add	r4, r31
     926:	51 1c       	adc	r5, r1
     928:	f8 01       	movw	r30, r16
     92a:	a0 80       	ld	r10, Z
     92c:	b1 80       	ldd	r11, Z+1	; 0x01
     92e:	36 fe       	sbrs	r3, 6
     930:	03 c0       	rjmp	.+6      	; 0x938 <__stack+0x39>
     932:	69 2d       	mov	r22, r9
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0x3d>
     938:	6f ef       	ldi	r22, 0xFF	; 255
     93a:	7f ef       	ldi	r23, 0xFF	; 255
     93c:	c5 01       	movw	r24, r10
     93e:	0e 94 a6 08 	call	0x114c	; 0x114c <strnlen>
     942:	4c 01       	movw	r8, r24
     944:	82 01       	movw	r16, r4
     946:	f3 2d       	mov	r31, r3
     948:	ff 77       	andi	r31, 0x7F	; 127
     94a:	3f 2e       	mov	r3, r31
     94c:	16 c0       	rjmp	.+44     	; 0x97a <__stack+0x7b>
     94e:	28 01       	movw	r4, r16
     950:	22 e0       	ldi	r18, 0x02	; 2
     952:	42 0e       	add	r4, r18
     954:	51 1c       	adc	r5, r1
     956:	f8 01       	movw	r30, r16
     958:	a0 80       	ld	r10, Z
     95a:	b1 80       	ldd	r11, Z+1	; 0x01
     95c:	36 fe       	sbrs	r3, 6
     95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
     960:	69 2d       	mov	r22, r9
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	02 c0       	rjmp	.+4      	; 0x96a <__stack+0x6b>
     966:	6f ef       	ldi	r22, 0xFF	; 255
     968:	7f ef       	ldi	r23, 0xFF	; 255
     96a:	c5 01       	movw	r24, r10
     96c:	0e 94 9b 08 	call	0x1136	; 0x1136 <strnlen_P>
     970:	4c 01       	movw	r8, r24
     972:	f3 2d       	mov	r31, r3
     974:	f0 68       	ori	r31, 0x80	; 128
     976:	3f 2e       	mov	r3, r31
     978:	82 01       	movw	r16, r4
     97a:	33 fc       	sbrc	r3, 3
     97c:	1b c0       	rjmp	.+54     	; 0x9b4 <__stack+0xb5>
     97e:	82 2d       	mov	r24, r2
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	88 16       	cp	r8, r24
     984:	99 06       	cpc	r9, r25
     986:	b0 f4       	brcc	.+44     	; 0x9b4 <__stack+0xb5>
     988:	b6 01       	movw	r22, r12
     98a:	80 e2       	ldi	r24, 0x20	; 32
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     992:	2a 94       	dec	r2
     994:	f4 cf       	rjmp	.-24     	; 0x97e <__stack+0x7f>
     996:	f5 01       	movw	r30, r10
     998:	37 fc       	sbrc	r3, 7
     99a:	85 91       	lpm	r24, Z+
     99c:	37 fe       	sbrs	r3, 7
     99e:	81 91       	ld	r24, Z+
     9a0:	5f 01       	movw	r10, r30
     9a2:	b6 01       	movw	r22, r12
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     9aa:	21 10       	cpse	r2, r1
     9ac:	2a 94       	dec	r2
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	82 1a       	sub	r8, r18
     9b2:	91 08       	sbc	r9, r1
     9b4:	81 14       	cp	r8, r1
     9b6:	91 04       	cpc	r9, r1
     9b8:	71 f7       	brne	.-36     	; 0x996 <__stack+0x97>
     9ba:	e8 c0       	rjmp	.+464    	; 0xb8c <__stack+0x28d>
     9bc:	84 36       	cpi	r24, 0x64	; 100
     9be:	11 f0       	breq	.+4      	; 0x9c4 <__stack+0xc5>
     9c0:	89 36       	cpi	r24, 0x69	; 105
     9c2:	41 f5       	brne	.+80     	; 0xa14 <__stack+0x115>
     9c4:	f8 01       	movw	r30, r16
     9c6:	37 fe       	sbrs	r3, 7
     9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <__stack+0xd9>
     9ca:	60 81       	ld	r22, Z
     9cc:	71 81       	ldd	r23, Z+1	; 0x01
     9ce:	82 81       	ldd	r24, Z+2	; 0x02
     9d0:	93 81       	ldd	r25, Z+3	; 0x03
     9d2:	0c 5f       	subi	r16, 0xFC	; 252
     9d4:	1f 4f       	sbci	r17, 0xFF	; 255
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <__stack+0xe9>
     9d8:	60 81       	ld	r22, Z
     9da:	71 81       	ldd	r23, Z+1	; 0x01
     9dc:	07 2e       	mov	r0, r23
     9de:	00 0c       	add	r0, r0
     9e0:	88 0b       	sbc	r24, r24
     9e2:	99 0b       	sbc	r25, r25
     9e4:	0e 5f       	subi	r16, 0xFE	; 254
     9e6:	1f 4f       	sbci	r17, 0xFF	; 255
     9e8:	f3 2d       	mov	r31, r3
     9ea:	ff 76       	andi	r31, 0x6F	; 111
     9ec:	3f 2e       	mov	r3, r31
     9ee:	97 ff       	sbrs	r25, 7
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__stack+0x105>
     9f2:	90 95       	com	r25
     9f4:	80 95       	com	r24
     9f6:	70 95       	com	r23
     9f8:	61 95       	neg	r22
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	8f 4f       	sbci	r24, 0xFF	; 255
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
     a00:	f0 68       	ori	r31, 0x80	; 128
     a02:	3f 2e       	mov	r3, r31
     a04:	2a e0       	ldi	r18, 0x0A	; 10
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	a3 01       	movw	r20, r6
     a0a:	0e 94 44 09 	call	0x1288	; 0x1288 <__ultoa_invert>
     a0e:	88 2e       	mov	r8, r24
     a10:	86 18       	sub	r8, r6
     a12:	45 c0       	rjmp	.+138    	; 0xa9e <__stack+0x19f>
     a14:	85 37       	cpi	r24, 0x75	; 117
     a16:	31 f4       	brne	.+12     	; 0xa24 <__stack+0x125>
     a18:	23 2d       	mov	r18, r3
     a1a:	2f 7e       	andi	r18, 0xEF	; 239
     a1c:	b2 2e       	mov	r11, r18
     a1e:	2a e0       	ldi	r18, 0x0A	; 10
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	25 c0       	rjmp	.+74     	; 0xa6e <__stack+0x16f>
     a24:	93 2d       	mov	r25, r3
     a26:	99 7f       	andi	r25, 0xF9	; 249
     a28:	b9 2e       	mov	r11, r25
     a2a:	8f 36       	cpi	r24, 0x6F	; 111
     a2c:	c1 f0       	breq	.+48     	; 0xa5e <__stack+0x15f>
     a2e:	18 f4       	brcc	.+6      	; 0xa36 <__stack+0x137>
     a30:	88 35       	cpi	r24, 0x58	; 88
     a32:	79 f0       	breq	.+30     	; 0xa52 <__stack+0x153>
     a34:	b5 c0       	rjmp	.+362    	; 0xba0 <__stack+0x2a1>
     a36:	80 37       	cpi	r24, 0x70	; 112
     a38:	19 f0       	breq	.+6      	; 0xa40 <__stack+0x141>
     a3a:	88 37       	cpi	r24, 0x78	; 120
     a3c:	21 f0       	breq	.+8      	; 0xa46 <__stack+0x147>
     a3e:	b0 c0       	rjmp	.+352    	; 0xba0 <__stack+0x2a1>
     a40:	e9 2f       	mov	r30, r25
     a42:	e0 61       	ori	r30, 0x10	; 16
     a44:	be 2e       	mov	r11, r30
     a46:	b4 fe       	sbrs	r11, 4
     a48:	0d c0       	rjmp	.+26     	; 0xa64 <__stack+0x165>
     a4a:	fb 2d       	mov	r31, r11
     a4c:	f4 60       	ori	r31, 0x04	; 4
     a4e:	bf 2e       	mov	r11, r31
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <__stack+0x165>
     a52:	34 fe       	sbrs	r3, 4
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <__stack+0x16b>
     a56:	29 2f       	mov	r18, r25
     a58:	26 60       	ori	r18, 0x06	; 6
     a5a:	b2 2e       	mov	r11, r18
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <__stack+0x16b>
     a5e:	28 e0       	ldi	r18, 0x08	; 8
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <__stack+0x16f>
     a64:	20 e1       	ldi	r18, 0x10	; 16
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
     a6a:	20 e1       	ldi	r18, 0x10	; 16
     a6c:	32 e0       	ldi	r19, 0x02	; 2
     a6e:	f8 01       	movw	r30, r16
     a70:	b7 fe       	sbrs	r11, 7
     a72:	07 c0       	rjmp	.+14     	; 0xa82 <__stack+0x183>
     a74:	60 81       	ld	r22, Z
     a76:	71 81       	ldd	r23, Z+1	; 0x01
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	0c 5f       	subi	r16, 0xFC	; 252
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <__stack+0x18f>
     a82:	60 81       	ld	r22, Z
     a84:	71 81       	ldd	r23, Z+1	; 0x01
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 5f       	subi	r16, 0xFE	; 254
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	a3 01       	movw	r20, r6
     a90:	0e 94 44 09 	call	0x1288	; 0x1288 <__ultoa_invert>
     a94:	88 2e       	mov	r8, r24
     a96:	86 18       	sub	r8, r6
     a98:	fb 2d       	mov	r31, r11
     a9a:	ff 77       	andi	r31, 0x7F	; 127
     a9c:	3f 2e       	mov	r3, r31
     a9e:	36 fe       	sbrs	r3, 6
     aa0:	0d c0       	rjmp	.+26     	; 0xabc <__stack+0x1bd>
     aa2:	23 2d       	mov	r18, r3
     aa4:	2e 7f       	andi	r18, 0xFE	; 254
     aa6:	a2 2e       	mov	r10, r18
     aa8:	89 14       	cp	r8, r9
     aaa:	58 f4       	brcc	.+22     	; 0xac2 <__stack+0x1c3>
     aac:	34 fe       	sbrs	r3, 4
     aae:	0b c0       	rjmp	.+22     	; 0xac6 <__stack+0x1c7>
     ab0:	32 fc       	sbrc	r3, 2
     ab2:	09 c0       	rjmp	.+18     	; 0xac6 <__stack+0x1c7>
     ab4:	83 2d       	mov	r24, r3
     ab6:	8e 7e       	andi	r24, 0xEE	; 238
     ab8:	a8 2e       	mov	r10, r24
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <__stack+0x1c7>
     abc:	b8 2c       	mov	r11, r8
     abe:	a3 2c       	mov	r10, r3
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__stack+0x1c9>
     ac2:	b8 2c       	mov	r11, r8
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <__stack+0x1c9>
     ac6:	b9 2c       	mov	r11, r9
     ac8:	a4 fe       	sbrs	r10, 4
     aca:	0f c0       	rjmp	.+30     	; 0xaea <__stack+0x1eb>
     acc:	fe 01       	movw	r30, r28
     ace:	e8 0d       	add	r30, r8
     ad0:	f1 1d       	adc	r31, r1
     ad2:	80 81       	ld	r24, Z
     ad4:	80 33       	cpi	r24, 0x30	; 48
     ad6:	21 f4       	brne	.+8      	; 0xae0 <__stack+0x1e1>
     ad8:	9a 2d       	mov	r25, r10
     ada:	99 7e       	andi	r25, 0xE9	; 233
     adc:	a9 2e       	mov	r10, r25
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__stack+0x1f3>
     ae0:	a2 fe       	sbrs	r10, 2
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <__stack+0x1f1>
     ae4:	b3 94       	inc	r11
     ae6:	b3 94       	inc	r11
     ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <__stack+0x1f3>
     aea:	8a 2d       	mov	r24, r10
     aec:	86 78       	andi	r24, 0x86	; 134
     aee:	09 f0       	breq	.+2      	; 0xaf2 <__stack+0x1f3>
     af0:	b3 94       	inc	r11
     af2:	a3 fc       	sbrc	r10, 3
     af4:	11 c0       	rjmp	.+34     	; 0xb18 <__stack+0x219>
     af6:	a0 fe       	sbrs	r10, 0
     af8:	06 c0       	rjmp	.+12     	; 0xb06 <__stack+0x207>
     afa:	b2 14       	cp	r11, r2
     afc:	88 f4       	brcc	.+34     	; 0xb20 <__stack+0x221>
     afe:	28 0c       	add	r2, r8
     b00:	92 2c       	mov	r9, r2
     b02:	9b 18       	sub	r9, r11
     b04:	0e c0       	rjmp	.+28     	; 0xb22 <__stack+0x223>
     b06:	b2 14       	cp	r11, r2
     b08:	60 f4       	brcc	.+24     	; 0xb22 <__stack+0x223>
     b0a:	b6 01       	movw	r22, r12
     b0c:	80 e2       	ldi	r24, 0x20	; 32
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     b14:	b3 94       	inc	r11
     b16:	f7 cf       	rjmp	.-18     	; 0xb06 <__stack+0x207>
     b18:	b2 14       	cp	r11, r2
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__stack+0x223>
     b1c:	2b 18       	sub	r2, r11
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <__stack+0x225>
     b20:	98 2c       	mov	r9, r8
     b22:	21 2c       	mov	r2, r1
     b24:	a4 fe       	sbrs	r10, 4
     b26:	10 c0       	rjmp	.+32     	; 0xb48 <__stack+0x249>
     b28:	b6 01       	movw	r22, r12
     b2a:	80 e3       	ldi	r24, 0x30	; 48
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     b32:	a2 fe       	sbrs	r10, 2
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__stack+0x265>
     b36:	a1 fc       	sbrc	r10, 1
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <__stack+0x241>
     b3a:	88 e7       	ldi	r24, 0x78	; 120
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__stack+0x245>
     b40:	88 e5       	ldi	r24, 0x58	; 88
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	b6 01       	movw	r22, r12
     b46:	0c c0       	rjmp	.+24     	; 0xb60 <__stack+0x261>
     b48:	8a 2d       	mov	r24, r10
     b4a:	86 78       	andi	r24, 0x86	; 134
     b4c:	59 f0       	breq	.+22     	; 0xb64 <__stack+0x265>
     b4e:	a1 fe       	sbrs	r10, 1
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <__stack+0x257>
     b52:	8b e2       	ldi	r24, 0x2B	; 43
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <__stack+0x259>
     b56:	80 e2       	ldi	r24, 0x20	; 32
     b58:	a7 fc       	sbrc	r10, 7
     b5a:	8d e2       	ldi	r24, 0x2D	; 45
     b5c:	b6 01       	movw	r22, r12
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     b64:	89 14       	cp	r8, r9
     b66:	38 f4       	brcc	.+14     	; 0xb76 <__stack+0x277>
     b68:	b6 01       	movw	r22, r12
     b6a:	80 e3       	ldi	r24, 0x30	; 48
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     b72:	9a 94       	dec	r9
     b74:	f7 cf       	rjmp	.-18     	; 0xb64 <__stack+0x265>
     b76:	8a 94       	dec	r8
     b78:	f3 01       	movw	r30, r6
     b7a:	e8 0d       	add	r30, r8
     b7c:	f1 1d       	adc	r31, r1
     b7e:	80 81       	ld	r24, Z
     b80:	b6 01       	movw	r22, r12
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     b88:	81 10       	cpse	r8, r1
     b8a:	f5 cf       	rjmp	.-22     	; 0xb76 <__stack+0x277>
     b8c:	22 20       	and	r2, r2
     b8e:	09 f4       	brne	.+2      	; 0xb92 <__stack+0x293>
     b90:	42 ce       	rjmp	.-892    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     b92:	b6 01       	movw	r22, r12
     b94:	80 e2       	ldi	r24, 0x20	; 32
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 ef 08 	call	0x11de	; 0x11de <fputc>
     b9c:	2a 94       	dec	r2
     b9e:	f6 cf       	rjmp	.-20     	; 0xb8c <__stack+0x28d>
     ba0:	f6 01       	movw	r30, r12
     ba2:	86 81       	ldd	r24, Z+6	; 0x06
     ba4:	97 81       	ldd	r25, Z+7	; 0x07
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <__stack+0x2ad>
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	9f ef       	ldi	r25, 0xFF	; 255
     bac:	2b 96       	adiw	r28, 0x0b	; 11
     bae:	e2 e1       	ldi	r30, 0x12	; 18
     bb0:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__epilogue_restores__>

00000bb4 <putval>:
     bb4:	20 fd       	sbrc	r18, 0
     bb6:	09 c0       	rjmp	.+18     	; 0xbca <putval+0x16>
     bb8:	fc 01       	movw	r30, r24
     bba:	23 fd       	sbrc	r18, 3
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <putval+0x14>
     bbe:	22 ff       	sbrs	r18, 2
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <putval+0x12>
     bc2:	73 83       	std	Z+3, r23	; 0x03
     bc4:	62 83       	std	Z+2, r22	; 0x02
     bc6:	51 83       	std	Z+1, r21	; 0x01
     bc8:	40 83       	st	Z, r20
     bca:	08 95       	ret

00000bcc <mulacc>:
     bcc:	44 fd       	sbrc	r20, 4
     bce:	17 c0       	rjmp	.+46     	; 0xbfe <mulacc+0x32>
     bd0:	46 fd       	sbrc	r20, 6
     bd2:	17 c0       	rjmp	.+46     	; 0xc02 <mulacc+0x36>
     bd4:	ab 01       	movw	r20, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	da 01       	movw	r26, r20
     bda:	fb 01       	movw	r30, r22
     bdc:	aa 0f       	add	r26, r26
     bde:	bb 1f       	adc	r27, r27
     be0:	ee 1f       	adc	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	10 94       	com	r1
     be6:	d1 f7       	brne	.-12     	; 0xbdc <mulacc+0x10>
     be8:	4a 0f       	add	r20, r26
     bea:	5b 1f       	adc	r21, r27
     bec:	6e 1f       	adc	r22, r30
     bee:	7f 1f       	adc	r23, r31
     bf0:	cb 01       	movw	r24, r22
     bf2:	ba 01       	movw	r22, r20
     bf4:	66 0f       	add	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	88 1f       	adc	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	09 c0       	rjmp	.+18     	; 0xc10 <mulacc+0x44>
     bfe:	33 e0       	ldi	r19, 0x03	; 3
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <mulacc+0x38>
     c02:	34 e0       	ldi	r19, 0x04	; 4
     c04:	66 0f       	add	r22, r22
     c06:	77 1f       	adc	r23, r23
     c08:	88 1f       	adc	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	31 50       	subi	r19, 0x01	; 1
     c0e:	d1 f7       	brne	.-12     	; 0xc04 <mulacc+0x38>
     c10:	62 0f       	add	r22, r18
     c12:	71 1d       	adc	r23, r1
     c14:	81 1d       	adc	r24, r1
     c16:	91 1d       	adc	r25, r1
     c18:	08 95       	ret

00000c1a <skip_spaces>:
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	8c 01       	movw	r16, r24
     c24:	c8 01       	movw	r24, r16
     c26:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     c2a:	ec 01       	movw	r28, r24
     c2c:	97 fd       	sbrc	r25, 7
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <skip_spaces+0x26>
     c30:	0e 94 87 08 	call	0x110e	; 0x110e <isspace>
     c34:	89 2b       	or	r24, r25
     c36:	b1 f7       	brne	.-20     	; 0xc24 <skip_spaces+0xa>
     c38:	b8 01       	movw	r22, r16
     c3a:	ce 01       	movw	r24, r28
     c3c:	0e 94 2b 09 	call	0x1256	; 0x1256 <ungetc>
     c40:	ce 01       	movw	r24, r28
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <conv_int>:
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	8c 01       	movw	r16, r24
     c62:	d6 2f       	mov	r29, r22
     c64:	7a 01       	movw	r14, r20
     c66:	b2 2e       	mov	r11, r18
     c68:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     c6c:	9c 01       	movw	r18, r24
     c6e:	33 27       	eor	r19, r19
     c70:	2b 32       	cpi	r18, 0x2B	; 43
     c72:	31 05       	cpc	r19, r1
     c74:	31 f0       	breq	.+12     	; 0xc82 <conv_int+0x36>
     c76:	2d 32       	cpi	r18, 0x2D	; 45
     c78:	31 05       	cpc	r19, r1
     c7a:	61 f4       	brne	.+24     	; 0xc94 <conv_int+0x48>
     c7c:	8b 2d       	mov	r24, r11
     c7e:	80 68       	ori	r24, 0x80	; 128
     c80:	b8 2e       	mov	r11, r24
     c82:	d1 50       	subi	r29, 0x01	; 1
     c84:	11 f4       	brne	.+4      	; 0xc8a <conv_int+0x3e>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	68 c0       	rjmp	.+208    	; 0xd5a <conv_int+0x10e>
     c8a:	c8 01       	movw	r24, r16
     c8c:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     c90:	97 fd       	sbrc	r25, 7
     c92:	f9 cf       	rjmp	.-14     	; 0xc86 <conv_int+0x3a>
     c94:	cb 2d       	mov	r28, r11
     c96:	cd 7f       	andi	r28, 0xFD	; 253
     c98:	2b 2d       	mov	r18, r11
     c9a:	20 73       	andi	r18, 0x30	; 48
     c9c:	09 f5       	brne	.+66     	; 0xce0 <conv_int+0x94>
     c9e:	80 33       	cpi	r24, 0x30	; 48
     ca0:	f9 f4       	brne	.+62     	; 0xce0 <conv_int+0x94>
     ca2:	aa 24       	eor	r10, r10
     ca4:	aa 94       	dec	r10
     ca6:	ad 0e       	add	r10, r29
     ca8:	09 f4       	brne	.+2      	; 0xcac <conv_int+0x60>
     caa:	43 c0       	rjmp	.+134    	; 0xd32 <conv_int+0xe6>
     cac:	c8 01       	movw	r24, r16
     cae:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     cb2:	97 fd       	sbrc	r25, 7
     cb4:	3e c0       	rjmp	.+124    	; 0xd32 <conv_int+0xe6>
     cb6:	9c 01       	movw	r18, r24
     cb8:	2f 7d       	andi	r18, 0xDF	; 223
     cba:	33 27       	eor	r19, r19
     cbc:	28 35       	cpi	r18, 0x58	; 88
     cbe:	31 05       	cpc	r19, r1
     cc0:	49 f4       	brne	.+18     	; 0xcd4 <conv_int+0x88>
     cc2:	c2 64       	ori	r28, 0x42	; 66
     cc4:	d2 50       	subi	r29, 0x02	; 2
     cc6:	a9 f1       	breq	.+106    	; 0xd32 <conv_int+0xe6>
     cc8:	c8 01       	movw	r24, r16
     cca:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     cce:	97 ff       	sbrs	r25, 7
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <conv_int+0x94>
     cd2:	2f c0       	rjmp	.+94     	; 0xd32 <conv_int+0xe6>
     cd4:	b6 fe       	sbrs	r11, 6
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <conv_int+0x90>
     cd8:	c2 60       	ori	r28, 0x02	; 2
     cda:	01 c0       	rjmp	.+2      	; 0xcde <conv_int+0x92>
     cdc:	c2 61       	ori	r28, 0x12	; 18
     cde:	da 2d       	mov	r29, r10
     ce0:	81 2c       	mov	r8, r1
     ce2:	91 2c       	mov	r9, r1
     ce4:	54 01       	movw	r10, r8
     ce6:	20 ed       	ldi	r18, 0xD0	; 208
     ce8:	28 0f       	add	r18, r24
     cea:	28 30       	cpi	r18, 0x08	; 8
     cec:	80 f0       	brcs	.+32     	; 0xd0e <conv_int+0xc2>
     cee:	c4 ff       	sbrs	r28, 4
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <conv_int+0xae>
     cf2:	b8 01       	movw	r22, r16
     cf4:	0e 94 2b 09 	call	0x1256	; 0x1256 <ungetc>
     cf8:	19 c0       	rjmp	.+50     	; 0xd2c <conv_int+0xe0>
     cfa:	2a 30       	cpi	r18, 0x0A	; 10
     cfc:	40 f0       	brcs	.+16     	; 0xd0e <conv_int+0xc2>
     cfe:	c6 ff       	sbrs	r28, 6
     d00:	f8 cf       	rjmp	.-16     	; 0xcf2 <conv_int+0xa6>
     d02:	2f 7d       	andi	r18, 0xDF	; 223
     d04:	3f ee       	ldi	r19, 0xEF	; 239
     d06:	32 0f       	add	r19, r18
     d08:	36 30       	cpi	r19, 0x06	; 6
     d0a:	98 f7       	brcc	.-26     	; 0xcf2 <conv_int+0xa6>
     d0c:	27 50       	subi	r18, 0x07	; 7
     d0e:	4c 2f       	mov	r20, r28
     d10:	c5 01       	movw	r24, r10
     d12:	b4 01       	movw	r22, r8
     d14:	0e 94 e6 05 	call	0xbcc	; 0xbcc <mulacc>
     d18:	4b 01       	movw	r8, r22
     d1a:	5c 01       	movw	r10, r24
     d1c:	c2 60       	ori	r28, 0x02	; 2
     d1e:	d1 50       	subi	r29, 0x01	; 1
     d20:	59 f0       	breq	.+22     	; 0xd38 <conv_int+0xec>
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     d28:	97 ff       	sbrs	r25, 7
     d2a:	dd cf       	rjmp	.-70     	; 0xce6 <conv_int+0x9a>
     d2c:	c1 fd       	sbrc	r28, 1
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <conv_int+0xec>
     d30:	aa cf       	rjmp	.-172    	; 0xc86 <conv_int+0x3a>
     d32:	81 2c       	mov	r8, r1
     d34:	91 2c       	mov	r9, r1
     d36:	54 01       	movw	r10, r8
     d38:	c7 ff       	sbrs	r28, 7
     d3a:	08 c0       	rjmp	.+16     	; 0xd4c <conv_int+0x100>
     d3c:	b0 94       	com	r11
     d3e:	a0 94       	com	r10
     d40:	90 94       	com	r9
     d42:	80 94       	com	r8
     d44:	81 1c       	adc	r8, r1
     d46:	91 1c       	adc	r9, r1
     d48:	a1 1c       	adc	r10, r1
     d4a:	b1 1c       	adc	r11, r1
     d4c:	2c 2f       	mov	r18, r28
     d4e:	b5 01       	movw	r22, r10
     d50:	a4 01       	movw	r20, r8
     d52:	c7 01       	movw	r24, r14
     d54:	0e 94 da 05 	call	0xbb4	; 0xbb4 <putval>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	08 95       	ret

00000d70 <conv_brk>:
     d70:	a0 e2       	ldi	r26, 0x20	; 32
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ee eb       	ldi	r30, 0xBE	; 190
     d76:	f6 e0       	ldi	r31, 0x06	; 6
     d78:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__prologue_saves__+0x6>
     d7c:	5c 01       	movw	r10, r24
     d7e:	96 2e       	mov	r9, r22
     d80:	7a 01       	movw	r14, r20
     d82:	f9 01       	movw	r30, r18
     d84:	8e 01       	movw	r16, r28
     d86:	0f 5f       	subi	r16, 0xFF	; 255
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	68 01       	movw	r12, r16
     d8c:	80 e2       	ldi	r24, 0x20	; 32
     d8e:	d8 01       	movw	r26, r16
     d90:	1d 92       	st	X+, r1
     d92:	8a 95       	dec	r24
     d94:	e9 f7       	brne	.-6      	; 0xd90 <conv_brk+0x20>
     d96:	d5 01       	movw	r26, r10
     d98:	13 96       	adiw	r26, 0x03	; 3
     d9a:	8c 90       	ld	r8, X
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	61 2c       	mov	r6, r1
     da2:	71 2c       	mov	r7, r1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	83 fc       	sbrc	r8, 3
     dac:	25 91       	lpm	r18, Z+
     dae:	83 fe       	sbrs	r8, 3
     db0:	21 91       	ld	r18, Z+
     db2:	8f 01       	movw	r16, r30
     db4:	52 2e       	mov	r5, r18
     db6:	21 11       	cpse	r18, r1
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <conv_brk+0x50>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	92 c0       	rjmp	.+292    	; 0xee4 <conv_brk+0x174>
     dc0:	2e 35       	cpi	r18, 0x5E	; 94
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <conv_brk+0x58>
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	51 f1       	breq	.+84     	; 0xe1c <conv_brk+0xac>
     dc8:	43 2f       	mov	r20, r19
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	48 17       	cp	r20, r24
     dce:	59 07       	cpc	r21, r25
     dd0:	3c f4       	brge	.+14     	; 0xde0 <conv_brk+0x70>
     dd2:	2d 35       	cpi	r18, 0x5D	; 93
     dd4:	59 f1       	breq	.+86     	; 0xe2c <conv_brk+0xbc>
     dd6:	2d 32       	cpi	r18, 0x2D	; 45
     dd8:	19 f4       	brne	.+6      	; 0xde0 <conv_brk+0x70>
     dda:	77 20       	and	r7, r7
     ddc:	09 f1       	breq	.+66     	; 0xe20 <conv_brk+0xb0>
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <conv_brk+0x76>
     de0:	77 20       	and	r7, r7
     de2:	09 f4       	brne	.+2      	; 0xde6 <conv_brk+0x76>
     de4:	6a c0       	rjmp	.+212    	; 0xeba <conv_brk+0x14a>
     de6:	45 2d       	mov	r20, r5
     de8:	46 95       	lsr	r20
     dea:	46 95       	lsr	r20
     dec:	46 95       	lsr	r20
     dee:	d6 01       	movw	r26, r12
     df0:	a4 0f       	add	r26, r20
     df2:	b1 1d       	adc	r27, r1
     df4:	45 2d       	mov	r20, r5
     df6:	47 70       	andi	r20, 0x07	; 7
     df8:	8b 01       	movw	r16, r22
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <conv_brk+0x90>
     dfc:	00 0f       	add	r16, r16
     dfe:	11 1f       	adc	r17, r17
     e00:	4a 95       	dec	r20
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <conv_brk+0x8c>
     e04:	a8 01       	movw	r20, r16
     e06:	5c 91       	ld	r21, X
     e08:	45 2b       	or	r20, r21
     e0a:	4c 93       	st	X, r20
     e0c:	65 14       	cp	r6, r5
     e0e:	59 f0       	breq	.+22     	; 0xe26 <conv_brk+0xb6>
     e10:	56 14       	cp	r5, r6
     e12:	10 f4       	brcc	.+4      	; 0xe18 <conv_brk+0xa8>
     e14:	53 94       	inc	r5
     e16:	e7 cf       	rjmp	.-50     	; 0xde6 <conv_brk+0x76>
     e18:	5a 94       	dec	r5
     e1a:	e5 cf       	rjmp	.-54     	; 0xde6 <conv_brk+0x76>
     e1c:	31 e0       	ldi	r19, 0x01	; 1
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <conv_brk+0xb8>
     e20:	77 24       	eor	r7, r7
     e22:	73 94       	inc	r7
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <conv_brk+0xb8>
     e26:	71 2c       	mov	r7, r1
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	bf cf       	rjmp	.-130    	; 0xdaa <conv_brk+0x3a>
     e2c:	77 20       	and	r7, r7
     e2e:	19 f0       	breq	.+6      	; 0xe36 <conv_brk+0xc6>
     e30:	8e 81       	ldd	r24, Y+6	; 0x06
     e32:	80 62       	ori	r24, 0x20	; 32
     e34:	8e 83       	std	Y+6, r24	; 0x06
     e36:	31 11       	cpse	r19, r1
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <conv_brk+0xd0>
     e3a:	88 24       	eor	r8, r8
     e3c:	83 94       	inc	r8
     e3e:	17 c0       	rjmp	.+46     	; 0xe6e <conv_brk+0xfe>
     e40:	f6 01       	movw	r30, r12
     e42:	9e 01       	movw	r18, r28
     e44:	2f 5d       	subi	r18, 0xDF	; 223
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	80 81       	ld	r24, Z
     e4a:	80 95       	com	r24
     e4c:	81 93       	st	Z+, r24
     e4e:	2e 17       	cp	r18, r30
     e50:	3f 07       	cpc	r19, r31
     e52:	d1 f7       	brne	.-12     	; 0xe48 <conv_brk+0xd8>
     e54:	f2 cf       	rjmp	.-28     	; 0xe3a <conv_brk+0xca>
     e56:	e1 14       	cp	r14, r1
     e58:	f1 04       	cpc	r15, r1
     e5a:	29 f0       	breq	.+10     	; 0xe66 <conv_brk+0xf6>
     e5c:	d7 01       	movw	r26, r14
     e5e:	8c 93       	st	X, r24
     e60:	f7 01       	movw	r30, r14
     e62:	31 96       	adiw	r30, 0x01	; 1
     e64:	7f 01       	movw	r14, r30
     e66:	9a 94       	dec	r9
     e68:	81 2c       	mov	r8, r1
     e6a:	99 20       	and	r9, r9
     e6c:	f9 f0       	breq	.+62     	; 0xeac <conv_brk+0x13c>
     e6e:	c5 01       	movw	r24, r10
     e70:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     e74:	97 fd       	sbrc	r25, 7
     e76:	18 c0       	rjmp	.+48     	; 0xea8 <conv_brk+0x138>
     e78:	fc 01       	movw	r30, r24
     e7a:	ff 27       	eor	r31, r31
     e7c:	23 e0       	ldi	r18, 0x03	; 3
     e7e:	f5 95       	asr	r31
     e80:	e7 95       	ror	r30
     e82:	2a 95       	dec	r18
     e84:	e1 f7       	brne	.-8      	; 0xe7e <conv_brk+0x10e>
     e86:	ec 0d       	add	r30, r12
     e88:	fd 1d       	adc	r31, r13
     e8a:	20 81       	ld	r18, Z
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	ac 01       	movw	r20, r24
     e90:	47 70       	andi	r20, 0x07	; 7
     e92:	55 27       	eor	r21, r21
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <conv_brk+0x12a>
     e96:	35 95       	asr	r19
     e98:	27 95       	ror	r18
     e9a:	4a 95       	dec	r20
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <conv_brk+0x126>
     e9e:	20 fd       	sbrc	r18, 0
     ea0:	da cf       	rjmp	.-76     	; 0xe56 <conv_brk+0xe6>
     ea2:	b5 01       	movw	r22, r10
     ea4:	0e 94 2b 09 	call	0x1256	; 0x1256 <ungetc>
     ea8:	81 10       	cpse	r8, r1
     eaa:	87 cf       	rjmp	.-242    	; 0xdba <conv_brk+0x4a>
     eac:	e1 14       	cp	r14, r1
     eae:	f1 04       	cpc	r15, r1
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <conv_brk+0x146>
     eb2:	d7 01       	movw	r26, r14
     eb4:	1c 92       	st	X, r1
     eb6:	c8 01       	movw	r24, r16
     eb8:	15 c0       	rjmp	.+42     	; 0xee4 <conv_brk+0x174>
     eba:	42 2f       	mov	r20, r18
     ebc:	46 95       	lsr	r20
     ebe:	46 95       	lsr	r20
     ec0:	46 95       	lsr	r20
     ec2:	d6 01       	movw	r26, r12
     ec4:	a4 0f       	add	r26, r20
     ec6:	b1 1d       	adc	r27, r1
     ec8:	42 2f       	mov	r20, r18
     eca:	47 70       	andi	r20, 0x07	; 7
     ecc:	8b 01       	movw	r16, r22
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <conv_brk+0x164>
     ed0:	00 0f       	add	r16, r16
     ed2:	11 1f       	adc	r17, r17
     ed4:	4a 95       	dec	r20
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <conv_brk+0x160>
     ed8:	a8 01       	movw	r20, r16
     eda:	5c 91       	ld	r21, X
     edc:	45 2b       	or	r20, r21
     ede:	4c 93       	st	X, r20
     ee0:	62 2e       	mov	r6, r18
     ee2:	a2 cf       	rjmp	.-188    	; 0xe28 <conv_brk+0xb8>
     ee4:	a0 96       	adiw	r28, 0x20	; 32
     ee6:	ef e0       	ldi	r30, 0x0F	; 15
     ee8:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__epilogue_restores__+0x6>

00000eec <vfscanf>:
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ec e7       	ldi	r30, 0x7C	; 124
     ef2:	f7 e0       	ldi	r31, 0x07	; 7
     ef4:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__prologue_saves__+0x6>
     ef8:	6c 01       	movw	r12, r24
     efa:	eb 01       	movw	r28, r22
     efc:	5a 01       	movw	r10, r20
     efe:	fc 01       	movw	r30, r24
     f00:	17 82       	std	Z+7, r1	; 0x07
     f02:	16 82       	std	Z+6, r1	; 0x06
     f04:	51 2c       	mov	r5, r1
     f06:	f6 01       	movw	r30, r12
     f08:	e3 80       	ldd	r14, Z+3	; 0x03
     f0a:	fe 01       	movw	r30, r28
     f0c:	e3 fc       	sbrc	r14, 3
     f0e:	85 91       	lpm	r24, Z+
     f10:	e3 fe       	sbrs	r14, 3
     f12:	81 91       	ld	r24, Z+
     f14:	18 2f       	mov	r17, r24
     f16:	ef 01       	movw	r28, r30
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <vfscanf+0x32>
     f1c:	ee c0       	rjmp	.+476    	; 0x10fa <vfscanf+0x20e>
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 87 08 	call	0x110e	; 0x110e <isspace>
     f24:	89 2b       	or	r24, r25
     f26:	21 f0       	breq	.+8      	; 0xf30 <vfscanf+0x44>
     f28:	c6 01       	movw	r24, r12
     f2a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <skip_spaces>
     f2e:	eb cf       	rjmp	.-42     	; 0xf06 <vfscanf+0x1a>
     f30:	15 32       	cpi	r17, 0x25	; 37
     f32:	41 f4       	brne	.+16     	; 0xf44 <vfscanf+0x58>
     f34:	fe 01       	movw	r30, r28
     f36:	e3 fc       	sbrc	r14, 3
     f38:	15 91       	lpm	r17, Z+
     f3a:	e3 fe       	sbrs	r14, 3
     f3c:	11 91       	ld	r17, Z+
     f3e:	ef 01       	movw	r28, r30
     f40:	15 32       	cpi	r17, 0x25	; 37
     f42:	81 f4       	brne	.+32     	; 0xf64 <vfscanf+0x78>
     f44:	c6 01       	movw	r24, r12
     f46:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
     f4a:	97 fd       	sbrc	r25, 7
     f4c:	d4 c0       	rjmp	.+424    	; 0x10f6 <vfscanf+0x20a>
     f4e:	41 2f       	mov	r20, r17
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	9c 01       	movw	r18, r24
     f54:	33 27       	eor	r19, r19
     f56:	24 17       	cp	r18, r20
     f58:	35 07       	cpc	r19, r21
     f5a:	a9 f2       	breq	.-86     	; 0xf06 <vfscanf+0x1a>
     f5c:	b6 01       	movw	r22, r12
     f5e:	0e 94 2b 09 	call	0x1256	; 0x1256 <ungetc>
     f62:	cb c0       	rjmp	.+406    	; 0x10fa <vfscanf+0x20e>
     f64:	1a 32       	cpi	r17, 0x2A	; 42
     f66:	39 f4       	brne	.+14     	; 0xf76 <vfscanf+0x8a>
     f68:	e3 fc       	sbrc	r14, 3
     f6a:	15 91       	lpm	r17, Z+
     f6c:	e3 fe       	sbrs	r14, 3
     f6e:	11 91       	ld	r17, Z+
     f70:	ef 01       	movw	r28, r30
     f72:	01 e0       	ldi	r16, 0x01	; 1
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <vfscanf+0x8c>
     f76:	00 e0       	ldi	r16, 0x00	; 0
     f78:	f1 2c       	mov	r15, r1
     f7a:	20 ed       	ldi	r18, 0xD0	; 208
     f7c:	21 0f       	add	r18, r17
     f7e:	2a 30       	cpi	r18, 0x0A	; 10
     f80:	80 f4       	brcc	.+32     	; 0xfa2 <vfscanf+0xb6>
     f82:	02 60       	ori	r16, 0x02	; 2
     f84:	6f 2d       	mov	r22, r15
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <mulacc>
     f92:	f6 2e       	mov	r15, r22
     f94:	fe 01       	movw	r30, r28
     f96:	e3 fc       	sbrc	r14, 3
     f98:	15 91       	lpm	r17, Z+
     f9a:	e3 fe       	sbrs	r14, 3
     f9c:	11 91       	ld	r17, Z+
     f9e:	ef 01       	movw	r28, r30
     fa0:	ec cf       	rjmp	.-40     	; 0xf7a <vfscanf+0x8e>
     fa2:	01 ff       	sbrs	r16, 1
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <vfscanf+0xc0>
     fa6:	f1 10       	cpse	r15, r1
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <vfscanf+0xc4>
     faa:	a7 c0       	rjmp	.+334    	; 0x10fa <vfscanf+0x20e>
     fac:	ff 24       	eor	r15, r15
     fae:	fa 94       	dec	r15
     fb0:	18 36       	cpi	r17, 0x68	; 104
     fb2:	19 f0       	breq	.+6      	; 0xfba <vfscanf+0xce>
     fb4:	1c 36       	cpi	r17, 0x6C	; 108
     fb6:	51 f0       	breq	.+20     	; 0xfcc <vfscanf+0xe0>
     fb8:	10 c0       	rjmp	.+32     	; 0xfda <vfscanf+0xee>
     fba:	fe 01       	movw	r30, r28
     fbc:	e3 fc       	sbrc	r14, 3
     fbe:	15 91       	lpm	r17, Z+
     fc0:	e3 fe       	sbrs	r14, 3
     fc2:	11 91       	ld	r17, Z+
     fc4:	ef 01       	movw	r28, r30
     fc6:	18 36       	cpi	r17, 0x68	; 104
     fc8:	41 f4       	brne	.+16     	; 0xfda <vfscanf+0xee>
     fca:	08 60       	ori	r16, 0x08	; 8
     fcc:	04 60       	ori	r16, 0x04	; 4
     fce:	fe 01       	movw	r30, r28
     fd0:	e3 fc       	sbrc	r14, 3
     fd2:	15 91       	lpm	r17, Z+
     fd4:	e3 fe       	sbrs	r14, 3
     fd6:	11 91       	ld	r17, Z+
     fd8:	ef 01       	movw	r28, r30
     fda:	11 23       	and	r17, r17
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <vfscanf+0xf4>
     fde:	8d c0       	rjmp	.+282    	; 0x10fa <vfscanf+0x20e>
     fe0:	61 2f       	mov	r22, r17
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	88 e6       	ldi	r24, 0x68	; 104
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 90 08 	call	0x1120	; 0x1120 <strchr_P>
     fec:	89 2b       	or	r24, r25
     fee:	09 f4       	brne	.+2      	; 0xff2 <vfscanf+0x106>
     ff0:	84 c0       	rjmp	.+264    	; 0x10fa <vfscanf+0x20e>
     ff2:	00 fd       	sbrc	r16, 0
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <vfscanf+0x118>
     ff6:	f5 01       	movw	r30, r10
     ff8:	80 80       	ld	r8, Z
     ffa:	91 80       	ldd	r9, Z+1	; 0x01
     ffc:	c5 01       	movw	r24, r10
     ffe:	02 96       	adiw	r24, 0x02	; 2
    1000:	5c 01       	movw	r10, r24
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfscanf+0x11c>
    1004:	81 2c       	mov	r8, r1
    1006:	91 2c       	mov	r9, r1
    1008:	1e 36       	cpi	r17, 0x6E	; 110
    100a:	51 f4       	brne	.+20     	; 0x1020 <vfscanf+0x134>
    100c:	f6 01       	movw	r30, r12
    100e:	46 81       	ldd	r20, Z+6	; 0x06
    1010:	57 81       	ldd	r21, Z+7	; 0x07
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	20 2f       	mov	r18, r16
    1018:	c4 01       	movw	r24, r8
    101a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <putval>
    101e:	73 cf       	rjmp	.-282    	; 0xf06 <vfscanf+0x1a>
    1020:	13 36       	cpi	r17, 0x63	; 99
    1022:	a9 f4       	brne	.+42     	; 0x104e <vfscanf+0x162>
    1024:	01 fd       	sbrc	r16, 1
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfscanf+0x140>
    1028:	ff 24       	eor	r15, r15
    102a:	f3 94       	inc	r15
    102c:	c6 01       	movw	r24, r12
    102e:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
    1032:	97 fd       	sbrc	r25, 7
    1034:	60 c0       	rjmp	.+192    	; 0x10f6 <vfscanf+0x20a>
    1036:	81 14       	cp	r8, r1
    1038:	91 04       	cpc	r9, r1
    103a:	29 f0       	breq	.+10     	; 0x1046 <vfscanf+0x15a>
    103c:	f4 01       	movw	r30, r8
    103e:	80 83       	st	Z, r24
    1040:	c4 01       	movw	r24, r8
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	4c 01       	movw	r8, r24
    1046:	fa 94       	dec	r15
    1048:	f1 10       	cpse	r15, r1
    104a:	f0 cf       	rjmp	.-32     	; 0x102c <vfscanf+0x140>
    104c:	50 c0       	rjmp	.+160    	; 0x10ee <vfscanf+0x202>
    104e:	1b 35       	cpi	r17, 0x5B	; 91
    1050:	59 f4       	brne	.+22     	; 0x1068 <vfscanf+0x17c>
    1052:	9e 01       	movw	r18, r28
    1054:	a4 01       	movw	r20, r8
    1056:	6f 2d       	mov	r22, r15
    1058:	c6 01       	movw	r24, r12
    105a:	0e 94 b8 06 	call	0xd70	; 0xd70 <conv_brk>
    105e:	ec 01       	movw	r28, r24
    1060:	89 2b       	or	r24, r25
    1062:	09 f0       	breq	.+2      	; 0x1066 <vfscanf+0x17a>
    1064:	44 c0       	rjmp	.+136    	; 0x10ee <vfscanf+0x202>
    1066:	3e c0       	rjmp	.+124    	; 0x10e4 <vfscanf+0x1f8>
    1068:	c6 01       	movw	r24, r12
    106a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <skip_spaces>
    106e:	97 fd       	sbrc	r25, 7
    1070:	42 c0       	rjmp	.+132    	; 0x10f6 <vfscanf+0x20a>
    1072:	1f 36       	cpi	r17, 0x6F	; 111
    1074:	61 f1       	breq	.+88     	; 0x10ce <vfscanf+0x1e2>
    1076:	28 f4       	brcc	.+10     	; 0x1082 <vfscanf+0x196>
    1078:	14 36       	cpi	r17, 0x64	; 100
    107a:	39 f1       	breq	.+78     	; 0x10ca <vfscanf+0x1de>
    107c:	19 36       	cpi	r17, 0x69	; 105
    107e:	51 f1       	breq	.+84     	; 0x10d4 <vfscanf+0x1e8>
    1080:	28 c0       	rjmp	.+80     	; 0x10d2 <vfscanf+0x1e6>
    1082:	13 37       	cpi	r17, 0x73	; 115
    1084:	71 f0       	breq	.+28     	; 0x10a2 <vfscanf+0x1b6>
    1086:	15 37       	cpi	r17, 0x75	; 117
    1088:	01 f1       	breq	.+64     	; 0x10ca <vfscanf+0x1de>
    108a:	23 c0       	rjmp	.+70     	; 0x10d2 <vfscanf+0x1e6>
    108c:	81 14       	cp	r8, r1
    108e:	91 04       	cpc	r9, r1
    1090:	29 f0       	breq	.+10     	; 0x109c <vfscanf+0x1b0>
    1092:	f4 01       	movw	r30, r8
    1094:	60 82       	st	Z, r6
    1096:	c4 01       	movw	r24, r8
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	4c 01       	movw	r8, r24
    109c:	fa 94       	dec	r15
    109e:	ff 20       	and	r15, r15
    10a0:	71 f0       	breq	.+28     	; 0x10be <vfscanf+0x1d2>
    10a2:	c6 01       	movw	r24, r12
    10a4:	0e 94 b1 08 	call	0x1162	; 0x1162 <fgetc>
    10a8:	3c 01       	movw	r6, r24
    10aa:	97 fd       	sbrc	r25, 7
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <vfscanf+0x1d2>
    10ae:	0e 94 87 08 	call	0x110e	; 0x110e <isspace>
    10b2:	89 2b       	or	r24, r25
    10b4:	59 f3       	breq	.-42     	; 0x108c <vfscanf+0x1a0>
    10b6:	b6 01       	movw	r22, r12
    10b8:	c3 01       	movw	r24, r6
    10ba:	0e 94 2b 09 	call	0x1256	; 0x1256 <ungetc>
    10be:	81 14       	cp	r8, r1
    10c0:	91 04       	cpc	r9, r1
    10c2:	a9 f0       	breq	.+42     	; 0x10ee <vfscanf+0x202>
    10c4:	f4 01       	movw	r30, r8
    10c6:	10 82       	st	Z, r1
    10c8:	12 c0       	rjmp	.+36     	; 0x10ee <vfscanf+0x202>
    10ca:	00 62       	ori	r16, 0x20	; 32
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <vfscanf+0x1e8>
    10ce:	00 61       	ori	r16, 0x10	; 16
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <vfscanf+0x1e8>
    10d2:	00 64       	ori	r16, 0x40	; 64
    10d4:	20 2f       	mov	r18, r16
    10d6:	a4 01       	movw	r20, r8
    10d8:	6f 2d       	mov	r22, r15
    10da:	c6 01       	movw	r24, r12
    10dc:	0e 94 26 06 	call	0xc4c	; 0xc4c <conv_int>
    10e0:	81 11       	cpse	r24, r1
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <vfscanf+0x202>
    10e4:	f6 01       	movw	r30, r12
    10e6:	83 81       	ldd	r24, Z+3	; 0x03
    10e8:	80 73       	andi	r24, 0x30	; 48
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <vfscanf+0x20a>
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <vfscanf+0x20e>
    10ee:	00 fd       	sbrc	r16, 0
    10f0:	0a cf       	rjmp	.-492    	; 0xf06 <vfscanf+0x1a>
    10f2:	53 94       	inc	r5
    10f4:	08 cf       	rjmp	.-496    	; 0xf06 <vfscanf+0x1a>
    10f6:	55 20       	and	r5, r5
    10f8:	19 f0       	breq	.+6      	; 0x1100 <vfscanf+0x214>
    10fa:	85 2d       	mov	r24, r5
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfscanf+0x218>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f ef       	ldi	r25, 0xFF	; 255
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	ef e0       	ldi	r30, 0x0F	; 15
    110a:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__epilogue_restores__+0x6>

0000110e <isspace>:
    110e:	91 11       	cpse	r25, r1
    1110:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__ctype_isfalse>
    1114:	80 32       	cpi	r24, 0x20	; 32
    1116:	19 f0       	breq	.+6      	; 0x111e <isspace+0x10>
    1118:	89 50       	subi	r24, 0x09	; 9
    111a:	85 50       	subi	r24, 0x05	; 5
    111c:	c8 f7       	brcc	.-14     	; 0x1110 <isspace+0x2>
    111e:	08 95       	ret

00001120 <strchr_P>:
    1120:	fc 01       	movw	r30, r24
    1122:	05 90       	lpm	r0, Z+
    1124:	06 16       	cp	r0, r22
    1126:	21 f0       	breq	.+8      	; 0x1130 <strchr_P+0x10>
    1128:	00 20       	and	r0, r0
    112a:	d9 f7       	brne	.-10     	; 0x1122 <strchr_P+0x2>
    112c:	c0 01       	movw	r24, r0
    112e:	08 95       	ret
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	cf 01       	movw	r24, r30
    1134:	08 95       	ret

00001136 <strnlen_P>:
    1136:	fc 01       	movw	r30, r24
    1138:	05 90       	lpm	r0, Z+
    113a:	61 50       	subi	r22, 0x01	; 1
    113c:	70 40       	sbci	r23, 0x00	; 0
    113e:	01 10       	cpse	r0, r1
    1140:	d8 f7       	brcc	.-10     	; 0x1138 <strnlen_P+0x2>
    1142:	80 95       	com	r24
    1144:	90 95       	com	r25
    1146:	8e 0f       	add	r24, r30
    1148:	9f 1f       	adc	r25, r31
    114a:	08 95       	ret

0000114c <strnlen>:
    114c:	fc 01       	movw	r30, r24
    114e:	61 50       	subi	r22, 0x01	; 1
    1150:	70 40       	sbci	r23, 0x00	; 0
    1152:	01 90       	ld	r0, Z+
    1154:	01 10       	cpse	r0, r1
    1156:	d8 f7       	brcc	.-10     	; 0x114e <strnlen+0x2>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	8e 0f       	add	r24, r30
    115e:	9f 1f       	adc	r25, r31
    1160:	08 95       	ret

00001162 <fgetc>:
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	20 ff       	sbrs	r18, 0
    116c:	33 c0       	rjmp	.+102    	; 0x11d4 <fgetc+0x72>
    116e:	26 ff       	sbrs	r18, 6
    1170:	0a c0       	rjmp	.+20     	; 0x1186 <fgetc+0x24>
    1172:	2f 7b       	andi	r18, 0xBF	; 191
    1174:	2b 83       	std	Y+3, r18	; 0x03
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	9f 81       	ldd	r25, Y+7	; 0x07
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	9f 83       	std	Y+7, r25	; 0x07
    117e:	8e 83       	std	Y+6, r24	; 0x06
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	29 c0       	rjmp	.+82     	; 0x11d8 <fgetc+0x76>
    1186:	22 ff       	sbrs	r18, 2
    1188:	0f c0       	rjmp	.+30     	; 0x11a8 <fgetc+0x46>
    118a:	e8 81       	ld	r30, Y
    118c:	f9 81       	ldd	r31, Y+1	; 0x01
    118e:	80 81       	ld	r24, Z
    1190:	08 2e       	mov	r0, r24
    1192:	00 0c       	add	r0, r0
    1194:	99 0b       	sbc	r25, r25
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	19 f4       	brne	.+6      	; 0x11a0 <fgetc+0x3e>
    119a:	20 62       	ori	r18, 0x20	; 32
    119c:	2b 83       	std	Y+3, r18	; 0x03
    119e:	1a c0       	rjmp	.+52     	; 0x11d4 <fgetc+0x72>
    11a0:	31 96       	adiw	r30, 0x01	; 1
    11a2:	f9 83       	std	Y+1, r31	; 0x01
    11a4:	e8 83       	st	Y, r30
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <fgetc+0x62>
    11a8:	ea 85       	ldd	r30, Y+10	; 0x0a
    11aa:	fb 85       	ldd	r31, Y+11	; 0x0b
    11ac:	09 95       	icall
    11ae:	97 ff       	sbrs	r25, 7
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <fgetc+0x62>
    11b2:	2b 81       	ldd	r18, Y+3	; 0x03
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	11 f0       	breq	.+4      	; 0x11bc <fgetc+0x5a>
    11b8:	80 e2       	ldi	r24, 0x20	; 32
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <fgetc+0x5c>
    11bc:	80 e1       	ldi	r24, 0x10	; 16
    11be:	82 2b       	or	r24, r18
    11c0:	8b 83       	std	Y+3, r24	; 0x03
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <fgetc+0x72>
    11c4:	2e 81       	ldd	r18, Y+6	; 0x06
    11c6:	3f 81       	ldd	r19, Y+7	; 0x07
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	3f 83       	std	Y+7, r19	; 0x07
    11ce:	2e 83       	std	Y+6, r18	; 0x06
    11d0:	99 27       	eor	r25, r25
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <fgetc+0x76>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f ef       	ldi	r25, 0xFF	; 255
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <fputc>:
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	fb 01       	movw	r30, r22
    11e8:	23 81       	ldd	r18, Z+3	; 0x03
    11ea:	21 fd       	sbrc	r18, 1
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <fputc+0x16>
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	2c c0       	rjmp	.+88     	; 0x124c <fputc+0x6e>
    11f4:	22 ff       	sbrs	r18, 2
    11f6:	16 c0       	rjmp	.+44     	; 0x1224 <fputc+0x46>
    11f8:	46 81       	ldd	r20, Z+6	; 0x06
    11fa:	57 81       	ldd	r21, Z+7	; 0x07
    11fc:	24 81       	ldd	r18, Z+4	; 0x04
    11fe:	35 81       	ldd	r19, Z+5	; 0x05
    1200:	42 17       	cp	r20, r18
    1202:	53 07       	cpc	r21, r19
    1204:	44 f4       	brge	.+16     	; 0x1216 <fputc+0x38>
    1206:	a0 81       	ld	r26, Z
    1208:	b1 81       	ldd	r27, Z+1	; 0x01
    120a:	9d 01       	movw	r18, r26
    120c:	2f 5f       	subi	r18, 0xFF	; 255
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	31 83       	std	Z+1, r19	; 0x01
    1212:	20 83       	st	Z, r18
    1214:	8c 93       	st	X, r24
    1216:	26 81       	ldd	r18, Z+6	; 0x06
    1218:	37 81       	ldd	r19, Z+7	; 0x07
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	37 83       	std	Z+7, r19	; 0x07
    1220:	26 83       	std	Z+6, r18	; 0x06
    1222:	14 c0       	rjmp	.+40     	; 0x124c <fputc+0x6e>
    1224:	8b 01       	movw	r16, r22
    1226:	ec 01       	movw	r28, r24
    1228:	fb 01       	movw	r30, r22
    122a:	00 84       	ldd	r0, Z+8	; 0x08
    122c:	f1 85       	ldd	r31, Z+9	; 0x09
    122e:	e0 2d       	mov	r30, r0
    1230:	09 95       	icall
    1232:	89 2b       	or	r24, r25
    1234:	e1 f6       	brne	.-72     	; 0x11ee <fputc+0x10>
    1236:	d8 01       	movw	r26, r16
    1238:	16 96       	adiw	r26, 0x06	; 6
    123a:	8d 91       	ld	r24, X+
    123c:	9c 91       	ld	r25, X
    123e:	17 97       	sbiw	r26, 0x07	; 7
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	17 96       	adiw	r26, 0x07	; 7
    1244:	9c 93       	st	X, r25
    1246:	8e 93       	st	-X, r24
    1248:	16 97       	sbiw	r26, 0x06	; 6
    124a:	ce 01       	movw	r24, r28
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	08 95       	ret

00001256 <ungetc>:
    1256:	fb 01       	movw	r30, r22
    1258:	23 81       	ldd	r18, Z+3	; 0x03
    125a:	20 ff       	sbrs	r18, 0
    125c:	12 c0       	rjmp	.+36     	; 0x1282 <ungetc+0x2c>
    125e:	26 fd       	sbrc	r18, 6
    1260:	10 c0       	rjmp	.+32     	; 0x1282 <ungetc+0x2c>
    1262:	8f 3f       	cpi	r24, 0xFF	; 255
    1264:	3f ef       	ldi	r19, 0xFF	; 255
    1266:	93 07       	cpc	r25, r19
    1268:	61 f0       	breq	.+24     	; 0x1282 <ungetc+0x2c>
    126a:	82 83       	std	Z+2, r24	; 0x02
    126c:	2f 7d       	andi	r18, 0xDF	; 223
    126e:	20 64       	ori	r18, 0x40	; 64
    1270:	23 83       	std	Z+3, r18	; 0x03
    1272:	26 81       	ldd	r18, Z+6	; 0x06
    1274:	37 81       	ldd	r19, Z+7	; 0x07
    1276:	21 50       	subi	r18, 0x01	; 1
    1278:	31 09       	sbc	r19, r1
    127a:	37 83       	std	Z+7, r19	; 0x07
    127c:	26 83       	std	Z+6, r18	; 0x06
    127e:	99 27       	eor	r25, r25
    1280:	08 95       	ret
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	9f ef       	ldi	r25, 0xFF	; 255
    1286:	08 95       	ret

00001288 <__ultoa_invert>:
    1288:	fa 01       	movw	r30, r20
    128a:	aa 27       	eor	r26, r26
    128c:	28 30       	cpi	r18, 0x08	; 8
    128e:	51 f1       	breq	.+84     	; 0x12e4 <__ultoa_invert+0x5c>
    1290:	20 31       	cpi	r18, 0x10	; 16
    1292:	81 f1       	breq	.+96     	; 0x12f4 <__ultoa_invert+0x6c>
    1294:	e8 94       	clt
    1296:	6f 93       	push	r22
    1298:	6e 7f       	andi	r22, 0xFE	; 254
    129a:	6e 5f       	subi	r22, 0xFE	; 254
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	8f 4f       	sbci	r24, 0xFF	; 255
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	af 4f       	sbci	r26, 0xFF	; 255
    12a4:	b1 e0       	ldi	r27, 0x01	; 1
    12a6:	3e d0       	rcall	.+124    	; 0x1324 <__ultoa_invert+0x9c>
    12a8:	b4 e0       	ldi	r27, 0x04	; 4
    12aa:	3c d0       	rcall	.+120    	; 0x1324 <__ultoa_invert+0x9c>
    12ac:	67 0f       	add	r22, r23
    12ae:	78 1f       	adc	r23, r24
    12b0:	89 1f       	adc	r24, r25
    12b2:	9a 1f       	adc	r25, r26
    12b4:	a1 1d       	adc	r26, r1
    12b6:	68 0f       	add	r22, r24
    12b8:	79 1f       	adc	r23, r25
    12ba:	8a 1f       	adc	r24, r26
    12bc:	91 1d       	adc	r25, r1
    12be:	a1 1d       	adc	r26, r1
    12c0:	6a 0f       	add	r22, r26
    12c2:	71 1d       	adc	r23, r1
    12c4:	81 1d       	adc	r24, r1
    12c6:	91 1d       	adc	r25, r1
    12c8:	a1 1d       	adc	r26, r1
    12ca:	20 d0       	rcall	.+64     	; 0x130c <__ultoa_invert+0x84>
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <__ultoa_invert+0x48>
    12ce:	68 94       	set
    12d0:	3f 91       	pop	r19
    12d2:	2a e0       	ldi	r18, 0x0A	; 10
    12d4:	26 9f       	mul	r18, r22
    12d6:	11 24       	eor	r1, r1
    12d8:	30 19       	sub	r19, r0
    12da:	30 5d       	subi	r19, 0xD0	; 208
    12dc:	31 93       	st	Z+, r19
    12de:	de f6       	brtc	.-74     	; 0x1296 <__ultoa_invert+0xe>
    12e0:	cf 01       	movw	r24, r30
    12e2:	08 95       	ret
    12e4:	46 2f       	mov	r20, r22
    12e6:	47 70       	andi	r20, 0x07	; 7
    12e8:	40 5d       	subi	r20, 0xD0	; 208
    12ea:	41 93       	st	Z+, r20
    12ec:	b3 e0       	ldi	r27, 0x03	; 3
    12ee:	0f d0       	rcall	.+30     	; 0x130e <__ultoa_invert+0x86>
    12f0:	c9 f7       	brne	.-14     	; 0x12e4 <__ultoa_invert+0x5c>
    12f2:	f6 cf       	rjmp	.-20     	; 0x12e0 <__ultoa_invert+0x58>
    12f4:	46 2f       	mov	r20, r22
    12f6:	4f 70       	andi	r20, 0x0F	; 15
    12f8:	40 5d       	subi	r20, 0xD0	; 208
    12fa:	4a 33       	cpi	r20, 0x3A	; 58
    12fc:	18 f0       	brcs	.+6      	; 0x1304 <__ultoa_invert+0x7c>
    12fe:	49 5d       	subi	r20, 0xD9	; 217
    1300:	31 fd       	sbrc	r19, 1
    1302:	40 52       	subi	r20, 0x20	; 32
    1304:	41 93       	st	Z+, r20
    1306:	02 d0       	rcall	.+4      	; 0x130c <__ultoa_invert+0x84>
    1308:	a9 f7       	brne	.-22     	; 0x12f4 <__ultoa_invert+0x6c>
    130a:	ea cf       	rjmp	.-44     	; 0x12e0 <__ultoa_invert+0x58>
    130c:	b4 e0       	ldi	r27, 0x04	; 4
    130e:	a6 95       	lsr	r26
    1310:	97 95       	ror	r25
    1312:	87 95       	ror	r24
    1314:	77 95       	ror	r23
    1316:	67 95       	ror	r22
    1318:	ba 95       	dec	r27
    131a:	c9 f7       	brne	.-14     	; 0x130e <__ultoa_invert+0x86>
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	61 05       	cpc	r22, r1
    1320:	71 05       	cpc	r23, r1
    1322:	08 95       	ret
    1324:	9b 01       	movw	r18, r22
    1326:	ac 01       	movw	r20, r24
    1328:	0a 2e       	mov	r0, r26
    132a:	06 94       	lsr	r0
    132c:	57 95       	ror	r21
    132e:	47 95       	ror	r20
    1330:	37 95       	ror	r19
    1332:	27 95       	ror	r18
    1334:	ba 95       	dec	r27
    1336:	c9 f7       	brne	.-14     	; 0x132a <__ultoa_invert+0xa2>
    1338:	62 0f       	add	r22, r18
    133a:	73 1f       	adc	r23, r19
    133c:	84 1f       	adc	r24, r20
    133e:	95 1f       	adc	r25, r21
    1340:	a0 1d       	adc	r26, r0
    1342:	08 95       	ret

00001344 <__ctype_isfalse>:
    1344:	99 27       	eor	r25, r25
    1346:	88 27       	eor	r24, r24

00001348 <__ctype_istrue>:
    1348:	08 95       	ret

0000134a <__prologue_saves__>:
    134a:	2f 92       	push	r2
    134c:	3f 92       	push	r3
    134e:	4f 92       	push	r4
    1350:	5f 92       	push	r5
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	ca 1b       	sub	r28, r26
    1374:	db 0b       	sbc	r29, r27
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	09 94       	ijmp

00001382 <__epilogue_restores__>:
    1382:	2a 88       	ldd	r2, Y+18	; 0x12
    1384:	39 88       	ldd	r3, Y+17	; 0x11
    1386:	48 88       	ldd	r4, Y+16	; 0x10
    1388:	5f 84       	ldd	r5, Y+15	; 0x0f
    138a:	6e 84       	ldd	r6, Y+14	; 0x0e
    138c:	7d 84       	ldd	r7, Y+13	; 0x0d
    138e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1390:	9b 84       	ldd	r9, Y+11	; 0x0b
    1392:	aa 84       	ldd	r10, Y+10	; 0x0a
    1394:	b9 84       	ldd	r11, Y+9	; 0x09
    1396:	c8 84       	ldd	r12, Y+8	; 0x08
    1398:	df 80       	ldd	r13, Y+7	; 0x07
    139a:	ee 80       	ldd	r14, Y+6	; 0x06
    139c:	fd 80       	ldd	r15, Y+5	; 0x05
    139e:	0c 81       	ldd	r16, Y+4	; 0x04
    13a0:	1b 81       	ldd	r17, Y+3	; 0x03
    13a2:	aa 81       	ldd	r26, Y+2	; 0x02
    13a4:	b9 81       	ldd	r27, Y+1	; 0x01
    13a6:	ce 0f       	add	r28, r30
    13a8:	d1 1d       	adc	r29, r1
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	ed 01       	movw	r28, r26
    13b6:	08 95       	ret

000013b8 <_exit>:
    13b8:	f8 94       	cli

000013ba <__stop_program>:
    13ba:	ff cf       	rjmp	.-2      	; 0x13ba <__stop_program>
